name: Manual Council Contract Release

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        type: choice
        options:
          - testnet
          - mainnet
        default: testnet
      create_release:
        description: 'Create a GitHub release for this deployment'
        required: true
        type: boolean
        default: false
      registry_app_id:
        description: 'Registry app ID (optional, will use environment variable if not provided)'
        required: false
        type: string

permissions:
  id-token: write
  contents: write

jobs:
  create-council-release:
    runs-on: ubuntu-latest
    if: inputs.create_release
    outputs:
      tag: ${{ steps.extract-version.outputs.tag }}
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_SK }}

      - name: Checkout source code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Configure git
        shell: bash
        run: |
          # set git user and email as test invoke git
          git config --global user.email "actions@github.com" && git config --global user.name "github-actions"

      - name: Extract version from pyproject.toml
        id: extract-version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Extracted version from pyproject.toml: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=council-v$VERSION" >> $GITHUB_OUTPUT

      - name: Create council release tag
        run: |
          git tag -a "${{ steps.extract-version.outputs.tag }}" -m "Council Release ${{ steps.extract-version.outputs.version }}"
          git push origin "${{ steps.extract-version.outputs.tag }}"

      - name: Create GitHub council release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ steps.app-token.outputs.token }}
          tag_name: ${{ steps.extract-version.outputs.tag }}
          name: Council Release ${{ steps.extract-version.outputs.version }}
          body: |
            üöÄ **Council Contract Release ${{ steps.extract-version.outputs.version }}**

            This is a manual release of the Council contract.

            ## Deployment
            - **Environment**: ${{ inputs.environment }}
            - **Registry App ID**: ${{ inputs.registry_app_id || 'from environment variable' }}

            ## Changes
            This release includes the latest Council contract updates.

            **‚úÖ Note**: This release was manually triggered and deployed to ${{ inputs.environment }}.
          draft: false
          prerelease: ${{ inputs.environment == 'testnet' }}

  deploy-council:
    runs-on: ubuntu-latest
    needs: [create-council-release]
    if: always() && (needs.create-council-release.result == 'success' || needs.create-council-release.result == 'skipped')
    environment: contract-${{ inputs.environment }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v5

      - name: Set up AlgoKit
        uses: ./.github/actions/algokit-setup

      - name: Deploy council to ${{ inputs.environment }}
        run: |
          # Deploy council contract using the council deploy config
          python -m smart_contracts.council.deploy_config
        env:
          # Council-specific deployment configuration
          COUNCIL_DEPLOY_COMMAND: deploy
          # Registry app ID - use input if provided, otherwise fall back to environment variable
          XGOV_REGISTRY_APP_ID: ${{ inputs.registry_app_id || (inputs.environment == 'mainnet' && vars.XGOV_REGISTRY_APP_ID_MAINNET) || (inputs.environment == 'testnet' && vars.XGOV_REGISTRY_APP_ID_TESTNET) || '' }}
          # The deployer account
          DEPLOYER_MNEMONIC: ${{ secrets.DEPLOYER_MNEMONIC }}
          # The dispenser account
          DISPENSER_MNEMONIC: ${{ secrets.DISPENSER_MNEMONIC }}

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [create-council-release, deploy-council]
    if: always()
    steps:
      - name: Notify successful deployment
        if: needs.deploy-council.result == 'success'
        run: |
          VERSION="${{ needs.create-council-release.outputs.version || 'latest' }}"
          echo "‚úÖ Successfully deployed Council contract ${VERSION} to ${{ inputs.environment }}"

      - name: Notify failed deployment
        if: needs.deploy-council.result == 'failure'
        run: |
          VERSION="${{ needs.create-council-release.outputs.version || 'latest' }}"
          echo "‚ùå Failed to deploy Council contract ${VERSION} to ${{ inputs.environment }}"
          exit 1
