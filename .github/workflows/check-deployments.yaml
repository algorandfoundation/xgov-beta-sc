name: Check xGov deployments on release merge

on:
  workflow_call:
  pull_request:
    branches:
      - main

jobs:
  check-deployments:
    runs-on: ubuntu-latest
    permissions:
      deployments: read
      contents: read

    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_SK }}

      - name: Check deployments to environments
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          REPO: ${{ github.repository }}
        run: |
          echo "Checking deployment status..."

          check_env() {
            local ENV_NAME=$1

            # Fetch the latest 10 deployments
            DEPLOYMENTS=$(gh api repos/${REPO}/deployments?per_page=10 --jq '.')

            DEPLOYMENT_ID=$(echo "$DEPLOYMENTS" | jq --arg env "$ENV_NAME" '
              map(select(.environment == $env))
              | sort_by(.created_at)
              | reverse
              | .[0].id
            ')

            if [ -z "$DEPLOYMENT_ID" ] || [ "$DEPLOYMENT_ID" == "null" ]; then
              echo "❌ No deployment found for $ENV_NAME"
              exit 1
            fi

            STATUS=$(gh api repos/${REPO}/deployments/${DEPLOYMENT_ID}/statuses --jq '
              sort_by(.created_at)
              | reverse
              | .[0].state
            ')

            if [ "$STATUS" != "success" ]; then
              echo "❌ Latest deployment to $ENV_NAME is not successful: $STATUS"
              exit 1
            fi

            echo "✅ $ENV_NAME deployment OK"
          }

          check_env "contract-testnet"
          check_env "github-pages"
