name: Validate xgov-beta-sc

on:
  workflow_call:
  pull_request:
    branches:
      - main
    types: [opened, reopened, synchronize, ready_for_review]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 0 1 * *" # Run once a month at midnight on the 1st of the month

permissions:
  id-token: write

jobs:
  validate-xgov-beta-sc:
    runs-on: "ubuntu-latest"
    if: github.head_ref != 'release' && (github.event.pull_request == null || !github.event.pull_request.draft)

    steps:
      - name: Checkout source code
        uses: actions/checkout@v5

      - name: Set up AlgoKit
        uses: ./.github/actions/algokit-setup


      - name: Debug Vault OIDC token and login
        run: |
          set -euo pipefail
      
          # ensure jq is present
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null
      
          echo "=== OIDC token (audience=vault) ==="
          TOKEN_URL="${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=vault"
          OIDC_TOKEN="$(curl -sSf -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$TOKEN_URL" | jq -r .value)"
          echo "OIDC token length: ${#OIDC_TOKEN}"
          export OIDC_TOKEN   # <-- make it visible to python below
      
          python3 - <<'PY'
          import os, base64, json
          tok=os.environ["OIDC_TOKEN"]
          _, payload, _ = tok.split(".")
          payload += "=" * (-len(payload) % 4)
          claims=json.loads(base64.urlsafe_b64decode(payload).decode())
          print(json.dumps(claims, indent=2))
          PY
      
          echo
          echo "=== Direct Vault login (auth/${VAULT_OIDC_MOUNT_PATH}/login) ==="
          LOGIN_URL="${VAULT_URL}/v1/auth/${VAULT_OIDC_MOUNT_PATH}/login"
          echo "URL: $LOGIN_URL"
          echo "Namespace: ${VAULT_NAMESPACE:-<unset>}"
          echo "Role: ${VAULT_OIDC_ROLE}"
      
          RESP="$(curl -sS -w '\n%{http_code}\n' \
            -H "X-Vault-Namespace: ${VAULT_NAMESPACE:-admin}" \
            --request POST \
            --data '{"role":"'"${VAULT_OIDC_ROLE}"'","jwt":"'"$OIDC_TOKEN"'"}' \
            "$LOGIN_URL")"
          BODY="$(echo "$RESP" | head -n-1)"
          CODE="$(echo "$RESP" | tail -n1)"
          echo "HTTP $CODE"
          echo "$BODY" | jq .
        env:
          VAULT_URL:              ${{ secrets.VAULT_URL }}
          VAULT_OIDC_ROLE:        ci-xgov-beta-sc-staging
          VAULT_OIDC_MOUNT_PATH:  jwt-github
          VAULT_NAMESPACE:        admin
      - name: Test vault signer setup
        run: algokit project deploy testnet
        env:
          # Deploy command to run
          XGOV_REG_DEPLOY_COMMAND: test_vault_signer
          # The dispenser account is used to ensure the deployer account is funded
          DISPENSER_MNEMONIC: ${{ secrets.DISPENSER_MNEMONIC }}
          # The deployer account
          DEPLOYER_MNEMONIC: ${{ secrets.DEPLOYER_MNEMONIC }}
          VAULT_URL: ${{ secrets.VAULT_URL }}
          VAULT_OIDC_ROLE: ci-xgov-beta-sc-staging
          VAULT_OIDC_MOUNT_PATH: jwt-github
          VAULT_KEY_NAME: xgov-beta-sc-ci-staging
          VAULT_NAMESPACE: admin

      - name: Start LocalNet
        run: algokit localnet start

      - name: Audit python dependencies
        run: algokit project run audit

      - name: Lint and format python dependencies
        run: algokit project run lint

      - name: Run tests
        shell: bash
        run: |
          set -o pipefail
          algokit project run test

      - name: Build smart contracts
        run: algokit project run build

      - name: Check output stability of the smart contracts
        run: algokit project run ci-teal-diff

      - if: ${{ github.actor != 'dependabot[bot]' }}
        name: Run deployer against LocalNet
        run: algokit project deploy localnet
        env:
          # Deploy command to run
          XGOV_REG_DEPLOY_COMMAND: deploy
