name: Mainnet Stable Release xgov-beta-sc

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  create-stable-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.head_ref == 'release'
    outputs:
      tag: ${{ steps.extract-version.outputs.tag }}
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_SK }}

      - name: Checkout source code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Configure git
        shell: bash
        run: |
          # set git user and email as test invoke git
          git config --global user.email "actions@github.com" && git config --global user.name "github-actions"

      - name: Extract version from pyproject.toml
        id: extract-version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Extracted version from pyproject.toml: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create stable release tag
        run: |
          git tag -a "${{ steps.extract-version.outputs.tag }}" -m "Stable Release ${{ steps.extract-version.outputs.version }}"
          git push origin "${{ steps.extract-version.outputs.tag }}"

      - name: Create GitHub stable release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ steps.app-token.outputs.token }}
          tag_name: ${{ steps.extract-version.outputs.tag }}
          name: Release ${{ steps.extract-version.outputs.version }}
          body: |
            üöÄ **Stable Release ${{ steps.extract-version.outputs.version }}**

            This is a stable release automatically created from the `release` branch.

            ## Changes
            This release includes all changes ready for production deployment.

            ## Deployment
            This version has been automatically deployed to Algorand Mainnet.

            **‚úÖ Note**: This is a stable production release.
          draft: false
          prerelease: false

  deploy-mainnet:
    runs-on: "ubuntu-latest"
    needs: [create-stable-release]
    environment: contract-mainnet
    steps:
      - name: Checkout source code
        uses: actions/checkout@v5

      - name: Set up AlgoKit
        uses: ./.github/actions/algokit-setup

      - name: Deploy registry to mainnet
        run: algokit project deploy mainnet
        env:
          # Deploy command to run
          XGOV_REG_DEPLOY_COMMAND: deploy
          # Vault configuration for transaction signing
          VAULT_URL: ${{ secrets.VAULT_URL }}
          VAULT_OIDC_ROLE: ${{ secrets.VAULT_ROLE_MAINNET }}
          VAULT_OIDC_MOUNT_PATH: ${{ secrets.VAULT_OIDC_MOUNT_PATH || 'oidc' }}
          VAULT_KEY_NAME: ${{ secrets.VAULT_KEY_NAME_MAINNET }}
          MULTISIG_ALGORAND_ADDRESS: ${{ vars.MULTISIG_ADDRESS_MAINNET || '' }}
          VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
          # The deployer account
          DEPLOYER_MNEMONIC: ${{ secrets.DEPLOYER_MNEMONIC }}
          # The dispenser account is used to ensure the deployer account is funded
          DISPENSER_MNEMONIC: ${{ secrets.DISPENSER_MNEMONIC }}
          # Do not perform a fresh deploy
          XGOV_REG_FRESH_DEPLOY: "false"
          # Do not configure the contract
          XGOV_REG_CONFIGURE: "false"
          # Should the contract be configured with roles?
          XGOV_REG_SET_ROLES: "false"
          # Version of the xgov-beta-sc registry to deploy
          XGOV_REGISTRY_VERSION: ${{ needs.create-stable-release.outputs.version }}

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [create-stable-release, deploy-mainnet]
    if: always() && needs.create-stable-release.result == 'success'
    steps:
      - name: Notify successful deployment
        if: needs.deploy-mainnet.result == 'success'
        run: |
          echo "‚úÖ Successfully deployed xgov-beta-sc ${{ needs.create-stable-release.outputs.version }} to Algorand Mainnet"

      - name: Notify failed deployment
        if: needs.deploy-mainnet.result == 'failure'
        run: |
          echo "‚ùå Failed to deploy xgov-beta-sc ${{ needs.create-stable-release.outputs.version }} to Algorand Mainnet"
          exit 1
