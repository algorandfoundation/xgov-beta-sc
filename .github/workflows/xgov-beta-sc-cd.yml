name: Release xgov-beta-sc

on:
  workflow_dispatch:
    inputs:
      fresh-deploy:
        description: "Deploy fresh contract"
        required: false
        default: false
        type: boolean
      xgov-reg-configure:
        description: "Configure xgov-reg contract"
        required: false
        default: false
        type: boolean
      xgov-reg-set-roles:
        description: "Set roles in xgov-reg contract"
        required: false
        default: true
        type: boolean
  workflow_call:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    name: Validate xgov-beta-sc
    if: github.ref != 'refs/heads/release'
    uses: ./.github/workflows/xgov-beta-sc-ci.yml
    secrets: inherit

  create-canary-release:
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip-canary]')
    outputs:
      tag: ${{ steps.create-tag.outputs.tag }}
      version: ${{ steps.extract-version.outputs.version }}
      should-deploy: ${{ steps.check-changes.outputs.should-deploy }}
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_SK }}

      - name: Checkout source code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Check for smart contract changes
        id: check-changes
        run: |
          # Get the commit before the current one to compare changes
          PREVIOUS_COMMIT=$(git rev-parse HEAD~1)

          # Check if there are changes to *.teal files in specific directories
          if git diff --name-only "$PREVIOUS_COMMIT" HEAD | grep -E "^smart_contracts/artifacts/(proposal|xgov_registry)/.*\.teal$"; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Found changes to *.teal files in proposal or xgov_registry directories"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "No changes to *.teal files in proposal or xgov_registry directories"
          fi

      - name: Extract version from pyproject.toml
        id: extract-version
        if: steps.check-changes.outputs.should-deploy == 'true'
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get next canary number
        id: canary-number
        if: steps.check-changes.outputs.should-deploy == 'true'
        run: |
          BASE_VERSION="${{ steps.extract-version.outputs.version }}"
          CANARY_TAGS=$(git tag -l "v${BASE_VERSION}.canary.*" | sort -V)
          if [ -z "$CANARY_TAGS" ]; then
            CANARY_NUM=1
          else
            LATEST_CANARY=$(echo "$CANARY_TAGS" | tail -1)
            CANARY_NUM=$(echo "$LATEST_CANARY" | sed "s/v${BASE_VERSION}\.canary\.\([0-9]*\)/\1/")
            CANARY_NUM=$((CANARY_NUM + 1))
          fi
          echo "number=$CANARY_NUM" >> $GITHUB_OUTPUT

      - name: Create canary tag
        id: create-tag
        if: steps.check-changes.outputs.should-deploy == 'true'
        run: |
          TAG="v${{ steps.extract-version.outputs.version }}.canary.${{ steps.canary-number.outputs.number }}"
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions"
          git tag -a "$TAG" -m "Canary Release $TAG"
          git push origin "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub canary release
        if: steps.check-changes.outputs.should-deploy == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ steps.app-token.outputs.token }}
          tag_name: ${{ steps.create-tag.outputs.tag }}
          name: Canary Release ${{ steps.create-tag.outputs.tag }}
          body: |
            üöÄ **Canary Release ${{ steps.create-tag.outputs.tag }}**

            This is a canary release automatically created from the `main` branch.

            ## Changes
            This release includes the latest changes merged into main.

            ## Deployment
            This version has been automatically deployed to Algorand Testnet for testing.

            **‚ö†Ô∏è Note**: This is a canary release for testing purposes. Not suitable for production use.
          draft: false
          prerelease: true

  deploy-testnet:
    runs-on: "ubuntu-latest"
    needs: [validate, create-canary-release]
    if: always() && needs.validate.result == 'success' && (needs.create-canary-release.outputs.should-deploy == 'true' || github.event_name == 'workflow_dispatch')
    environment: contract-testnet
    steps:
      - name: Checkout source code
        uses: actions/checkout@v5

      - name: Set up AlgoKit
        uses: ./.github/actions/algokit-setup

      - name: Deploy to testnet
        run: algokit project deploy testnet
        env:
          # Deploy command to run
          XGOV_REG_DEPLOY_COMMAND: deploy
          # Vault configuration for transaction signing
          VAULT_URL: ${{ secrets.VAULT_URL }}
          VAULT_OIDC_ROLE: ${{ secrets.VAULT_ROLE_TESTNET }}
          VAULT_OIDC_MOUNT_PATH: ${{ secrets.VAULT_OIDC_MOUNT_PATH || 'oidc' }}
          VAULT_KEY_NAME: ${{ secrets.VAULT_KEY_NAME_TESTNET }}
          VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
          # The deployer account
          DEPLOYER_MNEMONIC: ${{ secrets.DEPLOYER_MNEMONIC }}
          # The dispenser account is used to ensure the deployer account is funded
          DISPENSER_MNEMONIC: ${{ secrets.DISPENSER_MNEMONIC }}
          # Should the contract be deployed fresh?
          XGOV_REG_FRESH_DEPLOY: ${{ github.event.inputs.fresh-deploy || 'false' }}
          # Should the contract be configured?
          XGOV_REG_CONFIGURE: ${{ github.event.inputs.xgov-reg-configure || 'false' }}
          # Should the contract be configured with roles?
          XGOV_REG_SET_ROLES: ${{ github.event.inputs.xgov-reg-set-roles || vars.XGOV_REG_SET_ROLES || 'true' }} # defaults to true, set to false if you want to skip setting roles
          # Registry configuration
          XGOV_CFG_XGOV_FEE: ${{ vars.XGOV_FEE || '1_000_000' }} # defaults: 1 ALGO in microALGO
          XGOV_CFG_PROPOSER_FEE: ${{ vars.PROPOSER_FEE || '1_000_000' }} # defaults: 1 ALGO in microALGO
          XGOV_CFG_OPEN_PROPOSAL_FEE: ${{ vars.OPEN_PROPOSAL_FEE || '100_000_000' }} # defaults: 100 ALGO in microALGO
          XGOV_CFG_DAEMON_OPS_FUNDING_BPS: ${{ vars.DAEMON_OPS_FUNDING_BPS || '500' }} # defaults: 5% in bps
          XGOV_CFG_PROPOSAL_COMMITMENT_BPS: ${{ vars.PROPOSAL_COMMITMENT_BPS || '300' }} # defaults: 3% in bps
          XGOV_CFG_MIN_REQUESTED_AMOUNT: ${{ vars.MIN_REQUESTED_AMOUNT || '1_000_000' }} # defaults: 1 ALGO in microALGO
          XGOV_CFG_MAX_REQUESTED_AMOUNT: ${{ vars.MAX_REQUESTED_AMOUNT || '10_000_000,20_000_000,30_000_000' }} # defaults: 10 (S), 20 (M), 30 (L) ALGO in microALGO
          XGOV_CFG_DISCUSSION_DURATION: ${{ vars.DISCUSSION_DURATION || '60,60,60,60' }} # defaults: 1 (S), 1 (M), 1 (L), 1 (XL) minute in seconds
          XGOV_CFG_VOTING_DURATION: ${{ vars.VOTING_DURATION || '3_600,3_600,3_600,3_600' }} # defaults: 1 (S), 1 (M), 1 (L), 1 (XL) hours in seconds
          XGOV_CFG_QUORUM: ${{ vars.QUORUM || '500,1_000,2_000' }} # defaults: 5 (S), 10 (M), 20 (L) % in bps
          XGOV_CFG_WEIGHTED_QUORUM: ${{ vars.WEIGHTED_QUORUM || '500,1_000,2_000' }} # defaults: 5 (S), 10 (M), 20 (L) % in bps
