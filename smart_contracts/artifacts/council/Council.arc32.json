{
    "hints": {
        "create(uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "update_council()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "add_member(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "remove_member(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote(uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "op_up()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "member_count": {
                    "type": "uint64",
                    "key": "member_count"
                },
                "registry_app_id": {
                    "type": "uint64",
                    "key": "registry_app_id"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Council",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "uint64",
                        "name": "registry_id",
                        "desc": "The application ID of the XGovRegistry contract."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create a new council contract."
            },
            {
                "name": "update_council",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update the council contract."
            },
            {
                "name": "add_member",
                "args": [
                    {
                        "type": "address",
                        "name": "address",
                        "desc": "The address of the member to add."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Add a member to the council."
            },
            {
                "name": "remove_member",
                "args": [
                    {
                        "type": "address",
                        "name": "address",
                        "desc": "The address of the member to remove."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Remove a member from the council."
            },
            {
                "name": "vote",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposal_id",
                        "desc": "The ID of the proposal to vote on."
                    },
                    {
                        "type": "bool",
                        "name": "block",
                        "desc": "Whether or not to block the proposal."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Cast a vote on a proposal."
            },
            {
                "name": "op_up",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}