# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "pause_registry", "returns": {"type": "void"}, "desc": "Pauses the xGov Registry non-administrative methods.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "pause_proposals", "returns": {"type": "void"}, "desc": "Pauses the creation of new Proposals.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "resume_registry", "returns": {"type": "void"}, "desc": "Resumes the xGov Registry non-administrative methods.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "resume_proposals", "returns": {"type": "void"}, "desc": "Resumes the creation of new Proposals.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "The proposer's address", "name": "proposer"}], "name": "create_empty_proposal", "returns": {"type": "uint64", "desc": "The ID of the created proposal"}, "desc": "Create an empty proposal", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The commitment in basis points", "name": "commitment_bps"}], "name": "set_proposal_commitment_bps", "returns": {"type": "void"}, "desc": "Set the proposal commitment in basis points", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The minimum requested amount", "name": "min_requested_amount"}], "name": "set_min_requested_amount", "returns": {"type": "void"}, "desc": "Set the minimum requested amount", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The maximum requested amount", "name": "max_requested_amount"}], "name": "set_max_requested_amount_small", "returns": {"type": "void"}, "desc": "Set the maximum requested amount for small proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The maximum requested amount", "name": "max_requested_amount"}], "name": "set_max_requested_amount_medium", "returns": {"type": "void"}, "desc": "Set the maximum requested amount for medium proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The maximum requested amount", "name": "max_requested_amount"}], "name": "set_max_requested_amount_large", "returns": {"type": "void"}, "desc": "Set the maximum requested amount for large proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The daemon operations funding in basis points", "name": "daemon_ops_funding_bps"}], "name": "set_daemon_ops_funding_bps", "returns": {"type": "void"}, "desc": "Set the daemon operations funding in basis points", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The discussion duration", "name": "discussion_duration"}], "name": "set_discussion_duration_small", "returns": {"type": "void"}, "desc": "Set the discussion duration for small proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The discussion duration", "name": "discussion_duration"}], "name": "set_discussion_duration_medium", "returns": {"type": "void"}, "desc": "Set the discussion duration for medium proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The discussion duration", "name": "discussion_duration"}], "name": "set_discussion_duration_large", "returns": {"type": "void"}, "desc": "Set the discussion duration for large proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "The xGov Daemon", "name": "xgov_daemon"}], "name": "set_xgov_daemon", "returns": {"type": "void"}, "desc": "Set the xGov Daemon", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The proposal fee", "name": "open_proposal_fee"}], "name": "set_open_proposal_fee", "returns": {"type": "void"}, "desc": "Set the fee to open a proposal", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[32]", "desc": "The committee ID", "name": "committee_id"}], "name": "set_committee_id", "returns": {"type": "void"}, "desc": "Set the committee ID", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "clear_committee_id", "returns": {"type": "void"}, "desc": "Clear the committee ID", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The number of committee members", "name": "committee_members"}], "name": "set_committee_members", "returns": {"type": "void"}, "desc": "Set the number of committee members", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The number of committee votes", "name": "committee_votes"}], "name": "set_committee_votes", "returns": {"type": "void"}, "desc": "Set the number of committee votes", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The voting duration", "name": "voting_duration"}], "name": "set_voting_duration_small", "returns": {"type": "void"}, "desc": "Set the voting duration for small proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The voting duration", "name": "voting_duration"}], "name": "set_voting_duration_medium", "returns": {"type": "void"}, "desc": "Set the voting duration for medium proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The voting duration", "name": "voting_duration"}], "name": "set_voting_duration_large", "returns": {"type": "void"}, "desc": "Set the voting duration for large proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The quorum", "name": "quorum"}], "name": "set_quorum_small", "returns": {"type": "void"}, "desc": "Set the quorum for small proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The quorum", "name": "quorum"}], "name": "set_quorum_medium", "returns": {"type": "void"}, "desc": "Set the quorum for medium proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The quorum", "name": "quorum"}], "name": "set_quorum_large", "returns": {"type": "void"}, "desc": "Set the quorum for large proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The weighted quorum", "name": "weighted_quorum"}], "name": "set_weighted_quorum_small", "returns": {"type": "void"}, "desc": "Set the weighted quorum for small proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The weighted quorum", "name": "weighted_quorum"}], "name": "set_weighted_quorum_medium", "returns": {"type": "void"}, "desc": "Set the weighted quorum for medium proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The weighted quorum", "name": "weighted_quorum"}], "name": "set_weighted_quorum_large", "returns": {"type": "void"}, "desc": "Set the weighted quorum for large proposals", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The proposal app", "name": "proposal_app"}, {"type": "address", "desc": "The voter", "name": "voter"}, {"type": "uint64", "desc": "The number of approvals", "name": "approvals"}, {"type": "uint64", "desc": "The number of rejections", "name": "rejections"}], "name": "vote", "returns": {"type": "void"}, "desc": "Vote on a proposal", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "The XGov council", "name": "xgov_council"}], "name": "set_xgov_council", "returns": {"type": "void"}, "desc": "Set the XGov council", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The proposal app", "name": "proposal_app"}], "name": "fund", "returns": {"type": "void"}, "desc": "Fund a proposal", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "proposal_app"}], "name": "finalize_proposal", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "proposal_app"}], "name": "drop_proposal", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "proposal_id"}], "name": "is_proposal", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "XgovRegistryMock", "state": {"keys": {"box": {}, "global": {"proposal_commitment_bps": {"key": "cHJvcG9zYWxfY29tbWl0bWVudF9icHM=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "min_requested_amount": {"key": "bWluX3JlcXVlc3RlZF9hbW91bnQ=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "max_requested_amount_small": {"key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGw=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "max_requested_amount_medium": {"key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVt", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "max_requested_amount_large": {"key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfbGFyZ2U=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "daemon_ops_funding_bps": {"key": "ZGFlbW9uX29wZXJhdGlvbl9mdW5kaW5nX2Jwcw==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "discussion_duration_small": {"key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9zbWFsbA==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "discussion_duration_medium": {"key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9tZWRpdW0=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "discussion_duration_large": {"key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9sYXJnZQ==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "xgov_daemon": {"key": "eGdvdl9kYWVtb24=", "keyType": "AVMBytes", "valueType": "address"}, "open_proposal_fee": {"key": "b3Blbl9wcm9wb3NhbF9mZWU=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "committee_id": {"key": "Y29tbWl0dGVlX2lk", "keyType": "AVMBytes", "valueType": "byte[32]"}, "committee_members": {"key": "Y29tbWl0dGVlX21lbWJlcnM=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "committee_votes": {"key": "Y29tbWl0dGVlX3ZvdGVz", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "voting_duration_small": {"key": "dm90aW5nX2R1cmF0aW9uX3NtYWxs", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "voting_duration_medium": {"key": "dm90aW5nX2R1cmF0aW9uX21lZGl1bQ==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "voting_duration_large": {"key": "dm90aW5nX2R1cmF0aW9uX2xhcmdl", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "quorum_small": {"key": "cXVvcnVtX3NtYWxs", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "quorum_medium": {"key": "cXVvcnVtX21lZGl1bQ==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "quorum_large": {"key": "cXVvcnVtX2xhcmdl", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "weighted_quorum_small": {"key": "d2VpZ2h0ZWRfcXVvcnVtX3NtYWxs", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "weighted_quorum_medium": {"key": "d2VpZ2h0ZWRfcXVvcnVtX21lZGl1bQ==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "weighted_quorum_large": {"key": "d2VpZ2h0ZWRfcXVvcnVtX2xhcmdl", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "xgov_council": {"key": "eGdvdl9jb3VuY2ls", "keyType": "AVMBytes", "valueType": "address"}, "paused_registry": {"key": "cGF1c2VkX3JlZ2lzdHJ5", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "paused_proposals": {"key": "cGF1c2VkX3Byb3Bvc2Fscw==", "keyType": "AVMBytes", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 3, "ints": 23}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiAGAQgABIDfboD1JCYgBBUffHUiV3JvbmcgUHJvcG9zYWwgU3RhdHVzIG9yIGZpbmFsaXplZARFUlI6EW9wZW5fcHJvcG9zYWxfZmVlDGNvbW1pdHRlZV9pZA9wYXVzZWRfcmVnaXN0cnkQcGF1c2VkX3Byb3Bvc2Fscxdwcm9wb3NhbF9jb21taXRtZW50X2JwcxRtaW5fcmVxdWVzdGVkX2Ftb3VudBptYXhfcmVxdWVzdGVkX2Ftb3VudF9zbWFsbBttYXhfcmVxdWVzdGVkX2Ftb3VudF9tZWRpdW0abWF4X3JlcXVlc3RlZF9hbW91bnRfbGFyZ2UcZGFlbW9uX29wZXJhdGlvbl9mdW5kaW5nX2JwcxlkaXNjdXNzaW9uX2R1cmF0aW9uX3NtYWxsGmRpc2N1c3Npb25fZHVyYXRpb25fbWVkaXVtGWRpc2N1c3Npb25fZHVyYXRpb25fbGFyZ2ULeGdvdl9kYWVtb24gMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDARY29tbWl0dGVlX21lbWJlcnMPY29tbWl0dGVlX3ZvdGVzFXZvdGluZ19kdXJhdGlvbl9zbWFsbBZ2b3RpbmdfZHVyYXRpb25fbWVkaXVtFXZvdGluZ19kdXJhdGlvbl9sYXJnZQxxdW9ydW1fc21hbGwNcXVvcnVtX21lZGl1bQxxdW9ydW1fbGFyZ2UVd2VpZ2h0ZWRfcXVvcnVtX3NtYWxsFndlaWdodGVkX3F1b3J1bV9tZWRpdW0Vd2VpZ2h0ZWRfcXVvcnVtX2xhcmdlDHhnb3ZfY291bmNpbAxVbmF1dGhvcml6ZWQOTWlzc2luZyBDb25maWcxGEAAnCcHgawCZycIgYDyi6gJZycJgYD09pBdZycKgYDQ28P0AmcnC4GAoLeH6QVnJwyB9ANnJw0hBGcnDiEEZycPIQRnJxAyA2crgYDC1y9nJwQnEWcnEiRnJxMkZycUIQVnJxUhBWcnFoGA6klnJxeBuBdnJxiBiCdnJxmB2DZnJxqBiCdnJxuB8C5nJxyB2DZnJx0yA2cnBSRnJwYkZzEbQQEjMRkURDEYRIIjBIb34OYEOeJtigSYNS6GBPpO1uIEw4awPwRoEet2BDcjWyIEu8ctGwTRdnbZBHzXmq0EHHH05wQp39AhBDSl3FUEuw2wEQSEt9JoBIOdxR0EUEwxuQRWrRxvBPg1ef0EUg4fZARTgCFIBKT3ZvYEqZmLHQROnGB8BGUN+osEyIfwhgRK+E6lBCxk6G8EFqzOOwSRDhqjBDfWrfEEb6YhTAT1kQdWBGVhCp8EJpgyADYaAI4jABoAFAAOAAgAKg8sDzsPSg9ZD2gPdw+GD5UPpA+zD8IP0AABD98P7g/9EAwQGxAqEDkQSBBXEGYQdRCEEXURhBH0EpMS/QAnBCcRZyJDJwYkZyJDJwUkZyJDJwYiZyJDJwUiZyJDMRkUMRgUEEQiQzYaAUkVgSASRDIKcwFEsYEUsjSBA7I1IrI4gAQKgQFDskKAnx0KIAUAAQoUkE4mHwIAAAZzdGF0dXMACWZpbmFsaXplZAhwcm9wb3Nlcg9yZWdpc3RyeV9hcHBfaWQQZnVuZGluZ19jYXRlZ29yeQFNEWNvbW1pdHRlZV9tZW1iZXJzDHZvdGVyc19jb3VudA9jb21taXR0ZWVfdm90ZXMNdm90ZWRfbWVtYmVycwlhcHByb3ZhbHMKcmVqZWN0aW9ucw5hc3NpZ25lZF92b3RlcwQVH3x1DWxvY2tlZF9hbW91bnQFbnVsbHMBAA5vcGVuX3RpbWVzdGFtcBZ2b3RlX29wZW5pbmdfdGltZXN0YW1wDGNvbW1pdHRlZV9pZCgAJkVSUjpXcm9uZyBQcm9wb3NhbCBTdGF0dXMgb3IgZmluYWxpemVkBXRpdGxlFHN1Ym1pc3Npb25fdGltZXN0YW1wBWZvY3VzDGZ1bmRpbmdfdHlwZRByZXF1ZXN0ZWRfYW1vdW50EW1ldGFkYXRhX3VwbG9hZGVkAVYLeGdvdl9kYWVtb24xGEAAbjE1gQMSRDE0JRJEMTcURDE2FEQnBDIDZycFImcnFypnJxMiZycYImcnFCJnKSJnKyJnJwYiZycZImcnGiJnJxsiZycQImcnFSpnJwgiZycKImcnCyJnJwwiZycNImcnESJnJwkiZycOImcnHCJngAQkN408NhoAjgEAfDEZFEQxGEEAZYINBO2uucoEcUOZTwRzcTIaBDTmE8oEDZqw1wQYQaDSBHNNvswEIS2fBwSKXkyABCrBmwUEgCBptASoxvgKBNvYPdk2GgCODQD1AmwCwgMHA/sEwgY/B5wH5AggCOsJzAABACNDgAQhax4HNhoAjgEADQAxGYEFEjEYEERCCZAiSSpJNhoBSRWBIBJEMg1EJwRMZycFMg1nJxWIC3FJKhJBACGAGAAWRVJSOkVtcHR5IENvbW1pdHRlZSBJRCcPTFCwI0MnCIgLFElOAkUGRQQoRQYoE0EABUsDQv/gSwIiDkEAIoAdABtFUlI6V3JvbmcgQ29tbWl0dGVlIE1lbWJlcnNC/7cnCogK0klOAkUGRQMoE0EABUsDQv+hSwEiDkEAIIAbABlFUlI6V3JvbmcgQ29tbWl0dGVlIFZvdGVzQv96JxVLAWcnCEsDZycKSwJnSwRC/2YiKkcCMRYjCUk4ECMSRDYaAUcCIlmBAghMFRJENhoCSRWBCBJENhoDSRWBCBJENhoESRUjEkSICouICqJEIillREABLyIrZURAASgjREsDVwIASUUKSwMXSU4CRQpLAxdFCEkVgXsORCoTRCQSQAAHSwclEkEA+CNEgBRtaW5fcmVxdWVzdGVkX2Ftb3VudIgJ9CgSRIAabWF4X3JlcXVlc3RlZF9hbW91bnRfbGFyZ2WICdIoEkRLB0lPAw9ESU8CDkRJiAmWSwZJOAAiJwRlRBJESTgHMgoSRDgIEkQnF0sKZ4AabWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGyICYQoEkSAG21heF9yZXF1ZXN0ZWRfYW1vdW50X21lZGl1bYgJYUxFCigSRA5BACknBiRnJxpLCGcnG0sGSU4CZ0sBFycZTGeICRMnEExnJxMyB2cpJGcjQ0sFSwcOQQAHJwYlZ0L/zCcGgSFnQv/EIkL/BSJC/tU2GgFHAiJZSU4DSYECCE8CFRJENhoCSRUjEkSICS+ICKpMRCccI2cnEhNBABEnB7xIVwIAJwe8SCcHTL8jQycHvURJSwMIJwdM00xXAgAnB04Cu0L/5iJJiAkkRCIpZUQkE0AAByIrZURBACknFkUBKEUCSSgTQQAISScPTFCwI0MiJwRlRIgJEycHvEgrI2dLAUL/5ShFAUL/1SKICK6ICCkyByInE2VECSInBmVMSU8CRCQSQQCKgBlkaXNjdXNzaW9uX2R1cmF0aW9uX3NtYWxsiAg5RQRLAygSREsCDkQpJWcnGDIHZ4ARb3Blbl9wcm9wb3NhbF9mZWWICBAoEkQiJxxlRESAHGRhZW1vbl9vcGVyYXRpb25fZnVuZGluZ19icHOIB+YoEkQnHogID0kVgSASRE4CCyEECogISCNDSSUSQQAkgBpkaXNjdXNzaW9uX2R1cmF0aW9uX21lZGl1bYgHqEUEQv9sgBlkaXNjdXNzaW9uX2R1cmF0aW9uX2xhcmdliAeFRQRC/0kqSTYaAUcCIllJTgKBKAuBAghMFRJEiAfIRCIpZUQlEkQxFkAAmjIERQMjRQRLA0sDDEEADUsDSYgH5SMIRQRC/+siRQRLA0sBDEEATksBVwIASwRJTgKBKAuBKFhJVwAgSwFXIAhPAoEgWycdTwNQSb1FARRESwFETwInElC/IicJZUQjCCcJTGciJw5lRAgnDkxnIwhFBEL/qiInCWVEIicIZUQSQQAVIicOZUQiJwplRBJEKYEZZycUMgdnI0MiiAdcQv97IkcEKkcCNhoBSRWBIBJENhoCSRWBCBJENhoDSRWBCBJEiAcFRCIpZUSBGRNBAQ4nFkUIKEUKSwcoE0EACUsHJw9MULAjQ0sBF0UGSRdFBCcdSwNQSUUKvUUBQAB2gBUAE0VSUjpWb3RlciBub3QgZm91bmRFCEsHKBNBAAVLB0L/vUsISb5ESVcACIABgFBPAky/IicLZUQjCCcLTGciW0sGSU4CCUsFSU4DCSInDGVETwIIJwxMZyInDWVETwIIJw1MZyInEWVECCcRTGdLCUL/bEsIvkxJTgJFCUSBQFMnEiJPAlQnEhNBACCAGQAXRVJSOlZvdGVyIGFscmVhZHkgdm90ZWRFCEL/aksGVwAISwZLBQgWpEEAG4AUABJFUlI6Vm90ZXMgZXhjZWVkZWRFCEL/QEsJRQhC/zmIBJhJTgJFCkUGKEUMKBNA/uRLBEAAIoAbABlFUlI6Vm90aW5nIFBlcmlvZCBFeHBpcmVkRQhC/r1LCkUIQv62IipHA4gFcyIpZUSBGRJEiARJKBJEQQAOIicLZUQiJwhlRBJBATMjRCInBmVMSU4CRQZEJBJBAO2ADHF1b3J1bV9zbWFsbIgE80UGSwUoEkQiJwhlRAshBApFAyInBmVMSU4CRQZEJBJBAHSAFXdlaWdodGVkX3F1b3J1bV9zbWFsbIgEt0UGSwUoEkQiJwxlRCInDWVECCInEWVECEUCIicKZUQLIQQKRQIiJwtlREsDD0EAG0lLAg9BABQiJwxlRCInDWVEDUEABimBHmcjQymBKGciJwRlRIgE7UL/70sDJRJBACCAFndlaWdodGVkX3F1b3J1bV9tZWRpdW2IBDtFBkL/gYAVd2VpZ2h0ZWRfcXVvcnVtX2xhcmdliAQcRQZC/2JLAyUSQQAXgA1xdW9ydW1fbWVkaXVtiAP+RQZC/wiADHF1b3J1bV9sYXJnZYgD6EUGQv7yIkL+yjYaAUkVIxJEIlMxAIAMeGdvdl9jb3VuY2lsiAPzSRWBIBJEEkQiKWVEgR4SREEAESmBPGciJwVlRHIIRIgELSNDKYEtZ0L/9yJJiAQCRCIpZUSBLRNBACYnFkUBKEUCSSgTQQAISScPTFCwI0MpgTJnIicEZUSIA/NLAUL/6ChFAUL/2CIqRwI2GgFHAiJZSU4CgSALgQIITBUSRCIpZUQlEkEAfIgDmEQxFkAAbDIERQMjRQVLBEsDDEEADUsESYgDvCMIRQVC/+siRQRLA0sBDEEAQ0sBVwIASwSBIAuBIFgnHUxQSUUHvUUBQQAgIicJZUQjCScJTGciJw5lREsGSU4CvkQiWwknDkxnvEhLAyMIRQRC/7UjQyKIA2FC/6kiKWVEgTISQAAUIillRIE8EkAACiIpZUSBKBJBAAwiK2VEQAAFI0RC/14iQv/4IkmIAvtEIitlREAALiIpZURBAKgiKWVEJBNBAJ8iKWVEgTITQQCVIillRIE8E0EAiyIpZUSBKBNBAIEnFkUBKEUCSSgTQQAISScPTFCwI0MiJwllREEANYAwAC5FUlI6VGhlcmUgYXJlIHZvdGVycyBhc3NpZ25lZCB0byB0aGlzIHByb3Bvc2FsQv+8IillRCQSQQAIIicEZUSIAn8iJwVlRHIIRDIKcwBEMgpzAUQJiAJVKyNnSwFC/40oRQFC/32IAixEIitlREQnB7xIIicFZURyCEQyCnMARIgCKiNDIicEZUQiJwVlRBYiJxdlREkVFlcGAkxQIicTZUQWIicYZUQWIicUZUQWIillRBYiK2VEJxIiTwJUIicGZUQWIicZZUQWSZOBCA5EVwcBIicaZUQWIicbZUQWIicQZUQWIicVZUQiJwhlRBYiJwplRBYiJwtlRBYiJwxlRBYiJw1lRBYiJxFlRBZPE08TUIACALxQTxFQTxBQTw9QTw5QTw1QTwxQTwtQTwpQTwlQTwhQTwdQTwZQTwVQTwRQTwNQTwJQTFBMUCcPTFCwI0OKAAIiKjIHIicUZUQJIicGZUxJTwJEJBJBADiAFXZvdGluZ19kdXJhdGlvbl9zbWFsbIgArIwAjAGLACgTQQAIIosAjAGMAImLAosBDiiMAYwAiYsDJRJBACKAFnZvdGluZ19kdXJhdGlvbl9tZWRpdW2IAGyMAIwBQv+9gBV2b3RpbmdfZHVyYXRpb25fbGFyZ2WIAEuMAIwBQv+ciACZRCIpZUQkEkEACiIrZURAAAMjRIkiQv/6igEBgBdwcm9wb3NhbF9jb21taXRtZW50X2Jwc4gACigSRIv/CyEEComKAQIiJwVlRIv/ZShMQAAYgBQAEkVSUjpNaXNzaW5nIENvbmZpZ4wBiwCLAU8DTwOJigEBIicFZUSL/2VEiYAPcGF1c2VkX3JlZ2lzdHJ5iP+uKBJEFESJMQAiJwRlRBKJMQAnHoj/yUkVgSASRBKJMg0iJwVlRBKJigIAsYv/sgiL/rIHI7IQIrIBs4mKAQAiJxBlRIv/TIj/3icQImeJigEAi/84GDIIEkSL/zkaADYaABJEibJAgAQhax4HshpMshqBBrIQJLIBs7Q9MgpzAUSxSwFyCEQkK2VETwJPBAkJsgiyByKyECSyAbMWKExQsCJDNhoBSRUjEkQXJwdMZyJDNhoBSRUjEkQXJwhMZyJDNhoBSRUjEkQXJwlMZyJDNhoBSRUjEkQXJwpMZyJDNhoBSRUjEkQXJwtMZyJDNhoBSRUjEkQXJwxMZyJDNhoBSRUjEkQXJw1MZyJDNhoBSRUjEkQXJw5MZyJDNhoBSRUjEkQXJw9MZyJDNhoBSRWBIBJEJxBMZyJDNhoBSRUjEkQXK0xnIkM2GgFJFYEgEkQnBExnIkM2GgFJFSMSRBcnEkxnIkM2GgFJFSMSRBcnE0xnIkM2GgFJFSMSRBcnFExnIkM2GgFJFSMSRBcnFUxnIkM2GgFJFSMSRBcnFkxnIkM2GgFJFSMSRBcnF0xnIkM2GgFJFSMSRBcnGExnIkM2GgFJFSMSRBcnGUxnIkM2GgFJFSMSRBcnGkxnIkM2GgFJFSMSRBcnG0xnIkM2GgFJFSMSRBcnHExnIkM2GgFJFSMSRDYaAkkVgSASRDYaA0kVIxJENhoESRUjEkSxTwMXshiABBhBoNKyGk8CshpMshqyGoEGshAksgGztD5HAlcEAEkkWYECCEwVEkRJVwAEKBJEVwYASRVJJQxBAIQkQQB+JUsBSU4CDyVLAk8CTUsDTE8CUiceggMPVm90ZXIgbm90IGZvdW5kE1ZvdGVyIGFscmVhZHkgdm90ZWQOVm90ZXMgZXhjZWVkZWQnHymAFVZvdGluZyBQZXJpb2QgRXhwaXJlZE8HjgcABwAGAAUABAADAAIAAQAAAAAAAAAAIkNLAlcGBCoSQv9zNhoBSRWBIBJEJx1MZyJDNhoBSRUjEkSxF7IYgASKXkyAshqBBrIQJLIBs7Q+RwJXBABJJFmBAghMFRJESVcABCgSRFcGAEkVSSUMQQAnJEEAISVLAUlOAg8lSwJPAk1LA0xPAlInHilPAo4CAAIAAQAAACJDSwJXBgQqEkL/0DYaAUkVIxJEsReyGIAEgCBptLIagQayECSyAbO0PkcCVwQASSRZgQIITBUSRElXAAQoEkRXBgBJFUklDEEAViRBAFAlSwFJTgIPJUsCTwJNSwNMTwJSKScfgCpUaGVyZSBhcmUgdm90ZXJzIGFzc2lnbmVkIHRvIHRoaXMgcHJvcG9zYWxPA44DAAMAAgABAAAAACJDSwJXBgQqEkL/oTYaAUkVIxJEsReyGIAEc3EyGrIagQayECSyAbO0PkcCVwQASSRZgQIITBUSRElXAAQoEkRXBgBJFUklDEEAISRBABslSwFJTgIPJUsCTwJNSwNMTwJSKUyOAQABAAAiQ0sCVwYEKhJC/9Y2GgEVIxJEIkM=", "clear": "CoEBQw=="}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [5530, 5819], "errorMessage": "Missing Config"}, {"pc": [822], "errorMessage": "OnCompletion must be NoOp"}, {"pc": [1117], "errorMessage": "OnCompletion must be NoOp && can only call when creating"}, {"pc": [5818], "errorMessage": "There are voters assigned to this proposal"}, {"pc": [5534, 5661], "errorMessage": "Unauthorized"}, {"pc": [5527, 5659, 5817, 5925], "errorMessage": "Unknown error"}, {"pc": [5532], "errorMessage": "Voter already voted"}, {"pc": [5533], "errorMessage": "Voter not found"}, {"pc": [5531], "errorMessage": "Votes exceeded"}, {"pc": [5528], "errorMessage": "Voting Period Expired"}, {"pc": [5529, 5660, 5820, 5926], "errorMessage": "Wrong Proposal Status or finalized"}, {"pc": [1133, 4927], "errorMessage": "account funded"}, {"pc": [4933], "errorMessage": "application exists"}, {"pc": [5393, 5613, 5725, 5884], "errorMessage": "application log value is not the result of an ABI return"}, {"pc": [4937], "errorMessage": "check self.open_proposal_fee exists"}, {"pc": [5379, 5599, 5711, 5870], "errorMessage": "invalid array length header"}, {"pc": [5386, 5606, 5718, 5877], "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"}, {"pc": [1128, 5105, 5134, 5322, 5555], "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"}, {"pc": [4969, 4984, 4999, 5014, 5029, 5044, 5059, 5074, 5089, 5119, 5148, 5163, 5178, 5193, 5208, 5223, 5238, 5253, 5268, 5283, 5298, 5313, 5330, 5338, 5569, 5681, 5840, 5945], "errorMessage": "invalid number of bytes for arc4.uint64"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateEmptyProposalArgs:
    """Dataclass for create_empty_proposal arguments"""
    proposer: str

    @property
    def abi_method_signature(self) -> str:
        return "create_empty_proposal(address)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetProposalCommitmentBpsArgs:
    """Dataclass for set_proposal_commitment_bps arguments"""
    commitment_bps: int

    @property
    def abi_method_signature(self) -> str:
        return "set_proposal_commitment_bps(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetMinRequestedAmountArgs:
    """Dataclass for set_min_requested_amount arguments"""
    min_requested_amount: int

    @property
    def abi_method_signature(self) -> str:
        return "set_min_requested_amount(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetMaxRequestedAmountSmallArgs:
    """Dataclass for set_max_requested_amount_small arguments"""
    max_requested_amount: int

    @property
    def abi_method_signature(self) -> str:
        return "set_max_requested_amount_small(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetMaxRequestedAmountMediumArgs:
    """Dataclass for set_max_requested_amount_medium arguments"""
    max_requested_amount: int

    @property
    def abi_method_signature(self) -> str:
        return "set_max_requested_amount_medium(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetMaxRequestedAmountLargeArgs:
    """Dataclass for set_max_requested_amount_large arguments"""
    max_requested_amount: int

    @property
    def abi_method_signature(self) -> str:
        return "set_max_requested_amount_large(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetDaemonOpsFundingBpsArgs:
    """Dataclass for set_daemon_ops_funding_bps arguments"""
    daemon_ops_funding_bps: int

    @property
    def abi_method_signature(self) -> str:
        return "set_daemon_ops_funding_bps(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetDiscussionDurationSmallArgs:
    """Dataclass for set_discussion_duration_small arguments"""
    discussion_duration: int

    @property
    def abi_method_signature(self) -> str:
        return "set_discussion_duration_small(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetDiscussionDurationMediumArgs:
    """Dataclass for set_discussion_duration_medium arguments"""
    discussion_duration: int

    @property
    def abi_method_signature(self) -> str:
        return "set_discussion_duration_medium(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetDiscussionDurationLargeArgs:
    """Dataclass for set_discussion_duration_large arguments"""
    discussion_duration: int

    @property
    def abi_method_signature(self) -> str:
        return "set_discussion_duration_large(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetXgovDaemonArgs:
    """Dataclass for set_xgov_daemon arguments"""
    xgov_daemon: str

    @property
    def abi_method_signature(self) -> str:
        return "set_xgov_daemon(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetOpenProposalFeeArgs:
    """Dataclass for set_open_proposal_fee arguments"""
    open_proposal_fee: int

    @property
    def abi_method_signature(self) -> str:
        return "set_open_proposal_fee(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetCommitteeIdArgs:
    """Dataclass for set_committee_id arguments"""
    committee_id: bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]

    @property
    def abi_method_signature(self) -> str:
        return "set_committee_id(byte[32])void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetCommitteeMembersArgs:
    """Dataclass for set_committee_members arguments"""
    committee_members: int

    @property
    def abi_method_signature(self) -> str:
        return "set_committee_members(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetCommitteeVotesArgs:
    """Dataclass for set_committee_votes arguments"""
    committee_votes: int

    @property
    def abi_method_signature(self) -> str:
        return "set_committee_votes(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetVotingDurationSmallArgs:
    """Dataclass for set_voting_duration_small arguments"""
    voting_duration: int

    @property
    def abi_method_signature(self) -> str:
        return "set_voting_duration_small(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetVotingDurationMediumArgs:
    """Dataclass for set_voting_duration_medium arguments"""
    voting_duration: int

    @property
    def abi_method_signature(self) -> str:
        return "set_voting_duration_medium(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetVotingDurationLargeArgs:
    """Dataclass for set_voting_duration_large arguments"""
    voting_duration: int

    @property
    def abi_method_signature(self) -> str:
        return "set_voting_duration_large(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetQuorumSmallArgs:
    """Dataclass for set_quorum_small arguments"""
    quorum: int

    @property
    def abi_method_signature(self) -> str:
        return "set_quorum_small(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetQuorumMediumArgs:
    """Dataclass for set_quorum_medium arguments"""
    quorum: int

    @property
    def abi_method_signature(self) -> str:
        return "set_quorum_medium(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetQuorumLargeArgs:
    """Dataclass for set_quorum_large arguments"""
    quorum: int

    @property
    def abi_method_signature(self) -> str:
        return "set_quorum_large(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetWeightedQuorumSmallArgs:
    """Dataclass for set_weighted_quorum_small arguments"""
    weighted_quorum: int

    @property
    def abi_method_signature(self) -> str:
        return "set_weighted_quorum_small(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetWeightedQuorumMediumArgs:
    """Dataclass for set_weighted_quorum_medium arguments"""
    weighted_quorum: int

    @property
    def abi_method_signature(self) -> str:
        return "set_weighted_quorum_medium(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetWeightedQuorumLargeArgs:
    """Dataclass for set_weighted_quorum_large arguments"""
    weighted_quorum: int

    @property
    def abi_method_signature(self) -> str:
        return "set_weighted_quorum_large(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class VoteArgs:
    """Dataclass for vote arguments"""
    proposal_app: int
    voter: str
    approvals: int
    rejections: int

    @property
    def abi_method_signature(self) -> str:
        return "vote(uint64,address,uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetXgovCouncilArgs:
    """Dataclass for set_xgov_council arguments"""
    xgov_council: str

    @property
    def abi_method_signature(self) -> str:
        return "set_xgov_council(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class FundArgs:
    """Dataclass for fund arguments"""
    proposal_app: int

    @property
    def abi_method_signature(self) -> str:
        return "fund(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class FinalizeProposalArgs:
    """Dataclass for finalize_proposal arguments"""
    proposal_app: int

    @property
    def abi_method_signature(self) -> str:
        return "finalize_proposal(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DropProposalArgs:
    """Dataclass for drop_proposal arguments"""
    proposal_app: int

    @property
    def abi_method_signature(self) -> str:
        return "drop_proposal(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class IsProposalArgs:
    """Dataclass for is_proposal arguments"""
    proposal_id: int

    @property
    def abi_method_signature(self) -> str:
        return "is_proposal(uint64)void"


class XgovRegistryMockParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def pause_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_registry()void",
        }))

    def pause_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_proposals()void",
        }))

    def resume_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resume_registry()void",
        }))

    def resume_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resume_proposals()void",
        }))

    def create_empty_proposal(
        self,
        args: tuple[str] | CreateEmptyProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_empty_proposal(address)uint64",
            "args": method_args,
        }))

    def set_proposal_commitment_bps(
        self,
        args: tuple[int] | SetProposalCommitmentBpsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_proposal_commitment_bps(uint64)void",
            "args": method_args,
        }))

    def set_min_requested_amount(
        self,
        args: tuple[int] | SetMinRequestedAmountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_min_requested_amount(uint64)void",
            "args": method_args,
        }))

    def set_max_requested_amount_small(
        self,
        args: tuple[int] | SetMaxRequestedAmountSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_max_requested_amount_small(uint64)void",
            "args": method_args,
        }))

    def set_max_requested_amount_medium(
        self,
        args: tuple[int] | SetMaxRequestedAmountMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_max_requested_amount_medium(uint64)void",
            "args": method_args,
        }))

    def set_max_requested_amount_large(
        self,
        args: tuple[int] | SetMaxRequestedAmountLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_max_requested_amount_large(uint64)void",
            "args": method_args,
        }))

    def set_daemon_ops_funding_bps(
        self,
        args: tuple[int] | SetDaemonOpsFundingBpsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_daemon_ops_funding_bps(uint64)void",
            "args": method_args,
        }))

    def set_discussion_duration_small(
        self,
        args: tuple[int] | SetDiscussionDurationSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_discussion_duration_small(uint64)void",
            "args": method_args,
        }))

    def set_discussion_duration_medium(
        self,
        args: tuple[int] | SetDiscussionDurationMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_discussion_duration_medium(uint64)void",
            "args": method_args,
        }))

    def set_discussion_duration_large(
        self,
        args: tuple[int] | SetDiscussionDurationLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_discussion_duration_large(uint64)void",
            "args": method_args,
        }))

    def set_xgov_daemon(
        self,
        args: tuple[str] | SetXgovDaemonArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_daemon(address)void",
            "args": method_args,
        }))

    def set_open_proposal_fee(
        self,
        args: tuple[int] | SetOpenProposalFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_open_proposal_fee(uint64)void",
            "args": method_args,
        }))

    def set_committee_id(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]] | SetCommitteeIdArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_committee_id(byte[32])void",
            "args": method_args,
        }))

    def clear_committee_id(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "clear_committee_id()void",
        }))

    def set_committee_members(
        self,
        args: tuple[int] | SetCommitteeMembersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_committee_members(uint64)void",
            "args": method_args,
        }))

    def set_committee_votes(
        self,
        args: tuple[int] | SetCommitteeVotesArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_committee_votes(uint64)void",
            "args": method_args,
        }))

    def set_voting_duration_small(
        self,
        args: tuple[int] | SetVotingDurationSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_voting_duration_small(uint64)void",
            "args": method_args,
        }))

    def set_voting_duration_medium(
        self,
        args: tuple[int] | SetVotingDurationMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_voting_duration_medium(uint64)void",
            "args": method_args,
        }))

    def set_voting_duration_large(
        self,
        args: tuple[int] | SetVotingDurationLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_voting_duration_large(uint64)void",
            "args": method_args,
        }))

    def set_quorum_small(
        self,
        args: tuple[int] | SetQuorumSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_quorum_small(uint64)void",
            "args": method_args,
        }))

    def set_quorum_medium(
        self,
        args: tuple[int] | SetQuorumMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_quorum_medium(uint64)void",
            "args": method_args,
        }))

    def set_quorum_large(
        self,
        args: tuple[int] | SetQuorumLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_quorum_large(uint64)void",
            "args": method_args,
        }))

    def set_weighted_quorum_small(
        self,
        args: tuple[int] | SetWeightedQuorumSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_weighted_quorum_small(uint64)void",
            "args": method_args,
        }))

    def set_weighted_quorum_medium(
        self,
        args: tuple[int] | SetWeightedQuorumMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_weighted_quorum_medium(uint64)void",
            "args": method_args,
        }))

    def set_weighted_quorum_large(
        self,
        args: tuple[int] | SetWeightedQuorumLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_weighted_quorum_large(uint64)void",
            "args": method_args,
        }))

    def vote(
        self,
        args: tuple[int, str, int, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(uint64,address,uint64,uint64)void",
            "args": method_args,
        }))

    def set_xgov_council(
        self,
        args: tuple[str] | SetXgovCouncilArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_council(address)void",
            "args": method_args,
        }))

    def fund(
        self,
        args: tuple[int] | FundArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fund(uint64)void",
            "args": method_args,
        }))

    def finalize_proposal(
        self,
        args: tuple[int] | FinalizeProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalize_proposal(uint64)void",
            "args": method_args,
        }))

    def drop_proposal(
        self,
        args: tuple[int] | DropProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "drop_proposal(uint64)void",
            "args": method_args,
        }))

    def is_proposal(
        self,
        args: tuple[int] | IsProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_proposal(uint64)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class XgovRegistryMockCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def pause_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_registry()void",
        }))

    def pause_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_proposals()void",
        }))

    def resume_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resume_registry()void",
        }))

    def resume_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resume_proposals()void",
        }))

    def create_empty_proposal(
        self,
        args: tuple[str] | CreateEmptyProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_empty_proposal(address)uint64",
            "args": method_args,
        }))

    def set_proposal_commitment_bps(
        self,
        args: tuple[int] | SetProposalCommitmentBpsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_proposal_commitment_bps(uint64)void",
            "args": method_args,
        }))

    def set_min_requested_amount(
        self,
        args: tuple[int] | SetMinRequestedAmountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_min_requested_amount(uint64)void",
            "args": method_args,
        }))

    def set_max_requested_amount_small(
        self,
        args: tuple[int] | SetMaxRequestedAmountSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_max_requested_amount_small(uint64)void",
            "args": method_args,
        }))

    def set_max_requested_amount_medium(
        self,
        args: tuple[int] | SetMaxRequestedAmountMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_max_requested_amount_medium(uint64)void",
            "args": method_args,
        }))

    def set_max_requested_amount_large(
        self,
        args: tuple[int] | SetMaxRequestedAmountLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_max_requested_amount_large(uint64)void",
            "args": method_args,
        }))

    def set_daemon_ops_funding_bps(
        self,
        args: tuple[int] | SetDaemonOpsFundingBpsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_daemon_ops_funding_bps(uint64)void",
            "args": method_args,
        }))

    def set_discussion_duration_small(
        self,
        args: tuple[int] | SetDiscussionDurationSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_discussion_duration_small(uint64)void",
            "args": method_args,
        }))

    def set_discussion_duration_medium(
        self,
        args: tuple[int] | SetDiscussionDurationMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_discussion_duration_medium(uint64)void",
            "args": method_args,
        }))

    def set_discussion_duration_large(
        self,
        args: tuple[int] | SetDiscussionDurationLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_discussion_duration_large(uint64)void",
            "args": method_args,
        }))

    def set_xgov_daemon(
        self,
        args: tuple[str] | SetXgovDaemonArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_daemon(address)void",
            "args": method_args,
        }))

    def set_open_proposal_fee(
        self,
        args: tuple[int] | SetOpenProposalFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_open_proposal_fee(uint64)void",
            "args": method_args,
        }))

    def set_committee_id(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]] | SetCommitteeIdArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_committee_id(byte[32])void",
            "args": method_args,
        }))

    def clear_committee_id(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "clear_committee_id()void",
        }))

    def set_committee_members(
        self,
        args: tuple[int] | SetCommitteeMembersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_committee_members(uint64)void",
            "args": method_args,
        }))

    def set_committee_votes(
        self,
        args: tuple[int] | SetCommitteeVotesArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_committee_votes(uint64)void",
            "args": method_args,
        }))

    def set_voting_duration_small(
        self,
        args: tuple[int] | SetVotingDurationSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_voting_duration_small(uint64)void",
            "args": method_args,
        }))

    def set_voting_duration_medium(
        self,
        args: tuple[int] | SetVotingDurationMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_voting_duration_medium(uint64)void",
            "args": method_args,
        }))

    def set_voting_duration_large(
        self,
        args: tuple[int] | SetVotingDurationLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_voting_duration_large(uint64)void",
            "args": method_args,
        }))

    def set_quorum_small(
        self,
        args: tuple[int] | SetQuorumSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_quorum_small(uint64)void",
            "args": method_args,
        }))

    def set_quorum_medium(
        self,
        args: tuple[int] | SetQuorumMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_quorum_medium(uint64)void",
            "args": method_args,
        }))

    def set_quorum_large(
        self,
        args: tuple[int] | SetQuorumLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_quorum_large(uint64)void",
            "args": method_args,
        }))

    def set_weighted_quorum_small(
        self,
        args: tuple[int] | SetWeightedQuorumSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_weighted_quorum_small(uint64)void",
            "args": method_args,
        }))

    def set_weighted_quorum_medium(
        self,
        args: tuple[int] | SetWeightedQuorumMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_weighted_quorum_medium(uint64)void",
            "args": method_args,
        }))

    def set_weighted_quorum_large(
        self,
        args: tuple[int] | SetWeightedQuorumLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_weighted_quorum_large(uint64)void",
            "args": method_args,
        }))

    def vote(
        self,
        args: tuple[int, str, int, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(uint64,address,uint64,uint64)void",
            "args": method_args,
        }))

    def set_xgov_council(
        self,
        args: tuple[str] | SetXgovCouncilArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_council(address)void",
            "args": method_args,
        }))

    def fund(
        self,
        args: tuple[int] | FundArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fund(uint64)void",
            "args": method_args,
        }))

    def finalize_proposal(
        self,
        args: tuple[int] | FinalizeProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalize_proposal(uint64)void",
            "args": method_args,
        }))

    def drop_proposal(
        self,
        args: tuple[int] | DropProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "drop_proposal(uint64)void",
            "args": method_args,
        }))

    def is_proposal(
        self,
        args: tuple[int] | IsProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_proposal(uint64)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class XgovRegistryMockSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def pause_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_registry()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def pause_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_proposals()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def resume_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resume_registry()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def resume_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resume_proposals()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def create_empty_proposal(
        self,
        args: tuple[str] | CreateEmptyProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_empty_proposal(address)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def set_proposal_commitment_bps(
        self,
        args: tuple[int] | SetProposalCommitmentBpsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_proposal_commitment_bps(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_min_requested_amount(
        self,
        args: tuple[int] | SetMinRequestedAmountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_min_requested_amount(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_max_requested_amount_small(
        self,
        args: tuple[int] | SetMaxRequestedAmountSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_max_requested_amount_small(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_max_requested_amount_medium(
        self,
        args: tuple[int] | SetMaxRequestedAmountMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_max_requested_amount_medium(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_max_requested_amount_large(
        self,
        args: tuple[int] | SetMaxRequestedAmountLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_max_requested_amount_large(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_daemon_ops_funding_bps(
        self,
        args: tuple[int] | SetDaemonOpsFundingBpsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_daemon_ops_funding_bps(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_discussion_duration_small(
        self,
        args: tuple[int] | SetDiscussionDurationSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_discussion_duration_small(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_discussion_duration_medium(
        self,
        args: tuple[int] | SetDiscussionDurationMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_discussion_duration_medium(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_discussion_duration_large(
        self,
        args: tuple[int] | SetDiscussionDurationLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_discussion_duration_large(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_xgov_daemon(
        self,
        args: tuple[str] | SetXgovDaemonArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_daemon(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_open_proposal_fee(
        self,
        args: tuple[int] | SetOpenProposalFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_open_proposal_fee(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_committee_id(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]] | SetCommitteeIdArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_committee_id(byte[32])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_committee_id(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "clear_committee_id()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_committee_members(
        self,
        args: tuple[int] | SetCommitteeMembersArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_committee_members(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_committee_votes(
        self,
        args: tuple[int] | SetCommitteeVotesArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_committee_votes(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_voting_duration_small(
        self,
        args: tuple[int] | SetVotingDurationSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_voting_duration_small(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_voting_duration_medium(
        self,
        args: tuple[int] | SetVotingDurationMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_voting_duration_medium(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_voting_duration_large(
        self,
        args: tuple[int] | SetVotingDurationLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_voting_duration_large(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_quorum_small(
        self,
        args: tuple[int] | SetQuorumSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_quorum_small(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_quorum_medium(
        self,
        args: tuple[int] | SetQuorumMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_quorum_medium(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_quorum_large(
        self,
        args: tuple[int] | SetQuorumLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_quorum_large(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_weighted_quorum_small(
        self,
        args: tuple[int] | SetWeightedQuorumSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_weighted_quorum_small(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_weighted_quorum_medium(
        self,
        args: tuple[int] | SetWeightedQuorumMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_weighted_quorum_medium(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_weighted_quorum_large(
        self,
        args: tuple[int] | SetWeightedQuorumLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_weighted_quorum_large(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def vote(
        self,
        args: tuple[int, str, int, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(uint64,address,uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_xgov_council(
        self,
        args: tuple[str] | SetXgovCouncilArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_council(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def fund(
        self,
        args: tuple[int] | FundArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fund(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def finalize_proposal(
        self,
        args: tuple[int] | FinalizeProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalize_proposal(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def drop_proposal(
        self,
        args: tuple[int] | DropProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "drop_proposal(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def is_proposal(
        self,
        args: tuple[int] | IsProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_proposal(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    proposal_commitment_bps: int
    min_requested_amount: int
    max_requested_amount_small: int
    max_requested_amount_medium: int
    max_requested_amount_large: int
    daemon_ops_funding_bps: int
    discussion_duration_small: int
    discussion_duration_medium: int
    discussion_duration_large: int
    xgov_daemon: str
    open_proposal_fee: int
    committee_id: bytes
    committee_members: int
    committee_votes: int
    voting_duration_small: int
    voting_duration_medium: int
    voting_duration_large: int
    quorum_small: int
    quorum_medium: int
    quorum_large: int
    weighted_quorum_small: int
    weighted_quorum_medium: int
    weighted_quorum_large: int
    xgov_council: str
    paused_registry: int
    paused_proposals: int

class XgovRegistryMockState:
    """Methods to access state for the current XgovRegistryMock app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def proposal_commitment_bps(self) -> int:
        """Get the current value of the proposal_commitment_bps key in global_state state"""
        value = self.app_client.state.global_state.get_value("proposal_commitment_bps")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def min_requested_amount(self) -> int:
        """Get the current value of the min_requested_amount key in global_state state"""
        value = self.app_client.state.global_state.get_value("min_requested_amount")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def max_requested_amount_small(self) -> int:
        """Get the current value of the max_requested_amount_small key in global_state state"""
        value = self.app_client.state.global_state.get_value("max_requested_amount_small")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def max_requested_amount_medium(self) -> int:
        """Get the current value of the max_requested_amount_medium key in global_state state"""
        value = self.app_client.state.global_state.get_value("max_requested_amount_medium")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def max_requested_amount_large(self) -> int:
        """Get the current value of the max_requested_amount_large key in global_state state"""
        value = self.app_client.state.global_state.get_value("max_requested_amount_large")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def daemon_ops_funding_bps(self) -> int:
        """Get the current value of the daemon_ops_funding_bps key in global_state state"""
        value = self.app_client.state.global_state.get_value("daemon_ops_funding_bps")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def discussion_duration_small(self) -> int:
        """Get the current value of the discussion_duration_small key in global_state state"""
        value = self.app_client.state.global_state.get_value("discussion_duration_small")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def discussion_duration_medium(self) -> int:
        """Get the current value of the discussion_duration_medium key in global_state state"""
        value = self.app_client.state.global_state.get_value("discussion_duration_medium")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def discussion_duration_large(self) -> int:
        """Get the current value of the discussion_duration_large key in global_state state"""
        value = self.app_client.state.global_state.get_value("discussion_duration_large")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def xgov_daemon(self) -> str:
        """Get the current value of the xgov_daemon key in global_state state"""
        value = self.app_client.state.global_state.get_value("xgov_daemon")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def open_proposal_fee(self) -> int:
        """Get the current value of the open_proposal_fee key in global_state state"""
        value = self.app_client.state.global_state.get_value("open_proposal_fee")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def committee_id(self) -> bytes:
        """Get the current value of the committee_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("committee_id")
        if isinstance(value, dict) and "byte[32]" in self._struct_classes:
            return _init_dataclass(self._struct_classes["byte[32]"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def committee_members(self) -> int:
        """Get the current value of the committee_members key in global_state state"""
        value = self.app_client.state.global_state.get_value("committee_members")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def committee_votes(self) -> int:
        """Get the current value of the committee_votes key in global_state state"""
        value = self.app_client.state.global_state.get_value("committee_votes")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def voting_duration_small(self) -> int:
        """Get the current value of the voting_duration_small key in global_state state"""
        value = self.app_client.state.global_state.get_value("voting_duration_small")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def voting_duration_medium(self) -> int:
        """Get the current value of the voting_duration_medium key in global_state state"""
        value = self.app_client.state.global_state.get_value("voting_duration_medium")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def voting_duration_large(self) -> int:
        """Get the current value of the voting_duration_large key in global_state state"""
        value = self.app_client.state.global_state.get_value("voting_duration_large")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def quorum_small(self) -> int:
        """Get the current value of the quorum_small key in global_state state"""
        value = self.app_client.state.global_state.get_value("quorum_small")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def quorum_medium(self) -> int:
        """Get the current value of the quorum_medium key in global_state state"""
        value = self.app_client.state.global_state.get_value("quorum_medium")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def quorum_large(self) -> int:
        """Get the current value of the quorum_large key in global_state state"""
        value = self.app_client.state.global_state.get_value("quorum_large")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def weighted_quorum_small(self) -> int:
        """Get the current value of the weighted_quorum_small key in global_state state"""
        value = self.app_client.state.global_state.get_value("weighted_quorum_small")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def weighted_quorum_medium(self) -> int:
        """Get the current value of the weighted_quorum_medium key in global_state state"""
        value = self.app_client.state.global_state.get_value("weighted_quorum_medium")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def weighted_quorum_large(self) -> int:
        """Get the current value of the weighted_quorum_large key in global_state state"""
        value = self.app_client.state.global_state.get_value("weighted_quorum_large")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def xgov_council(self) -> str:
        """Get the current value of the xgov_council key in global_state state"""
        value = self.app_client.state.global_state.get_value("xgov_council")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def paused_registry(self) -> int:
        """Get the current value of the paused_registry key in global_state state"""
        value = self.app_client.state.global_state.get_value("paused_registry")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def paused_proposals(self) -> int:
        """Get the current value of the paused_proposals key in global_state state"""
        value = self.app_client.state.global_state.get_value("paused_proposals")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class XgovRegistryMockClient:
    """Client for interacting with XgovRegistryMock smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = XgovRegistryMockParams(self.app_client)
        self.create_transaction = XgovRegistryMockCreateTransactionParams(self.app_client)
        self.send = XgovRegistryMockSend(self.app_client)
        self.state = XgovRegistryMockState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "XgovRegistryMockClient":
        return XgovRegistryMockClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "XgovRegistryMockClient":
        return XgovRegistryMockClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "XgovRegistryMockClient":
        return XgovRegistryMockClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "XgovRegistryMockComposer":
        return XgovRegistryMockComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["pause_registry()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["pause_proposals()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["resume_registry()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["resume_proposals()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_empty_proposal(address)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_proposal_commitment_bps(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_min_requested_amount(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_max_requested_amount_small(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_max_requested_amount_medium(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_max_requested_amount_large(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_daemon_ops_funding_bps(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_discussion_duration_small(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_discussion_duration_medium(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_discussion_duration_large(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_xgov_daemon(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_open_proposal_fee(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_committee_id(byte[32])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["clear_committee_id()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_committee_members(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_committee_votes(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_voting_duration_small(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_voting_duration_medium(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_voting_duration_large(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_quorum_small(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_quorum_medium(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_quorum_large(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_weighted_quorum_small(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_weighted_quorum_medium(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_weighted_quorum_large(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["vote(uint64,address,uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_xgov_council(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["fund(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["finalize_proposal(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["drop_proposal(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["is_proposal(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class XgovRegistryMockBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating XgovRegistryMock contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class XgovRegistryMockFactory(algokit_utils.TypedAppFactoryProtocol[XgovRegistryMockBareCallCreateParams, None, None]):
    """Factory for deploying and managing XgovRegistryMockClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = XgovRegistryMockFactoryParams(self.app_factory)
        self.create_transaction = XgovRegistryMockFactoryCreateTransaction(self.app_factory)
        self.send = XgovRegistryMockFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: XgovRegistryMockBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[XgovRegistryMockClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return XgovRegistryMockClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> XgovRegistryMockClient:
        """Get an app client by creator address and name"""
        return XgovRegistryMockClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> XgovRegistryMockClient:
        """Get an app client by app ID"""
        return XgovRegistryMockClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class XgovRegistryMockFactoryParams:
    """Parameters for creating transactions for XgovRegistryMock contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = XgovRegistryMockFactoryCreateParams(app_factory)
        self.update = XgovRegistryMockFactoryUpdateParams(app_factory)
        self.delete = XgovRegistryMockFactoryDeleteParams(app_factory)

class XgovRegistryMockFactoryCreateParams:
    """Parameters for 'create' operations of XgovRegistryMock contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def pause_registry(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the pause_registry()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "pause_registry()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def pause_proposals(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the pause_proposals()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "pause_proposals()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def resume_registry(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the resume_registry()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "resume_registry()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def resume_proposals(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the resume_proposals()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "resume_proposals()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def create_empty_proposal(
        self,
        args: tuple[str] | CreateEmptyProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_empty_proposal(address)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_empty_proposal(address)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_proposal_commitment_bps(
        self,
        args: tuple[int] | SetProposalCommitmentBpsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_proposal_commitment_bps(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_proposal_commitment_bps(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_min_requested_amount(
        self,
        args: tuple[int] | SetMinRequestedAmountArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_min_requested_amount(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_min_requested_amount(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_max_requested_amount_small(
        self,
        args: tuple[int] | SetMaxRequestedAmountSmallArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_max_requested_amount_small(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_max_requested_amount_small(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_max_requested_amount_medium(
        self,
        args: tuple[int] | SetMaxRequestedAmountMediumArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_max_requested_amount_medium(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_max_requested_amount_medium(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_max_requested_amount_large(
        self,
        args: tuple[int] | SetMaxRequestedAmountLargeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_max_requested_amount_large(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_max_requested_amount_large(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_daemon_ops_funding_bps(
        self,
        args: tuple[int] | SetDaemonOpsFundingBpsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_daemon_ops_funding_bps(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_daemon_ops_funding_bps(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_discussion_duration_small(
        self,
        args: tuple[int] | SetDiscussionDurationSmallArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_discussion_duration_small(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_discussion_duration_small(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_discussion_duration_medium(
        self,
        args: tuple[int] | SetDiscussionDurationMediumArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_discussion_duration_medium(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_discussion_duration_medium(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_discussion_duration_large(
        self,
        args: tuple[int] | SetDiscussionDurationLargeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_discussion_duration_large(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_discussion_duration_large(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_xgov_daemon(
        self,
        args: tuple[str] | SetXgovDaemonArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_xgov_daemon(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_xgov_daemon(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_open_proposal_fee(
        self,
        args: tuple[int] | SetOpenProposalFeeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_open_proposal_fee(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_open_proposal_fee(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_committee_id(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]] | SetCommitteeIdArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_committee_id(byte[32])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_committee_id(byte[32])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def clear_committee_id(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the clear_committee_id()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "clear_committee_id()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def set_committee_members(
        self,
        args: tuple[int] | SetCommitteeMembersArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_committee_members(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_committee_members(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_committee_votes(
        self,
        args: tuple[int] | SetCommitteeVotesArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_committee_votes(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_committee_votes(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_voting_duration_small(
        self,
        args: tuple[int] | SetVotingDurationSmallArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_voting_duration_small(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_voting_duration_small(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_voting_duration_medium(
        self,
        args: tuple[int] | SetVotingDurationMediumArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_voting_duration_medium(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_voting_duration_medium(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_voting_duration_large(
        self,
        args: tuple[int] | SetVotingDurationLargeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_voting_duration_large(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_voting_duration_large(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_quorum_small(
        self,
        args: tuple[int] | SetQuorumSmallArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_quorum_small(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_quorum_small(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_quorum_medium(
        self,
        args: tuple[int] | SetQuorumMediumArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_quorum_medium(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_quorum_medium(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_quorum_large(
        self,
        args: tuple[int] | SetQuorumLargeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_quorum_large(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_quorum_large(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_weighted_quorum_small(
        self,
        args: tuple[int] | SetWeightedQuorumSmallArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_weighted_quorum_small(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_weighted_quorum_small(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_weighted_quorum_medium(
        self,
        args: tuple[int] | SetWeightedQuorumMediumArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_weighted_quorum_medium(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_weighted_quorum_medium(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_weighted_quorum_large(
        self,
        args: tuple[int] | SetWeightedQuorumLargeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_weighted_quorum_large(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_weighted_quorum_large(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def vote(
        self,
        args: tuple[int, str, int, int] | VoteArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the vote(uint64,address,uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "vote(uint64,address,uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_xgov_council(
        self,
        args: tuple[str] | SetXgovCouncilArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_xgov_council(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_xgov_council(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def fund(
        self,
        args: tuple[int] | FundArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the fund(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "fund(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def finalize_proposal(
        self,
        args: tuple[int] | FinalizeProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the finalize_proposal(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "finalize_proposal(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def drop_proposal(
        self,
        args: tuple[int] | DropProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the drop_proposal(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "drop_proposal(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def is_proposal(
        self,
        args: tuple[int] | IsProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the is_proposal(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "is_proposal(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class XgovRegistryMockFactoryUpdateParams:
    """Parameters for 'update' operations of XgovRegistryMock contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class XgovRegistryMockFactoryDeleteParams:
    """Parameters for 'delete' operations of XgovRegistryMock contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class XgovRegistryMockFactoryCreateTransaction:
    """Create transactions for XgovRegistryMock contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = XgovRegistryMockFactoryCreateTransactionCreate(app_factory)


class XgovRegistryMockFactoryCreateTransactionCreate:
    """Create new instances of XgovRegistryMock contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class XgovRegistryMockFactorySend:
    """Send calls to XgovRegistryMock contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = XgovRegistryMockFactorySendCreate(app_factory)


class XgovRegistryMockFactorySendCreate:
    """Send create calls to XgovRegistryMock contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[XgovRegistryMockClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return XgovRegistryMockClient(result[0]), result[1]


class XgovRegistryMockComposer:
    """Composer for creating transaction groups for XgovRegistryMock contract calls"""

    def __init__(self, client: "XgovRegistryMockClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def pause_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.pause_registry(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "pause_registry()void", v
            )
        )
        return self

    def pause_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.pause_proposals(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "pause_proposals()void", v
            )
        )
        return self

    def resume_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.resume_registry(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "resume_registry()void", v
            )
        )
        return self

    def resume_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.resume_proposals(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "resume_proposals()void", v
            )
        )
        return self

    def create_empty_proposal(
        self,
        args: tuple[str] | CreateEmptyProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_empty_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_empty_proposal(address)uint64", v
            )
        )
        return self

    def set_proposal_commitment_bps(
        self,
        args: tuple[int] | SetProposalCommitmentBpsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_proposal_commitment_bps(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_proposal_commitment_bps(uint64)void", v
            )
        )
        return self

    def set_min_requested_amount(
        self,
        args: tuple[int] | SetMinRequestedAmountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_min_requested_amount(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_min_requested_amount(uint64)void", v
            )
        )
        return self

    def set_max_requested_amount_small(
        self,
        args: tuple[int] | SetMaxRequestedAmountSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_max_requested_amount_small(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_max_requested_amount_small(uint64)void", v
            )
        )
        return self

    def set_max_requested_amount_medium(
        self,
        args: tuple[int] | SetMaxRequestedAmountMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_max_requested_amount_medium(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_max_requested_amount_medium(uint64)void", v
            )
        )
        return self

    def set_max_requested_amount_large(
        self,
        args: tuple[int] | SetMaxRequestedAmountLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_max_requested_amount_large(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_max_requested_amount_large(uint64)void", v
            )
        )
        return self

    def set_daemon_ops_funding_bps(
        self,
        args: tuple[int] | SetDaemonOpsFundingBpsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_daemon_ops_funding_bps(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_daemon_ops_funding_bps(uint64)void", v
            )
        )
        return self

    def set_discussion_duration_small(
        self,
        args: tuple[int] | SetDiscussionDurationSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_discussion_duration_small(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_discussion_duration_small(uint64)void", v
            )
        )
        return self

    def set_discussion_duration_medium(
        self,
        args: tuple[int] | SetDiscussionDurationMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_discussion_duration_medium(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_discussion_duration_medium(uint64)void", v
            )
        )
        return self

    def set_discussion_duration_large(
        self,
        args: tuple[int] | SetDiscussionDurationLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_discussion_duration_large(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_discussion_duration_large(uint64)void", v
            )
        )
        return self

    def set_xgov_daemon(
        self,
        args: tuple[str] | SetXgovDaemonArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_xgov_daemon(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_xgov_daemon(address)void", v
            )
        )
        return self

    def set_open_proposal_fee(
        self,
        args: tuple[int] | SetOpenProposalFeeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_open_proposal_fee(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_open_proposal_fee(uint64)void", v
            )
        )
        return self

    def set_committee_id(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]] | SetCommitteeIdArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_committee_id(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_committee_id(byte[32])void", v
            )
        )
        return self

    def clear_committee_id(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.clear_committee_id(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "clear_committee_id()void", v
            )
        )
        return self

    def set_committee_members(
        self,
        args: tuple[int] | SetCommitteeMembersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_committee_members(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_committee_members(uint64)void", v
            )
        )
        return self

    def set_committee_votes(
        self,
        args: tuple[int] | SetCommitteeVotesArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_committee_votes(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_committee_votes(uint64)void", v
            )
        )
        return self

    def set_voting_duration_small(
        self,
        args: tuple[int] | SetVotingDurationSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_voting_duration_small(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_voting_duration_small(uint64)void", v
            )
        )
        return self

    def set_voting_duration_medium(
        self,
        args: tuple[int] | SetVotingDurationMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_voting_duration_medium(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_voting_duration_medium(uint64)void", v
            )
        )
        return self

    def set_voting_duration_large(
        self,
        args: tuple[int] | SetVotingDurationLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_voting_duration_large(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_voting_duration_large(uint64)void", v
            )
        )
        return self

    def set_quorum_small(
        self,
        args: tuple[int] | SetQuorumSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_quorum_small(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_quorum_small(uint64)void", v
            )
        )
        return self

    def set_quorum_medium(
        self,
        args: tuple[int] | SetQuorumMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_quorum_medium(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_quorum_medium(uint64)void", v
            )
        )
        return self

    def set_quorum_large(
        self,
        args: tuple[int] | SetQuorumLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_quorum_large(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_quorum_large(uint64)void", v
            )
        )
        return self

    def set_weighted_quorum_small(
        self,
        args: tuple[int] | SetWeightedQuorumSmallArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_weighted_quorum_small(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_weighted_quorum_small(uint64)void", v
            )
        )
        return self

    def set_weighted_quorum_medium(
        self,
        args: tuple[int] | SetWeightedQuorumMediumArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_weighted_quorum_medium(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_weighted_quorum_medium(uint64)void", v
            )
        )
        return self

    def set_weighted_quorum_large(
        self,
        args: tuple[int] | SetWeightedQuorumLargeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_weighted_quorum_large(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_weighted_quorum_large(uint64)void", v
            )
        )
        return self

    def vote(
        self,
        args: tuple[int, str, int, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.vote(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "vote(uint64,address,uint64,uint64)void", v
            )
        )
        return self

    def set_xgov_council(
        self,
        args: tuple[str] | SetXgovCouncilArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_xgov_council(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_xgov_council(address)void", v
            )
        )
        return self

    def fund(
        self,
        args: tuple[int] | FundArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.fund(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "fund(uint64)void", v
            )
        )
        return self

    def finalize_proposal(
        self,
        args: tuple[int] | FinalizeProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.finalize_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "finalize_proposal(uint64)void", v
            )
        )
        return self

    def drop_proposal(
        self,
        args: tuple[int] | DropProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.drop_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "drop_proposal(uint64)void", v
            )
        )
        return self

    def is_proposal(
        self,
        args: tuple[int] | IsProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_app_call_method_call(
            self.client.params.is_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "is_proposal(uint64)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "XgovRegistryMockComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "XgovRegistryMockComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
