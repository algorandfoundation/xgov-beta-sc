#pragma version 10
#pragma typetrack false

// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 4 6 604800 1209600 1814400
    bytecblock 0x151f7c75 "Wrong Proposal Status" "ERR:" 0x6f70656e5f70726f706f73616c5f666565 0x636f6d6d69747465655f6964 0x7061757365645f7265676973747279 0x7061757365645f70726f706f73616c73 0x70726f706f73616c5f636f6d6d69746d656e745f627073 0x6d696e5f7265717565737465645f616d6f756e74 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d 0x6d61785f7265717565737465645f616d6f756e745f6c61726765 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d 0x64697363757373696f6e5f6475726174696f6e5f6c61726765 0x78676f765f6461656d6f6e base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573 0x766f74696e675f6475726174696f6e5f736d616c6c 0x766f74696e675f6475726174696f6e5f6d656469756d 0x766f74696e675f6475726174696f6e5f6c61726765 0x71756f72756d5f736d616c6c 0x71756f72756d5f6d656469756d 0x71756f72756d5f6c61726765 0x77656967687465645f71756f72756d5f736d616c6c 0x77656967687465645f71756f72756d5f6d656469756d 0x77656967687465645f71756f72756d5f6c61726765 0x78676f765f636f756e63696c "Unauthorized" "Missing Config"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/xgov_registry_mock/contract.py:26
    // key=reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS,
    bytec 7 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    // smart_contracts/xgov_registry_mock/contract.py:25
    // UInt64(mock_cfg.PROPOSAL_COMMITMENT_BPS),
    pushint 100 // 100
    // smart_contracts/xgov_registry_mock/contract.py:24-27
    // self.proposal_commitment_bps = GlobalState(
    //     UInt64(mock_cfg.PROPOSAL_COMMITMENT_BPS),
    //     key=reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:30
    // key=reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT,
    bytec 8 // 0x6d696e5f7265717565737465645f616d6f756e74
    // smart_contracts/xgov_registry_mock/contract.py:29
    // UInt64(mock_cfg.MIN_REQUESTED_AMOUNT),
    pushint 10000000000 // 10000000000
    // smart_contracts/xgov_registry_mock/contract.py:28-31
    // self.min_requested_amount = GlobalState(
    //     UInt64(mock_cfg.MIN_REQUESTED_AMOUNT),
    //     key=reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:34
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL,
    bytec 9 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:33
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_SMALL),
    pushint 50000000000 // 50000000000
    // smart_contracts/xgov_registry_mock/contract.py:32-35
    // self.max_requested_amount_small = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_SMALL),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:38
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM,
    bytec 10 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:37
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_MEDIUM),
    pushint 250000000000 // 250000000000
    // smart_contracts/xgov_registry_mock/contract.py:36-39
    // self.max_requested_amount_medium = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_MEDIUM),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:42
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE,
    bytec 11 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:41
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_LARGE),
    pushint 500000000000 // 500000000000
    // smart_contracts/xgov_registry_mock/contract.py:40-43
    // self.max_requested_amount_large = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_LARGE),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:46
    // key=reg_cfg.GS_KEY_DAEMON_OPS_FUNDING_BPS,
    bytec 12 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073
    // smart_contracts/xgov_registry_mock/contract.py:45
    // UInt64(mock_cfg.DAEMON_OPS_FUNDING_BPS),
    pushint 500 // 500
    // smart_contracts/xgov_registry_mock/contract.py:44-47
    // self.daemon_ops_funding_bps = GlobalState(
    //     UInt64(mock_cfg.DAEMON_OPS_FUNDING_BPS),
    //     key=reg_cfg.GS_KEY_DAEMON_OPS_FUNDING_BPS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:50
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL,
    bytec 13 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:49
    // UInt64(mock_cfg.DISCUSSION_DURATION_SMALL),
    intc 4 // 604800
    // smart_contracts/xgov_registry_mock/contract.py:48-51
    // self.discussion_duration_small = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_SMALL),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:54
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM,
    bytec 14 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:53
    // UInt64(mock_cfg.DISCUSSION_DURATION_MEDIUM),
    intc 5 // 1209600
    // smart_contracts/xgov_registry_mock/contract.py:52-55
    // self.discussion_duration_medium = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_MEDIUM),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:58
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE,
    bytec 15 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:57
    // UInt64(mock_cfg.DISCUSSION_DURATION_LARGE),
    intc 6 // 1814400
    // smart_contracts/xgov_registry_mock/contract.py:56-59
    // self.discussion_duration_large = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_LARGE),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:62
    // key=reg_cfg.GS_KEY_XGOV_DAEMON,
    bytec 16 // 0x78676f765f6461656d6f6e
    // smart_contracts/xgov_registry_mock/contract.py:61
    // arc4.Address(mock_cfg.XGOV_DAEMON),
    bytec 17 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // smart_contracts/xgov_registry_mock/contract.py:60-63
    // self.xgov_daemon = GlobalState(
    //     arc4.Address(mock_cfg.XGOV_DAEMON),
    //     key=reg_cfg.GS_KEY_XGOV_DAEMON,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:66
    // key=reg_cfg.GS_KEY_OPEN_PROPOSAL_FEE,
    bytec_3 // 0x6f70656e5f70726f706f73616c5f666565
    // smart_contracts/xgov_registry_mock/contract.py:65
    // UInt64(mock_cfg.OPEN_PROPOSAL_FEE),
    pushint 100000000 // 100000000
    // smart_contracts/xgov_registry_mock/contract.py:64-67
    // self.open_proposal_fee = GlobalState(
    //     UInt64(mock_cfg.OPEN_PROPOSAL_FEE),
    //     key=reg_cfg.GS_KEY_OPEN_PROPOSAL_FEE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:70
    // key=reg_cfg.GS_KEY_COMMITTEE_ID,
    bytec 4 // 0x636f6d6d69747465655f6964
    // smart_contracts/xgov_registry_mock/contract.py:69
    // Bytes32.from_bytes(mock_cfg.COMMITTEE_ID),
    pushbytes 0x
    // smart_contracts/xgov_registry_mock/contract.py:68-71
    // self.committee_id = GlobalState(
    //     Bytes32.from_bytes(mock_cfg.COMMITTEE_ID),
    //     key=reg_cfg.GS_KEY_COMMITTEE_ID,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:74
    // key=reg_cfg.GS_KEY_COMMITTEE_MEMBERS,
    bytec 18 // 0x636f6d6d69747465655f6d656d62657273
    // smart_contracts/xgov_registry_mock/contract.py:73
    // UInt64(mock_cfg.COMMITTEE_MEMBERS),
    intc_1 // 0
    // smart_contracts/xgov_registry_mock/contract.py:72-75
    // self.committee_members = GlobalState(
    //     UInt64(mock_cfg.COMMITTEE_MEMBERS),
    //     key=reg_cfg.GS_KEY_COMMITTEE_MEMBERS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:78
    // key=reg_cfg.GS_KEY_COMMITTEE_VOTES,
    bytec 19 // 0x636f6d6d69747465655f766f746573
    // smart_contracts/xgov_registry_mock/contract.py:77
    // UInt64(mock_cfg.COMMITTEE_VOTES),
    intc_1 // 0
    // smart_contracts/xgov_registry_mock/contract.py:76-79
    // self.committee_votes = GlobalState(
    //     UInt64(mock_cfg.COMMITTEE_VOTES),
    //     key=reg_cfg.GS_KEY_COMMITTEE_VOTES,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:82
    // key=reg_cfg.GS_KEY_VOTING_DURATION_SMALL,
    bytec 20 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:81
    // UInt64(mock_cfg.VOTING_DURATION_SMALL),
    intc 4 // 604800
    // smart_contracts/xgov_registry_mock/contract.py:80-83
    // self.voting_duration_small = GlobalState(
    //     UInt64(mock_cfg.VOTING_DURATION_SMALL),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:86
    // key=reg_cfg.GS_KEY_VOTING_DURATION_MEDIUM,
    bytec 21 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:85
    // UInt64(mock_cfg.VOTING_DURATION_MEDIUM),
    intc 5 // 1209600
    // smart_contracts/xgov_registry_mock/contract.py:84-87
    // self.voting_duration_medium = GlobalState(
    //     UInt64(mock_cfg.VOTING_DURATION_MEDIUM),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:90
    // key=reg_cfg.GS_KEY_VOTING_DURATION_LARGE,
    bytec 22 // 0x766f74696e675f6475726174696f6e5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:89
    // UInt64(mock_cfg.VOTING_DURATION_LARGE),
    intc 6 // 1814400
    // smart_contracts/xgov_registry_mock/contract.py:88-91
    // self.voting_duration_large = GlobalState(
    //     UInt64(mock_cfg.VOTING_DURATION_LARGE),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:94
    // key=reg_cfg.GS_KEY_QUORUM_SMALL,
    bytec 23 // 0x71756f72756d5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:93
    // UInt64(mock_cfg.QUORUM_SMALL_BPS),
    pushint 1000 // 1000
    // smart_contracts/xgov_registry_mock/contract.py:92-95
    // self.quorum_small = GlobalState(
    //     UInt64(mock_cfg.QUORUM_SMALL_BPS),
    //     key=reg_cfg.GS_KEY_QUORUM_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:98
    // key=reg_cfg.GS_KEY_QUORUM_MEDIUM,
    bytec 24 // 0x71756f72756d5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:97
    // UInt64(mock_cfg.QUORUM_MEDIUM_BPS),
    pushint 1500 // 1500
    // smart_contracts/xgov_registry_mock/contract.py:96-99
    // self.quorum_medium = GlobalState(
    //     UInt64(mock_cfg.QUORUM_MEDIUM_BPS),
    //     key=reg_cfg.GS_KEY_QUORUM_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:102
    // key=reg_cfg.GS_KEY_QUORUM_LARGE,
    bytec 25 // 0x71756f72756d5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:101
    // UInt64(mock_cfg.QUORUM_LARGE_BPS),
    pushint 2000 // 2000
    // smart_contracts/xgov_registry_mock/contract.py:100-103
    // self.quorum_large = GlobalState(
    //     UInt64(mock_cfg.QUORUM_LARGE_BPS),
    //     key=reg_cfg.GS_KEY_QUORUM_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:106
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_SMALL,
    bytec 26 // 0x77656967687465645f71756f72756d5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:105
    // UInt64(mock_cfg.WEIGHTED_QUORUM_SMALL_BPS),
    pushint 2000 // 2000
    // smart_contracts/xgov_registry_mock/contract.py:104-107
    // self.weighted_quorum_small = GlobalState(
    //     UInt64(mock_cfg.WEIGHTED_QUORUM_SMALL_BPS),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:110
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM,
    bytec 27 // 0x77656967687465645f71756f72756d5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:109
    // UInt64(mock_cfg.WEIGHTED_QUORUM_MEDIUM_BPS),
    pushint 3000 // 3000
    // smart_contracts/xgov_registry_mock/contract.py:108-111
    // self.weighted_quorum_medium = GlobalState(
    //     UInt64(mock_cfg.WEIGHTED_QUORUM_MEDIUM_BPS),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:114
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_LARGE,
    bytec 28 // 0x77656967687465645f71756f72756d5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:113
    // UInt64(mock_cfg.WEIGHTED_QUORUM_LARGE_BPS),
    pushint 4000 // 4000
    // smart_contracts/xgov_registry_mock/contract.py:112-115
    // self.weighted_quorum_large = GlobalState(
    //     UInt64(mock_cfg.WEIGHTED_QUORUM_LARGE_BPS),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:118
    // key=reg_cfg.GS_KEY_XGOV_COUNCIL,
    bytec 29 // 0x78676f765f636f756e63696c
    // smart_contracts/xgov_registry_mock/contract.py:117
    // arc4.Address(mock_cfg.XGOV_COUNCIL),
    bytec 17 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // smart_contracts/xgov_registry_mock/contract.py:116-119
    // self.xgov_council = GlobalState(
    //     arc4.Address(mock_cfg.XGOV_COUNCIL),
    //     key=reg_cfg.GS_KEY_XGOV_COUNCIL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:122
    // key=reg_cfg.GS_KEY_PAUSED_REGISTRY,
    bytec 5 // 0x7061757365645f7265676973747279
    // smart_contracts/xgov_registry_mock/contract.py:121
    // UInt64(0),
    intc_1 // 0
    // smart_contracts/xgov_registry_mock/contract.py:120-123
    // self.paused_registry = GlobalState(
    //     UInt64(0),
    //     key=reg_cfg.GS_KEY_PAUSED_REGISTRY,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:126
    // key=reg_cfg.GS_KEY_PAUSED_PROPOSALS,
    bytec 6 // 0x7061757365645f70726f706f73616c73
    // smart_contracts/xgov_registry_mock/contract.py:125
    // UInt64(0),
    intc_1 // 0
    // smart_contracts/xgov_registry_mock/contract.py:124-127
    // self.paused_proposals = GlobalState(
    //     UInt64(0),
    //     key=reg_cfg.GS_KEY_PAUSED_PROPOSALS,
    // )
    app_global_put

main_after_if_else@2:
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@40
    pushbytess 0x86f7e0e6 0x39e26d8a 0x98352e86 0xfa4ed6e2 0xc386b03f 0x6811eb76 0x37235b22 0xbbc72d1b 0xd17676d9 0x7cd79aad 0x1c71f4e7 0x29dfd021 0x34a5dc55 0xbb0db011 0x84b7d268 0x839dc51d 0x504c31b9 0x56ad1c6f 0xf83579fd 0x520e1f64 0x53802148 0xa4f766f6 0xa9998b1d 0x4e9c607c 0x650dfa8b 0xc887f086 0x4af84ea5 0x2c64e86f 0x16acce3b 0x886b3b04 0x37d6adf1 0x45f6ca71 0xb6eb1d9b 0x9bf22526 0x26983200 // method "pause_registry()void", method "pause_proposals()void", method "resume_registry()void", method "resume_proposals()void", method "create_empty_proposal(address)uint64", method "set_proposal_commitment_bps(uint64)void", method "set_min_requested_amount(uint64)void", method "set_max_requested_amount_small(uint64)void", method "set_max_requested_amount_medium(uint64)void", method "set_max_requested_amount_large(uint64)void", method "set_daemon_ops_funding_bps(uint64)void", method "set_discussion_duration_small(uint64)void", method "set_discussion_duration_medium(uint64)void", method "set_discussion_duration_large(uint64)void", method "set_xgov_daemon(address)void", method "set_open_proposal_fee(uint64)void", method "set_committee_id(byte[32])void", method "clear_committee_id()void", method "set_committee_members(uint64)void", method "set_committee_votes(uint64)void", method "set_voting_duration_small(uint64)void", method "set_voting_duration_medium(uint64)void", method "set_voting_duration_large(uint64)void", method "set_quorum_small(uint64)void", method "set_quorum_medium(uint64)void", method "set_quorum_large(uint64)void", method "set_weighted_quorum_small(uint64)void", method "set_weighted_quorum_medium(uint64)void", method "set_weighted_quorum_large(uint64)void", method "vote(application,address,uint64,uint64)void", method "set_xgov_council(address)void", method "fund(application)void", method "decommission_proposal(application)void", method "drop_proposal(application)void", method "is_proposal(uint64)void"
    txna ApplicationArgs 0
    match main_pause_registry_route@5 main_pause_proposals_route@6 main_resume_registry_route@7 main_resume_proposals_route@8 main_create_empty_proposal_route@9 main_set_proposal_commitment_bps_route@10 main_set_min_requested_amount_route@11 main_set_max_requested_amount_small_route@12 main_set_max_requested_amount_medium_route@13 main_set_max_requested_amount_large_route@14 main_set_daemon_ops_funding_bps_route@15 main_set_discussion_duration_small_route@16 main_set_discussion_duration_medium_route@17 main_set_discussion_duration_large_route@18 main_set_xgov_daemon_route@19 main_set_open_proposal_fee_route@20 main_set_committee_id_route@21 main_clear_committee_id_route@22 main_set_committee_members_route@23 main_set_committee_votes_route@24 main_set_voting_duration_small_route@25 main_set_voting_duration_medium_route@26 main_set_voting_duration_large_route@27 main_set_quorum_small_route@28 main_set_quorum_medium_route@29 main_set_quorum_large_route@30 main_set_weighted_quorum_small_route@31 main_set_weighted_quorum_medium_route@32 main_set_weighted_quorum_large_route@33 main_vote_route@34 main_set_xgov_council_route@35 main_fund_route@36 main_decommission_proposal_route@37 main_drop_proposal_route@38 main_is_proposal_route@39

main_after_if_else@42:
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    intc_1 // 0
    return

main_is_proposal_route@39:
    // smart_contracts/xgov_registry_mock/contract.py:585
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_drop_proposal_route@38:
    // smart_contracts/xgov_registry_mock/contract.py:569
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // smart_contracts/xgov_registry_mock/contract.py:569
    // @arc4.abimethod()
    callsub drop_proposal
    intc_0 // 1
    return

main_decommission_proposal_route@37:
    // smart_contracts/xgov_registry_mock/contract.py:549
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // smart_contracts/xgov_registry_mock/contract.py:549
    // @arc4.abimethod()
    callsub decommission_proposal
    intc_0 // 1
    return

main_fund_route@36:
    // smart_contracts/xgov_registry_mock/contract.py:519
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // smart_contracts/xgov_registry_mock/contract.py:519
    // @arc4.abimethod()
    callsub fund
    intc_0 // 1
    return

main_set_xgov_council_route@35:
    // smart_contracts/xgov_registry_mock/contract.py:508
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:508
    // @arc4.abimethod()
    callsub set_xgov_council
    intc_0 // 1
    return

main_vote_route@34:
    // smart_contracts/xgov_registry_mock/contract.py:452
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/xgov_registry_mock/contract.py:452
    // @arc4.abimethod()
    callsub vote
    intc_0 // 1
    return

main_set_weighted_quorum_large_route@33:
    // smart_contracts/xgov_registry_mock/contract.py:441
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:441
    // @arc4.abimethod()
    callsub set_weighted_quorum_large
    intc_0 // 1
    return

main_set_weighted_quorum_medium_route@32:
    // smart_contracts/xgov_registry_mock/contract.py:430
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:430
    // @arc4.abimethod()
    callsub set_weighted_quorum_medium
    intc_0 // 1
    return

main_set_weighted_quorum_small_route@31:
    // smart_contracts/xgov_registry_mock/contract.py:419
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:419
    // @arc4.abimethod()
    callsub set_weighted_quorum_small
    intc_0 // 1
    return

main_set_quorum_large_route@30:
    // smart_contracts/xgov_registry_mock/contract.py:408
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:408
    // @arc4.abimethod()
    callsub set_quorum_large
    intc_0 // 1
    return

main_set_quorum_medium_route@29:
    // smart_contracts/xgov_registry_mock/contract.py:397
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:397
    // @arc4.abimethod()
    callsub set_quorum_medium
    intc_0 // 1
    return

main_set_quorum_small_route@28:
    // smart_contracts/xgov_registry_mock/contract.py:386
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:386
    // @arc4.abimethod()
    callsub set_quorum_small
    intc_0 // 1
    return

main_set_voting_duration_large_route@27:
    // smart_contracts/xgov_registry_mock/contract.py:375
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:375
    // @arc4.abimethod()
    callsub set_voting_duration_large
    intc_0 // 1
    return

main_set_voting_duration_medium_route@26:
    // smart_contracts/xgov_registry_mock/contract.py:364
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:364
    // @arc4.abimethod()
    callsub set_voting_duration_medium
    intc_0 // 1
    return

main_set_voting_duration_small_route@25:
    // smart_contracts/xgov_registry_mock/contract.py:353
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:353
    // @arc4.abimethod()
    callsub set_voting_duration_small
    intc_0 // 1
    return

main_set_committee_votes_route@24:
    // smart_contracts/xgov_registry_mock/contract.py:342
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:342
    // @arc4.abimethod()
    callsub set_committee_votes
    intc_0 // 1
    return

main_set_committee_members_route@23:
    // smart_contracts/xgov_registry_mock/contract.py:331
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:331
    // @arc4.abimethod()
    callsub set_committee_members
    intc_0 // 1
    return

main_clear_committee_id_route@22:
    // smart_contracts/xgov_registry_mock/contract.py:323
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub clear_committee_id
    intc_0 // 1
    return

main_set_committee_id_route@21:
    // smart_contracts/xgov_registry_mock/contract.py:312
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:312
    // @arc4.abimethod()
    callsub set_committee_id
    intc_0 // 1
    return

main_set_open_proposal_fee_route@20:
    // smart_contracts/xgov_registry_mock/contract.py:301
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:301
    // @arc4.abimethod()
    callsub set_open_proposal_fee
    intc_0 // 1
    return

main_set_xgov_daemon_route@19:
    // smart_contracts/xgov_registry_mock/contract.py:290
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:290
    // @arc4.abimethod()
    callsub set_xgov_daemon
    intc_0 // 1
    return

main_set_discussion_duration_large_route@18:
    // smart_contracts/xgov_registry_mock/contract.py:279
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:279
    // @arc4.abimethod()
    callsub set_discussion_duration_large
    intc_0 // 1
    return

main_set_discussion_duration_medium_route@17:
    // smart_contracts/xgov_registry_mock/contract.py:268
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:268
    // @arc4.abimethod()
    callsub set_discussion_duration_medium
    intc_0 // 1
    return

main_set_discussion_duration_small_route@16:
    // smart_contracts/xgov_registry_mock/contract.py:257
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:257
    // @arc4.abimethod()
    callsub set_discussion_duration_small
    intc_0 // 1
    return

main_set_daemon_ops_funding_bps_route@15:
    // smart_contracts/xgov_registry_mock/contract.py:246
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:246
    // @arc4.abimethod()
    callsub set_daemon_ops_funding_bps
    intc_0 // 1
    return

main_set_max_requested_amount_large_route@14:
    // smart_contracts/xgov_registry_mock/contract.py:235
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:235
    // @arc4.abimethod()
    callsub set_max_requested_amount_large
    intc_0 // 1
    return

main_set_max_requested_amount_medium_route@13:
    // smart_contracts/xgov_registry_mock/contract.py:224
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:224
    // @arc4.abimethod()
    callsub set_max_requested_amount_medium
    intc_0 // 1
    return

main_set_max_requested_amount_small_route@12:
    // smart_contracts/xgov_registry_mock/contract.py:213
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:213
    // @arc4.abimethod()
    callsub set_max_requested_amount_small
    intc_0 // 1
    return

main_set_min_requested_amount_route@11:
    // smart_contracts/xgov_registry_mock/contract.py:202
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:202
    // @arc4.abimethod()
    callsub set_min_requested_amount
    intc_0 // 1
    return

main_set_proposal_commitment_bps_route@10:
    // smart_contracts/xgov_registry_mock/contract.py:191
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:191
    // @arc4.abimethod()
    callsub set_proposal_commitment_bps
    intc_0 // 1
    return

main_create_empty_proposal_route@9:
    // smart_contracts/xgov_registry_mock/contract.py:161
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:161
    // @arc4.abimethod()
    callsub create_empty_proposal
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_resume_proposals_route@8:
    // smart_contracts/xgov_registry_mock/contract.py:153
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub resume_proposals
    intc_0 // 1
    return

main_resume_registry_route@7:
    // smart_contracts/xgov_registry_mock/contract.py:145
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub resume_registry
    intc_0 // 1
    return

main_pause_proposals_route@6:
    // smart_contracts/xgov_registry_mock/contract.py:137
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub pause_proposals
    intc_0 // 1
    return

main_pause_registry_route@5:
    // smart_contracts/xgov_registry_mock/contract.py:129
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub pause_registry
    intc_0 // 1
    return

main_bare_routing@40:
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@42
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.pause_registry() -> void:
pause_registry:
    // smart_contracts/xgov_registry_mock/contract.py:135
    // self.paused_registry.value = UInt64(1)
    bytec 5 // 0x7061757365645f7265676973747279
    intc_0 // 1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.pause_proposals() -> void:
pause_proposals:
    // smart_contracts/xgov_registry_mock/contract.py:143
    // self.paused_proposals.value = UInt64(1)
    bytec 6 // 0x7061757365645f70726f706f73616c73
    intc_0 // 1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.resume_registry() -> void:
resume_registry:
    // smart_contracts/xgov_registry_mock/contract.py:151
    // self.paused_registry.value = UInt64(0)
    bytec 5 // 0x7061757365645f7265676973747279
    intc_1 // 0
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.resume_proposals() -> void:
resume_proposals:
    // smart_contracts/xgov_registry_mock/contract.py:159
    // self.paused_proposals.value = UInt64(0)
    bytec 6 // 0x7061757365645f70726f706f73616c73
    intc_1 // 0
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.create_empty_proposal(proposer: bytes) -> uint64:
create_empty_proposal:
    // smart_contracts/xgov_registry_mock/contract.py:161-165
    // @arc4.abimethod()
    // def create_empty_proposal(
    //     self,
    //     proposer: arc4.Address,
    // ) -> UInt64:
    proto 1 1
    // smart_contracts/xgov_registry_mock/contract.py:176
    // mbr_before = Global.current_application_address.min_balance
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    // smart_contracts/xgov_registry_mock/contract.py:177-180
    // res = arc4.arc4_create(
    //     Proposal,
    //     proposer,
    // )
    itxn_begin
    pushint 18 // 18
    itxn_field GlobalNumUint
    pushint 3 // 3
    itxn_field GlobalNumByteSlice
    intc_0 // 1
    itxn_field ExtraProgramPages
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(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)
    itxn_field ApprovalProgramPages
    // smart_contracts/xgov_registry_mock/contract.py:178
    // Proposal,
    pushbytes 0xcc694eaa // method "create(address)void"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    // smart_contracts/xgov_registry_mock/contract.py:177-180
    // res = arc4.arc4_create(
    //     Proposal,
    //     proposer,
    // )
    intc_3 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // smart_contracts/xgov_registry_mock/contract.py:181
    // mbr_after = Global.current_application_address.min_balance
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    // smart_contracts/xgov_registry_mock/contract.py:183-187
    // itxn.Payment(
    //     receiver=res.created_app.address,
    //     amount=self.open_proposal_fee.value - (mbr_after - mbr_before),
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry_mock/contract.py:184
    // receiver=res.created_app.address,
    dig 1
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/xgov_registry_mock/contract.py:185
    // amount=self.open_proposal_fee.value - (mbr_after - mbr_before),
    intc_1 // 0
    bytec_3 // 0x6f70656e5f70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.open_proposal_fee exists
    uncover 2
    uncover 4
    -
    -
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_registry_mock/contract.py:183
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:186
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:183-187
    // itxn.Payment(
    //     receiver=res.created_app.address,
    //     amount=self.open_proposal_fee.value - (mbr_after - mbr_before),
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/xgov_registry_mock/contract.py:189
    // return res.created_app.id
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_commitment_bps(commitment_bps: uint64) -> void:
set_proposal_commitment_bps:
    // smart_contracts/xgov_registry_mock/contract.py:191-192
    // @arc4.abimethod()
    // def set_proposal_commitment_bps(self, commitment_bps: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:200
    // self.proposal_commitment_bps.value = commitment_bps
    bytec 7 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_min_requested_amount(min_requested_amount: uint64) -> void:
set_min_requested_amount:
    // smart_contracts/xgov_registry_mock/contract.py:202-203
    // @arc4.abimethod()
    // def set_min_requested_amount(self, min_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:211
    // self.min_requested_amount.value = min_requested_amount
    bytec 8 // 0x6d696e5f7265717565737465645f616d6f756e74
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_small(max_requested_amount: uint64) -> void:
set_max_requested_amount_small:
    // smart_contracts/xgov_registry_mock/contract.py:213-214
    // @arc4.abimethod()
    // def set_max_requested_amount_small(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:222
    // self.max_requested_amount_small.value = max_requested_amount
    bytec 9 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_medium(max_requested_amount: uint64) -> void:
set_max_requested_amount_medium:
    // smart_contracts/xgov_registry_mock/contract.py:224-225
    // @arc4.abimethod()
    // def set_max_requested_amount_medium(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:233
    // self.max_requested_amount_medium.value = max_requested_amount
    bytec 10 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_large(max_requested_amount: uint64) -> void:
set_max_requested_amount_large:
    // smart_contracts/xgov_registry_mock/contract.py:235-236
    // @arc4.abimethod()
    // def set_max_requested_amount_large(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:244
    // self.max_requested_amount_large.value = max_requested_amount
    bytec 11 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_daemon_ops_funding_bps(daemon_ops_funding_bps: uint64) -> void:
set_daemon_ops_funding_bps:
    // smart_contracts/xgov_registry_mock/contract.py:246-247
    // @arc4.abimethod()
    // def set_daemon_ops_funding_bps(self, daemon_ops_funding_bps: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:255
    // self.daemon_ops_funding_bps.value = daemon_ops_funding_bps
    bytec 12 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_small(discussion_duration: uint64) -> void:
set_discussion_duration_small:
    // smart_contracts/xgov_registry_mock/contract.py:257-258
    // @arc4.abimethod()
    // def set_discussion_duration_small(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:266
    // self.discussion_duration_small.value = discussion_duration
    bytec 13 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_medium(discussion_duration: uint64) -> void:
set_discussion_duration_medium:
    // smart_contracts/xgov_registry_mock/contract.py:268-269
    // @arc4.abimethod()
    // def set_discussion_duration_medium(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:277
    // self.discussion_duration_medium.value = discussion_duration
    bytec 14 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_large(discussion_duration: uint64) -> void:
set_discussion_duration_large:
    // smart_contracts/xgov_registry_mock/contract.py:279-280
    // @arc4.abimethod()
    // def set_discussion_duration_large(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:288
    // self.discussion_duration_large.value = discussion_duration
    bytec 15 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_daemon(xgov_daemon: bytes) -> void:
set_xgov_daemon:
    // smart_contracts/xgov_registry_mock/contract.py:290-291
    // @arc4.abimethod()
    // def set_xgov_daemon(self, xgov_daemon: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:299
    // self.xgov_daemon.value = xgov_daemon
    bytec 16 // 0x78676f765f6461656d6f6e
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_open_proposal_fee(open_proposal_fee: uint64) -> void:
set_open_proposal_fee:
    // smart_contracts/xgov_registry_mock/contract.py:301-302
    // @arc4.abimethod()
    // def set_open_proposal_fee(self, open_proposal_fee: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:310
    // self.open_proposal_fee.value = open_proposal_fee
    bytec_3 // 0x6f70656e5f70726f706f73616c5f666565
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_id(committee_id: bytes) -> void:
set_committee_id:
    // smart_contracts/xgov_registry_mock/contract.py:312-313
    // @arc4.abimethod()
    // def set_committee_id(self, committee_id: Bytes32) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:321
    // self.committee_id.value = committee_id.copy()
    bytec 4 // 0x636f6d6d69747465655f6964
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.clear_committee_id() -> void:
clear_committee_id:
    // smart_contracts/xgov_registry_mock/contract.py:329
    // self.committee_id.value = Bytes32.from_bytes(mock_cfg.COMMITTEE_ID)
    bytec 4 // 0x636f6d6d69747465655f6964
    pushbytes 0x
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_members(committee_members: uint64) -> void:
set_committee_members:
    // smart_contracts/xgov_registry_mock/contract.py:331-332
    // @arc4.abimethod()
    // def set_committee_members(self, committee_members: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:340
    // self.committee_members.value = committee_members
    bytec 18 // 0x636f6d6d69747465655f6d656d62657273
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_votes(committee_votes: uint64) -> void:
set_committee_votes:
    // smart_contracts/xgov_registry_mock/contract.py:342-343
    // @arc4.abimethod()
    // def set_committee_votes(self, committee_votes: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:351
    // self.committee_votes.value = committee_votes
    bytec 19 // 0x636f6d6d69747465655f766f746573
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_small(voting_duration: uint64) -> void:
set_voting_duration_small:
    // smart_contracts/xgov_registry_mock/contract.py:353-354
    // @arc4.abimethod()
    // def set_voting_duration_small(self, voting_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:362
    // self.voting_duration_small.value = voting_duration
    bytec 20 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_medium(voting_duration: uint64) -> void:
set_voting_duration_medium:
    // smart_contracts/xgov_registry_mock/contract.py:364-365
    // @arc4.abimethod()
    // def set_voting_duration_medium(self, voting_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:373
    // self.voting_duration_medium.value = voting_duration
    bytec 21 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_large(voting_duration: uint64) -> void:
set_voting_duration_large:
    // smart_contracts/xgov_registry_mock/contract.py:375-376
    // @arc4.abimethod()
    // def set_voting_duration_large(self, voting_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:384
    // self.voting_duration_large.value = voting_duration
    bytec 22 // 0x766f74696e675f6475726174696f6e5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_small(quorum: uint64) -> void:
set_quorum_small:
    // smart_contracts/xgov_registry_mock/contract.py:386-387
    // @arc4.abimethod()
    // def set_quorum_small(self, quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:395
    // self.quorum_small.value = quorum
    bytec 23 // 0x71756f72756d5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_medium(quorum: uint64) -> void:
set_quorum_medium:
    // smart_contracts/xgov_registry_mock/contract.py:397-398
    // @arc4.abimethod()
    // def set_quorum_medium(self, quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:406
    // self.quorum_medium.value = quorum
    bytec 24 // 0x71756f72756d5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_large(quorum: uint64) -> void:
set_quorum_large:
    // smart_contracts/xgov_registry_mock/contract.py:408-409
    // @arc4.abimethod()
    // def set_quorum_large(self, quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:417
    // self.quorum_large.value = quorum
    bytec 25 // 0x71756f72756d5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_small(weighted_quorum: uint64) -> void:
set_weighted_quorum_small:
    // smart_contracts/xgov_registry_mock/contract.py:419-420
    // @arc4.abimethod()
    // def set_weighted_quorum_small(self, weighted_quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:428
    // self.weighted_quorum_small.value = weighted_quorum
    bytec 26 // 0x77656967687465645f71756f72756d5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_medium(weighted_quorum: uint64) -> void:
set_weighted_quorum_medium:
    // smart_contracts/xgov_registry_mock/contract.py:430-431
    // @arc4.abimethod()
    // def set_weighted_quorum_medium(self, weighted_quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:439
    // self.weighted_quorum_medium.value = weighted_quorum
    bytec 27 // 0x77656967687465645f71756f72756d5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_large(weighted_quorum: uint64) -> void:
set_weighted_quorum_large:
    // smart_contracts/xgov_registry_mock/contract.py:441-442
    // @arc4.abimethod()
    // def set_weighted_quorum_large(self, weighted_quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:450
    // self.weighted_quorum_large.value = weighted_quorum
    bytec 28 // 0x77656967687465645f71756f72756d5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.vote(proposal_app: uint64, voter: bytes, approvals: bytes, rejections: bytes) -> void:
vote:
    // smart_contracts/xgov_registry_mock/contract.py:452-459
    // @arc4.abimethod()
    // def vote(
    //     self,
    //     proposal_app: Application,
    //     voter: arc4.Address,
    //     approvals: arc4.UInt64,
    //     rejections: arc4.UInt64,
    // ) -> None:
    proto 4 0
    // smart_contracts/xgov_registry_mock/contract.py:479-486
    // error, tx = arc4.abi_call(
    //     Proposal.vote,
    //     voter,
    //     approvals,
    //     rejections,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_begin
    frame_dig -4
    itxn_field ApplicationID
    pushbytes 0x1841a0d2 // method "vote(address,uint64,uint64)string"
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:485
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:479-486
    // error, tx = arc4.abi_call(
    //     Proposal.vote,
    //     voter,
    //     approvals,
    //     rejections,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_submit
    itxn LastLog
    dupn 2
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry_mock/contract.py:488
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    intc_2 // 4
    <
    bz vote_ternary_false@3
    intc_1 // 0

vote_ternary_merge@4:
    // smart_contracts/xgov_registry_mock/contract.py:488
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz vote_after_if_else@14
    // smart_contracts/xgov_registry_mock/contract.py:489
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_2 // 4
    frame_dig 2
    dup
    cover 2
    >=
    intc_2 // 4
    dig 2
    uncover 2
    select
    frame_dig 1
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry_mock/contract.py:491
    // case err.UNAUTHORIZED:
    bytec 30 // "Unauthorized"
    // smart_contracts/xgov_registry_mock/contract.py:493
    // case err.VOTER_NOT_FOUND:
    pushbytess "Voter not found" "Voter already voted" "Votes exceeded" // "Voter not found", "Voter already voted", "Votes exceeded"
    // smart_contracts/xgov_registry_mock/contract.py:499
    // case err.MISSING_CONFIG:
    bytec 31 // "Missing Config"
    // smart_contracts/xgov_registry_mock/contract.py:501
    // case err.WRONG_PROPOSAL_STATUS:
    bytec_1 // "Wrong Proposal Status"
    // smart_contracts/xgov_registry_mock/contract.py:503
    // case err.VOTING_PERIOD_EXPIRED:
    pushbytes "Voting Period Expired"
    // smart_contracts/xgov_registry_mock/contract.py:490-506
    // match error_without_prefix:
    //     case err.UNAUTHORIZED:
    //         assert False, err.UNAUTHORIZED  # noqa
    //     case err.VOTER_NOT_FOUND:
    //         assert False, err.VOTER_NOT_FOUND  # noqa
    //     case err.VOTER_ALREADY_VOTED:
    //         assert False, err.VOTER_ALREADY_VOTED  # noqa
    //     case err.VOTES_EXCEEDED:
    //         assert False, err.VOTES_EXCEEDED  # noqa
    //     case err.MISSING_CONFIG:
    //         assert False, err.MISSING_CONFIG  # noqa
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case err.VOTING_PERIOD_EXPIRED:
    //         assert False, err.VOTING_PERIOD_EXPIRED  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 7
    match vote_switch_case_0@6 vote_switch_case_1@7 vote_switch_case_2@8 vote_switch_case_3@9 vote_switch_case_4@10 vote_switch_case_5@11 vote_switch_case_6@12
    // smart_contracts/xgov_registry_mock/contract.py:506
    // assert False, "Unknown error"  # noqa
    err // Unknown error

vote_switch_case_6@12:
    // smart_contracts/xgov_registry_mock/contract.py:504
    // assert False, err.VOTING_PERIOD_EXPIRED  # noqa
    err // Voting Period Expired

vote_switch_case_5@11:
    // smart_contracts/xgov_registry_mock/contract.py:502
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status

vote_switch_case_4@10:
    // smart_contracts/xgov_registry_mock/contract.py:500
    // assert False, err.MISSING_CONFIG  # noqa
    err // Missing Config

vote_switch_case_3@9:
    // smart_contracts/xgov_registry_mock/contract.py:498
    // assert False, err.VOTES_EXCEEDED  # noqa
    err // Votes exceeded

vote_switch_case_2@8:
    // smart_contracts/xgov_registry_mock/contract.py:496
    // assert False, err.VOTER_ALREADY_VOTED  # noqa
    err // Voter already voted

vote_switch_case_1@7:
    // smart_contracts/xgov_registry_mock/contract.py:494
    // assert False, err.VOTER_NOT_FOUND  # noqa
    err // Voter not found

vote_switch_case_0@6:
    // smart_contracts/xgov_registry_mock/contract.py:492
    // assert False, err.UNAUTHORIZED  # noqa
    err // Unauthorized

vote_after_if_else@14:
    retsub

vote_ternary_false@3:
    // smart_contracts/xgov_registry_mock/contract.py:488
    // if error.native.startswith(err.ARC_65_PREFIX):
    frame_dig 0
    extract 6 4
    bytec_2 // "ERR:"
    ==
    b vote_ternary_merge@4


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_council(xgov_council: bytes) -> void:
set_xgov_council:
    // smart_contracts/xgov_registry_mock/contract.py:508-509
    // @arc4.abimethod()
    // def set_xgov_council(self, xgov_council: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:517
    // self.xgov_council.value = xgov_council
    bytec 29 // 0x78676f765f636f756e63696c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.fund(proposal_app: uint64) -> void:
fund:
    // smart_contracts/xgov_registry_mock/contract.py:519-520
    // @arc4.abimethod()
    // def fund(self, proposal_app: Application) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:533-537
    // error, tx = arc4.abi_call(
    //     Proposal.fund,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x8a5e4c80 // method "fund()string"
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:536
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:533-537
    // error, tx = arc4.abi_call(
    //     Proposal.fund,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_submit
    itxn LastLog
    dupn 2
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry_mock/contract.py:539
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    intc_2 // 4
    <
    bz fund_ternary_false@3
    intc_1 // 0

fund_ternary_merge@4:
    // smart_contracts/xgov_registry_mock/contract.py:539
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz fund_after_if_else@9
    // smart_contracts/xgov_registry_mock/contract.py:540
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_2 // 4
    frame_dig 2
    dup
    cover 2
    >=
    intc_2 // 4
    dig 2
    uncover 2
    select
    frame_dig 1
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry_mock/contract.py:542
    // case err.UNAUTHORIZED:
    bytec 30 // "Unauthorized"
    // smart_contracts/xgov_registry_mock/contract.py:544
    // case err.WRONG_PROPOSAL_STATUS:
    bytec_1 // "Wrong Proposal Status"
    // smart_contracts/xgov_registry_mock/contract.py:541-547
    // match error_without_prefix:
    //     case err.UNAUTHORIZED:
    //         assert False, err.UNAUTHORIZED  # noqa
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 2
    match fund_switch_case_0@6 fund_switch_case_1@7
    // smart_contracts/xgov_registry_mock/contract.py:547
    // assert False, "Unknown error"  # noqa
    err // Unknown error

fund_switch_case_1@7:
    // smart_contracts/xgov_registry_mock/contract.py:545
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status

fund_switch_case_0@6:
    // smart_contracts/xgov_registry_mock/contract.py:543
    // assert False, err.UNAUTHORIZED  # noqa
    err // Unauthorized

fund_after_if_else@9:
    retsub

fund_ternary_false@3:
    // smart_contracts/xgov_registry_mock/contract.py:539
    // if error.native.startswith(err.ARC_65_PREFIX):
    frame_dig 0
    extract 6 4
    bytec_2 // "ERR:"
    ==
    b fund_ternary_merge@4


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.decommission_proposal(proposal_app: uint64) -> void:
decommission_proposal:
    // smart_contracts/xgov_registry_mock/contract.py:549-550
    // @arc4.abimethod()
    // def decommission_proposal(self, proposal_app: Application) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:551-555
    // error, tx = arc4.abi_call(
    //     Proposal.decommission,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x69ecf4a2 // method "decommission()string"
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:554
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:551-555
    // error, tx = arc4.abi_call(
    //     Proposal.decommission,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_submit
    itxn LastLog
    dupn 2
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry_mock/contract.py:557
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    intc_2 // 4
    <
    bz decommission_proposal_ternary_false@3
    intc_1 // 0

decommission_proposal_ternary_merge@4:
    // smart_contracts/xgov_registry_mock/contract.py:557
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz decommission_proposal_after_if_else@10
    // smart_contracts/xgov_registry_mock/contract.py:558
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_2 // 4
    frame_dig 2
    dup
    cover 2
    >=
    intc_2 // 4
    dig 2
    uncover 2
    select
    frame_dig 1
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry_mock/contract.py:560
    // case err.WRONG_PROPOSAL_STATUS:
    bytec_1 // "Wrong Proposal Status"
    // smart_contracts/xgov_registry_mock/contract.py:562
    // case err.MISSING_CONFIG:
    bytec 31 // "Missing Config"
    // smart_contracts/xgov_registry_mock/contract.py:564
    // case err.VOTERS_ASSIGNED:
    pushbytes "There are voters assigned to this proposal"
    // smart_contracts/xgov_registry_mock/contract.py:559-567
    // match error_without_prefix:
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case err.MISSING_CONFIG:
    //         assert False, err.MISSING_CONFIG  # noqa
    //     case err.VOTERS_ASSIGNED:
    //         assert False, err.VOTERS_ASSIGNED  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 3
    match decommission_proposal_switch_case_0@6 decommission_proposal_switch_case_1@7 decommission_proposal_switch_case_2@8
    // smart_contracts/xgov_registry_mock/contract.py:567
    // assert False, "Unknown error"  # noqa
    err // Unknown error

decommission_proposal_switch_case_2@8:
    // smart_contracts/xgov_registry_mock/contract.py:565
    // assert False, err.VOTERS_ASSIGNED  # noqa
    err // There are voters assigned to this proposal

decommission_proposal_switch_case_1@7:
    // smart_contracts/xgov_registry_mock/contract.py:563
    // assert False, err.MISSING_CONFIG  # noqa
    err // Missing Config

decommission_proposal_switch_case_0@6:
    // smart_contracts/xgov_registry_mock/contract.py:561
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status

decommission_proposal_after_if_else@10:
    retsub

decommission_proposal_ternary_false@3:
    // smart_contracts/xgov_registry_mock/contract.py:557
    // if error.native.startswith(err.ARC_65_PREFIX):
    frame_dig 0
    extract 6 4
    bytec_2 // "ERR:"
    ==
    b decommission_proposal_ternary_merge@4


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.drop_proposal(proposal_app: uint64) -> void:
drop_proposal:
    // smart_contracts/xgov_registry_mock/contract.py:569-570
    // @arc4.abimethod()
    // def drop_proposal(self, proposal_app: Application) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:571-575
    // error, tx = arc4.abi_call(
    //     Proposal.drop,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x7371321a // method "drop()string"
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:574
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:571-575
    // error, tx = arc4.abi_call(
    //     Proposal.drop,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_submit
    itxn LastLog
    dupn 2
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry_mock/contract.py:577
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    intc_2 // 4
    <
    bz drop_proposal_ternary_false@3
    intc_1 // 0

drop_proposal_ternary_merge@4:
    // smart_contracts/xgov_registry_mock/contract.py:577
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz drop_proposal_after_if_else@8
    // smart_contracts/xgov_registry_mock/contract.py:578
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_2 // 4
    frame_dig 2
    dup
    cover 2
    >=
    intc_2 // 4
    dig 2
    uncover 2
    select
    frame_dig 1
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry_mock/contract.py:580
    // case err.WRONG_PROPOSAL_STATUS:
    bytec_1 // "Wrong Proposal Status"
    // smart_contracts/xgov_registry_mock/contract.py:579-583
    // match error_without_prefix:
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    swap
    match drop_proposal_switch_case_0@6
    // smart_contracts/xgov_registry_mock/contract.py:583
    // assert False, "Unknown error"  # noqa
    err // Unknown error

drop_proposal_switch_case_0@6:
    // smart_contracts/xgov_registry_mock/contract.py:581
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status

drop_proposal_after_if_else@8:
    retsub

drop_proposal_ternary_false@3:
    // smart_contracts/xgov_registry_mock/contract.py:577
    // if error.native.startswith(err.ARC_65_PREFIX):
    frame_dig 0
    extract 6 4
    bytec_2 // "ERR:"
    ==
    b drop_proposal_ternary_merge@4
