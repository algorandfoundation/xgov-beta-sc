#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 8 0 4 1814400 604800
    bytecblock 0x151f7c75 "Wrong Proposal Status or finalized" "ERR:" 0x6f70656e5f70726f706f73616c5f666565 0x636f6d6d69747465655f6964 0x7061757365645f7265676973747279 0x7061757365645f70726f706f73616c73 0x70726f706f73616c5f636f6d6d69746d656e745f627073 0x6d696e5f7265717565737465645f616d6f756e74 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d 0x6d61785f7265717565737465645f616d6f756e745f6c61726765 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d 0x64697363757373696f6e5f6475726174696f6e5f6c61726765 0x78676f765f6461656d6f6e 0x3030303030303030303030303030303030303030303030303030303030303030 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573 0x766f74696e675f6475726174696f6e5f736d616c6c 0x766f74696e675f6475726174696f6e5f6d656469756d 0x766f74696e675f6475726174696f6e5f6c61726765 0x71756f72756d5f736d616c6c 0x71756f72756d5f6d656469756d 0x71756f72756d5f6c61726765 0x77656967687465645f71756f72756d5f736d616c6c 0x77656967687465645f71756f72756d5f6d656469756d 0x77656967687465645f71756f72756d5f6c61726765 0x78676f765f636f756e63696c "Unauthorized" "Missing Config"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/xgov_registry_mock/contract.py:24
    // key=reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS,
    bytec 7 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    // smart_contracts/xgov_registry_mock/contract.py:23
    // UInt64(reg_cfg.PROPOSAL_COMMITMENT_BPS),
    pushint 300 // 300
    // smart_contracts/xgov_registry_mock/contract.py:22-25
    // self.proposal_commitment_bps = GlobalState(
    //     UInt64(reg_cfg.PROPOSAL_COMMITMENT_BPS),
    //     key=reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:28
    // key=reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT,
    bytec 8 // 0x6d696e5f7265717565737465645f616d6f756e74
    // smart_contracts/xgov_registry_mock/contract.py:27
    // UInt64(reg_cfg.MIN_REQUESTED_AMOUNT),
    pushint 2500000000 // 2500000000
    // smart_contracts/xgov_registry_mock/contract.py:26-29
    // self.min_requested_amount = GlobalState(
    //     UInt64(reg_cfg.MIN_REQUESTED_AMOUNT),
    //     key=reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:32
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL,
    bytec 9 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:31
    // UInt64(reg_cfg.MAX_REQUESTED_AMOUNT_SMALL),
    pushint 25000000000 // 25000000000
    // smart_contracts/xgov_registry_mock/contract.py:30-33
    // self.max_requested_amount_small = GlobalState(
    //     UInt64(reg_cfg.MAX_REQUESTED_AMOUNT_SMALL),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:36
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM,
    bytec 10 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:35
    // UInt64(reg_cfg.MAX_REQUESTED_AMOUNT_MEDIUM),
    pushint 100000000000 // 100000000000
    // smart_contracts/xgov_registry_mock/contract.py:34-37
    // self.max_requested_amount_medium = GlobalState(
    //     UInt64(reg_cfg.MAX_REQUESTED_AMOUNT_MEDIUM),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:40
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE,
    bytec 11 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:39
    // UInt64(reg_cfg.MAX_REQUESTED_AMOUNT_LARGE),
    pushint 200000000000 // 200000000000
    // smart_contracts/xgov_registry_mock/contract.py:38-41
    // self.max_requested_amount_large = GlobalState(
    //     UInt64(reg_cfg.MAX_REQUESTED_AMOUNT_LARGE),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:44
    // key=reg_cfg.GS_KEY_DAEMON_OPS_FUNDING_BPS,
    bytec 12 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073
    // smart_contracts/xgov_registry_mock/contract.py:43
    // UInt64(reg_cfg.DAEMON_OPS_FUNDING_BPS),
    pushint 500 // 500
    // smart_contracts/xgov_registry_mock/contract.py:42-45
    // self.daemon_ops_funding_bps = GlobalState(
    //     UInt64(reg_cfg.DAEMON_OPS_FUNDING_BPS),
    //     key=reg_cfg.GS_KEY_DAEMON_OPS_FUNDING_BPS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:48
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL,
    bytec 13 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:47
    // UInt64(reg_cfg.DISCUSSION_DURATION_SMALL),
    intc 4 // 1814400
    // smart_contracts/xgov_registry_mock/contract.py:46-49
    // self.discussion_duration_small = GlobalState(
    //     UInt64(reg_cfg.DISCUSSION_DURATION_SMALL),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:52
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM,
    bytec 14 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:51
    // UInt64(reg_cfg.DISCUSSION_DURATION_MEDIUM),
    intc 4 // 1814400
    // smart_contracts/xgov_registry_mock/contract.py:50-53
    // self.discussion_duration_medium = GlobalState(
    //     UInt64(reg_cfg.DISCUSSION_DURATION_MEDIUM),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:56
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE,
    bytec 15 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:55
    // UInt64(reg_cfg.DISCUSSION_DURATION_LARGE),
    intc 4 // 1814400
    // smart_contracts/xgov_registry_mock/contract.py:54-57
    // self.discussion_duration_large = GlobalState(
    //     UInt64(reg_cfg.DISCUSSION_DURATION_LARGE),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:60
    // key=reg_cfg.GS_KEY_XGOV_DAEMON,
    bytec 16 // 0x78676f765f6461656d6f6e
    // smart_contracts/xgov_registry_mock/contract.py:59
    // arc4.Address(),
    global ZeroAddress
    // smart_contracts/xgov_registry_mock/contract.py:58-61
    // self.xgov_daemon = GlobalState(
    //     arc4.Address(),
    //     key=reg_cfg.GS_KEY_XGOV_DAEMON,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:64
    // key=reg_cfg.GS_KEY_OPEN_PROPOSAL_FEE,
    bytec_3 // 0x6f70656e5f70726f706f73616c5f666565
    // smart_contracts/xgov_registry_mock/contract.py:63
    // UInt64(reg_cfg.OPEN_PROPOSAL_FEE),
    pushint 100000000 // 100000000
    // smart_contracts/xgov_registry_mock/contract.py:62-65
    // self.open_proposal_fee = GlobalState(
    //     UInt64(reg_cfg.OPEN_PROPOSAL_FEE),
    //     key=reg_cfg.GS_KEY_OPEN_PROPOSAL_FEE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:68
    // key=reg_cfg.GS_KEY_COMMITTEE_ID,
    bytec 4 // 0x636f6d6d69747465655f6964
    // smart_contracts/xgov_registry_mock/contract.py:67
    // Bytes32.from_bytes(b"0" * 32),
    bytec 17 // 0x3030303030303030303030303030303030303030303030303030303030303030
    // smart_contracts/xgov_registry_mock/contract.py:66-69
    // self.committee_id = GlobalState(
    //     Bytes32.from_bytes(b"0" * 32),
    //     key=reg_cfg.GS_KEY_COMMITTEE_ID,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:72
    // key=reg_cfg.GS_KEY_COMMITTEE_MEMBERS,
    bytec 18 // 0x636f6d6d69747465655f6d656d62657273
    // smart_contracts/xgov_registry_mock/contract.py:71
    // UInt64(),
    intc_2 // 0
    // smart_contracts/xgov_registry_mock/contract.py:70-73
    // self.committee_members = GlobalState(
    //     UInt64(),
    //     key=reg_cfg.GS_KEY_COMMITTEE_MEMBERS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:76
    // key=reg_cfg.GS_KEY_COMMITTEE_VOTES,
    bytec 19 // 0x636f6d6d69747465655f766f746573
    // smart_contracts/xgov_registry_mock/contract.py:75
    // UInt64(),
    intc_2 // 0
    // smart_contracts/xgov_registry_mock/contract.py:74-77
    // self.committee_votes = GlobalState(
    //     UInt64(),
    //     key=reg_cfg.GS_KEY_COMMITTEE_VOTES,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:80
    // key=reg_cfg.GS_KEY_VOTING_DURATION_SMALL,
    bytec 20 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:79
    // UInt64(reg_cfg.VOTING_DURATION_SMALL),
    intc 5 // 604800
    // smart_contracts/xgov_registry_mock/contract.py:78-81
    // self.voting_duration_small = GlobalState(
    //     UInt64(reg_cfg.VOTING_DURATION_SMALL),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:84
    // key=reg_cfg.GS_KEY_VOTING_DURATION_MEDIUM,
    bytec 21 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:83
    // UInt64(reg_cfg.VOTING_DURATION_MEDIUM),
    intc 5 // 604800
    // smart_contracts/xgov_registry_mock/contract.py:82-85
    // self.voting_duration_medium = GlobalState(
    //     UInt64(reg_cfg.VOTING_DURATION_MEDIUM),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:88
    // key=reg_cfg.GS_KEY_VOTING_DURATION_LARGE,
    bytec 22 // 0x766f74696e675f6475726174696f6e5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:87
    // UInt64(reg_cfg.VOTING_DURATION_LARGE),
    pushint 1209600 // 1209600
    // smart_contracts/xgov_registry_mock/contract.py:86-89
    // self.voting_duration_large = GlobalState(
    //     UInt64(reg_cfg.VOTING_DURATION_LARGE),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:92
    // key=reg_cfg.GS_KEY_QUORUM_SMALL,
    bytec 23 // 0x71756f72756d5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:91
    // UInt64(reg_cfg.QUORUM_SMALL),
    pushint 3000 // 3000
    // smart_contracts/xgov_registry_mock/contract.py:90-93
    // self.quorum_small = GlobalState(
    //     UInt64(reg_cfg.QUORUM_SMALL),
    //     key=reg_cfg.GS_KEY_QUORUM_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:96
    // key=reg_cfg.GS_KEY_QUORUM_MEDIUM,
    bytec 24 // 0x71756f72756d5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:95
    // UInt64(reg_cfg.QUORUM_MEDIUM),
    pushint 5000 // 5000
    // smart_contracts/xgov_registry_mock/contract.py:94-97
    // self.quorum_medium = GlobalState(
    //     UInt64(reg_cfg.QUORUM_MEDIUM),
    //     key=reg_cfg.GS_KEY_QUORUM_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:100
    // key=reg_cfg.GS_KEY_QUORUM_LARGE,
    bytec 25 // 0x71756f72756d5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:99
    // UInt64(reg_cfg.QUORUM_LARGE),
    pushint 7000 // 7000
    // smart_contracts/xgov_registry_mock/contract.py:98-101
    // self.quorum_large = GlobalState(
    //     UInt64(reg_cfg.QUORUM_LARGE),
    //     key=reg_cfg.GS_KEY_QUORUM_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:104
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_SMALL,
    bytec 26 // 0x77656967687465645f71756f72756d5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:103
    // UInt64(reg_cfg.WEIGHTED_QUORUM_SMALL),
    pushint 5000 // 5000
    // smart_contracts/xgov_registry_mock/contract.py:102-105
    // self.weighted_quorum_small = GlobalState(
    //     UInt64(reg_cfg.WEIGHTED_QUORUM_SMALL),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:108
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM,
    bytec 27 // 0x77656967687465645f71756f72756d5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:107
    // UInt64(reg_cfg.WEIGHTED_QUORUM_MEDIUM),
    pushint 6000 // 6000
    // smart_contracts/xgov_registry_mock/contract.py:106-109
    // self.weighted_quorum_medium = GlobalState(
    //     UInt64(reg_cfg.WEIGHTED_QUORUM_MEDIUM),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:112
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_LARGE,
    bytec 28 // 0x77656967687465645f71756f72756d5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:111
    // UInt64(reg_cfg.WEIGHTED_QUORUM_LARGE),
    pushint 7000 // 7000
    // smart_contracts/xgov_registry_mock/contract.py:110-113
    // self.weighted_quorum_large = GlobalState(
    //     UInt64(reg_cfg.WEIGHTED_QUORUM_LARGE),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:116
    // key=reg_cfg.GS_KEY_XGOV_COUNCIL,
    bytec 29 // 0x78676f765f636f756e63696c
    // smart_contracts/xgov_registry_mock/contract.py:115
    // arc4.Address(),
    global ZeroAddress
    // smart_contracts/xgov_registry_mock/contract.py:114-117
    // self.xgov_council = GlobalState(
    //     arc4.Address(),
    //     key=reg_cfg.GS_KEY_XGOV_COUNCIL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:120
    // key=reg_cfg.GS_KEY_PAUSED_REGISTRY,
    bytec 5 // 0x7061757365645f7265676973747279
    // smart_contracts/xgov_registry_mock/contract.py:119
    // UInt64(0),
    intc_2 // 0
    // smart_contracts/xgov_registry_mock/contract.py:118-121
    // self.paused_registry = GlobalState(
    //     UInt64(0),
    //     key=reg_cfg.GS_KEY_PAUSED_REGISTRY,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:124
    // key=reg_cfg.GS_KEY_PAUSED_PROPOSALS,
    bytec 6 // 0x7061757365645f70726f706f73616c73
    // smart_contracts/xgov_registry_mock/contract.py:123
    // UInt64(0),
    intc_2 // 0
    // smart_contracts/xgov_registry_mock/contract.py:122-125
    // self.paused_proposals = GlobalState(
    //     UInt64(0),
    //     key=reg_cfg.GS_KEY_PAUSED_PROPOSALS,
    // )
    app_global_put

main_after_if_else@2:
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@44
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x86f7e0e6 0x39e26d8a 0x98352e86 0xfa4ed6e2 0xc386b03f 0x6811eb76 0x37235b22 0xbbc72d1b 0xd17676d9 0x7cd79aad 0x1c71f4e7 0x29dfd021 0x34a5dc55 0xbb0db011 0x84b7d268 0x839dc51d 0x504c31b9 0x56ad1c6f 0xf83579fd 0x520e1f64 0x53802148 0xa4f766f6 0xa9998b1d 0x4e9c607c 0x650dfa8b 0xc887f086 0x4af84ea5 0x2c64e86f 0x16acce3b 0x910e1aa3 0x37d6adf1 0x6fa6214c 0xf5910756 0x65610a9f 0x26983200 // method "pause_registry()void", method "pause_proposals()void", method "resume_registry()void", method "resume_proposals()void", method "create_empty_proposal(address)uint64", method "set_proposal_commitment_bps(uint64)void", method "set_min_requested_amount(uint64)void", method "set_max_requested_amount_small(uint64)void", method "set_max_requested_amount_medium(uint64)void", method "set_max_requested_amount_large(uint64)void", method "set_daemon_ops_funding_bps(uint64)void", method "set_discussion_duration_small(uint64)void", method "set_discussion_duration_medium(uint64)void", method "set_discussion_duration_large(uint64)void", method "set_xgov_daemon(address)void", method "set_open_proposal_fee(uint64)void", method "set_committee_id(byte[32])void", method "clear_committee_id()void", method "set_committee_members(uint64)void", method "set_committee_votes(uint64)void", method "set_voting_duration_small(uint64)void", method "set_voting_duration_medium(uint64)void", method "set_voting_duration_large(uint64)void", method "set_quorum_small(uint64)void", method "set_quorum_medium(uint64)void", method "set_quorum_large(uint64)void", method "set_weighted_quorum_small(uint64)void", method "set_weighted_quorum_medium(uint64)void", method "set_weighted_quorum_large(uint64)void", method "vote(uint64,address,uint64,uint64)void", method "set_xgov_council(address)void", method "fund(uint64)void", method "finalize_proposal(uint64)void", method "drop_proposal(uint64)void", method "is_proposal(uint64)void"
    txna ApplicationArgs 0
    match main_pause_registry_route@6 main_pause_proposals_route@7 main_resume_registry_route@8 main_resume_proposals_route@9 create_empty_proposal set_proposal_commitment_bps set_min_requested_amount set_max_requested_amount_small set_max_requested_amount_medium set_max_requested_amount_large set_daemon_ops_funding_bps set_discussion_duration_small set_discussion_duration_medium set_discussion_duration_large set_xgov_daemon set_open_proposal_fee set_committee_id main_clear_committee_id_route@23 set_committee_members set_committee_votes set_voting_duration_small set_voting_duration_medium set_voting_duration_large set_quorum_small set_quorum_medium set_quorum_large set_weighted_quorum_small set_weighted_quorum_medium set_weighted_quorum_large vote set_xgov_council fund finalize_proposal drop_proposal is_proposal
    err

main_clear_committee_id_route@23:
    // smart_contracts/xgov_registry_mock/contract.py:327
    // self.committee_id.value = Bytes32.from_bytes(b"0" * 32)
    bytec 4 // 0x636f6d6d69747465655f6964
    bytec 17 // 0x3030303030303030303030303030303030303030303030303030303030303030
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:321
    // @arc4.abimethod()
    intc_0 // 1
    return

main_resume_proposals_route@9:
    // smart_contracts/xgov_registry_mock/contract.py:157
    // self.paused_proposals.value = UInt64(0)
    bytec 6 // 0x7061757365645f70726f706f73616c73
    intc_2 // 0
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:151
    // @arc4.abimethod()
    intc_0 // 1
    return

main_resume_registry_route@8:
    // smart_contracts/xgov_registry_mock/contract.py:149
    // self.paused_registry.value = UInt64(0)
    bytec 5 // 0x7061757365645f7265676973747279
    intc_2 // 0
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:143
    // @arc4.abimethod()
    intc_0 // 1
    return

main_pause_proposals_route@7:
    // smart_contracts/xgov_registry_mock/contract.py:141
    // self.paused_proposals.value = UInt64(1)
    bytec 6 // 0x7061757365645f70726f706f73616c73
    intc_0 // 1
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:135
    // @arc4.abimethod()
    intc_0 // 1
    return

main_pause_registry_route@6:
    // smart_contracts/xgov_registry_mock/contract.py:133
    // self.paused_registry.value = UInt64(1)
    bytec 5 // 0x7061757365645f7265676973747279
    intc_0 // 1
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:127
    // @arc4.abimethod()
    intc_0 // 1
    return

main___algopy_default_create@44:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.create_empty_proposal[routing]() -> void:
create_empty_proposal:
    // smart_contracts/xgov_registry_mock/contract.py:159
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry_mock/contract.py:174
    // mbr_before = Global.current_application_address.min_balance
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    // smart_contracts/xgov_registry_mock/contract.py:175-178
    // res = arc4.arc4_create(
    //     Proposal,
    //     proposer,
    // )
    itxn_begin
    pushint 20 // 20
    itxn_field GlobalNumUint
    pushint 3 // 3
    itxn_field GlobalNumByteSlice
    intc_0 // 1
    itxn_field ExtraProgramPages
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(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)
    itxn_field ApprovalProgramPages
    // smart_contracts/xgov_registry_mock/contract.py:176
    // Proposal,
    pushbytes 0x216b1e07 // method "create(address)string"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    // smart_contracts/xgov_registry_mock/contract.py:175-178
    // res = arc4.arc4_create(
    //     Proposal,
    //     proposer,
    // )
    pushint 6 // appl
    itxn_field TypeEnum
    intc_2 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // smart_contracts/xgov_registry_mock/contract.py:179
    // mbr_after = Global.current_application_address.min_balance
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    // smart_contracts/xgov_registry_mock/contract.py:181-185
    // itxn.Payment(
    //     receiver=res.created_app.address,
    //     amount=self.open_proposal_fee.value - (mbr_after - mbr_before),
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry_mock/contract.py:182
    // receiver=res.created_app.address,
    dig 1
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/xgov_registry_mock/contract.py:183
    // amount=self.open_proposal_fee.value - (mbr_after - mbr_before),
    intc_2 // 0
    bytec_3 // 0x6f70656e5f70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.open_proposal_fee exists
    uncover 2
    uncover 4
    -
    -
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_registry_mock/contract.py:181
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:184
    // fee=0,
    intc_2 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:181-185
    // itxn.Payment(
    //     receiver=res.created_app.address,
    //     amount=self.open_proposal_fee.value - (mbr_after - mbr_before),
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/xgov_registry_mock/contract.py:159
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_commitment_bps[routing]() -> void:
set_proposal_commitment_bps:
    // smart_contracts/xgov_registry_mock/contract.py:189
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:198
    // self.proposal_commitment_bps.value = commitment_bps
    bytec 7 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:189
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_min_requested_amount[routing]() -> void:
set_min_requested_amount:
    // smart_contracts/xgov_registry_mock/contract.py:200
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:209
    // self.min_requested_amount.value = min_requested_amount
    bytec 8 // 0x6d696e5f7265717565737465645f616d6f756e74
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:200
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_small[routing]() -> void:
set_max_requested_amount_small:
    // smart_contracts/xgov_registry_mock/contract.py:211
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:220
    // self.max_requested_amount_small.value = max_requested_amount
    bytec 9 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:211
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_medium[routing]() -> void:
set_max_requested_amount_medium:
    // smart_contracts/xgov_registry_mock/contract.py:222
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:231
    // self.max_requested_amount_medium.value = max_requested_amount
    bytec 10 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:222
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_large[routing]() -> void:
set_max_requested_amount_large:
    // smart_contracts/xgov_registry_mock/contract.py:233
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:242
    // self.max_requested_amount_large.value = max_requested_amount
    bytec 11 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:233
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_daemon_ops_funding_bps[routing]() -> void:
set_daemon_ops_funding_bps:
    // smart_contracts/xgov_registry_mock/contract.py:244
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:253
    // self.daemon_ops_funding_bps.value = daemon_ops_funding_bps
    bytec 12 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:244
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_small[routing]() -> void:
set_discussion_duration_small:
    // smart_contracts/xgov_registry_mock/contract.py:255
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:264
    // self.discussion_duration_small.value = discussion_duration
    bytec 13 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:255
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_medium[routing]() -> void:
set_discussion_duration_medium:
    // smart_contracts/xgov_registry_mock/contract.py:266
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:275
    // self.discussion_duration_medium.value = discussion_duration
    bytec 14 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:266
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_large[routing]() -> void:
set_discussion_duration_large:
    // smart_contracts/xgov_registry_mock/contract.py:277
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:286
    // self.discussion_duration_large.value = discussion_duration
    bytec 15 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:277
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_daemon[routing]() -> void:
set_xgov_daemon:
    // smart_contracts/xgov_registry_mock/contract.py:288
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry_mock/contract.py:297
    // self.xgov_daemon.value = xgov_daemon
    bytec 16 // 0x78676f765f6461656d6f6e
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:288
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_open_proposal_fee[routing]() -> void:
set_open_proposal_fee:
    // smart_contracts/xgov_registry_mock/contract.py:299
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:308
    // self.open_proposal_fee.value = open_proposal_fee
    bytec_3 // 0x6f70656e5f70726f706f73616c5f666565
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:299
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_id[routing]() -> void:
set_committee_id:
    // smart_contracts/xgov_registry_mock/contract.py:310
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry_mock/contract.py:319
    // self.committee_id.value = committee_id.copy()
    bytec 4 // 0x636f6d6d69747465655f6964
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:310
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_members[routing]() -> void:
set_committee_members:
    // smart_contracts/xgov_registry_mock/contract.py:329
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:338
    // self.committee_members.value = committee_members
    bytec 18 // 0x636f6d6d69747465655f6d656d62657273
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:329
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_votes[routing]() -> void:
set_committee_votes:
    // smart_contracts/xgov_registry_mock/contract.py:340
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:349
    // self.committee_votes.value = committee_votes
    bytec 19 // 0x636f6d6d69747465655f766f746573
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:340
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_small[routing]() -> void:
set_voting_duration_small:
    // smart_contracts/xgov_registry_mock/contract.py:351
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:360
    // self.voting_duration_small.value = voting_duration
    bytec 20 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:351
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_medium[routing]() -> void:
set_voting_duration_medium:
    // smart_contracts/xgov_registry_mock/contract.py:362
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:371
    // self.voting_duration_medium.value = voting_duration
    bytec 21 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:362
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_large[routing]() -> void:
set_voting_duration_large:
    // smart_contracts/xgov_registry_mock/contract.py:373
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:382
    // self.voting_duration_large.value = voting_duration
    bytec 22 // 0x766f74696e675f6475726174696f6e5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:373
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_small[routing]() -> void:
set_quorum_small:
    // smart_contracts/xgov_registry_mock/contract.py:384
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:393
    // self.quorum_small.value = quorum
    bytec 23 // 0x71756f72756d5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:384
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_medium[routing]() -> void:
set_quorum_medium:
    // smart_contracts/xgov_registry_mock/contract.py:395
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:404
    // self.quorum_medium.value = quorum
    bytec 24 // 0x71756f72756d5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:395
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_large[routing]() -> void:
set_quorum_large:
    // smart_contracts/xgov_registry_mock/contract.py:406
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:415
    // self.quorum_large.value = quorum
    bytec 25 // 0x71756f72756d5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:406
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_small[routing]() -> void:
set_weighted_quorum_small:
    // smart_contracts/xgov_registry_mock/contract.py:417
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:426
    // self.weighted_quorum_small.value = weighted_quorum
    bytec 26 // 0x77656967687465645f71756f72756d5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:417
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_medium[routing]() -> void:
set_weighted_quorum_medium:
    // smart_contracts/xgov_registry_mock/contract.py:428
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:437
    // self.weighted_quorum_medium.value = weighted_quorum
    bytec 27 // 0x77656967687465645f71756f72756d5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:428
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_large[routing]() -> void:
set_weighted_quorum_large:
    // smart_contracts/xgov_registry_mock/contract.py:439
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:448
    // self.weighted_quorum_large.value = weighted_quorum
    bytec 28 // 0x77656967687465645f71756f72756d5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:439
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.vote[routing]() -> void:
vote:
    // smart_contracts/xgov_registry_mock/contract.py:450
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 2
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 3
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 4
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry_mock/contract.py:477-484
    // error, _tx = arc4.abi_call(
    //     Proposal.vote,
    //     voter,
    //     approvals,
    //     rejections,
    //     app_id=proposal_app.as_uint64(),
    //     fee=0,
    // )
    itxn_begin
    // smart_contracts/xgov_registry_mock/contract.py:482
    // app_id=proposal_app.as_uint64(),
    uncover 3
    btoi
    itxn_field ApplicationID
    // smart_contracts/xgov_registry_mock/contract.py:477-484
    // error, _tx = arc4.abi_call(
    //     Proposal.vote,
    //     voter,
    //     approvals,
    //     rejections,
    //     app_id=proposal_app.as_uint64(),
    //     fee=0,
    // )
    pushbytes 0x1841a0d2 // method "vote(address,uint64,uint64)string"
    itxn_field ApplicationArgs
    uncover 2
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:483
    // fee=0,
    intc_2 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:477-484
    // error, _tx = arc4.abi_call(
    //     Proposal.vote,
    //     voter,
    //     approvals,
    //     rejections,
    //     app_id=proposal_app.as_uint64(),
    //     fee=0,
    // )
    itxn_submit
    itxn LastLog
    dupn 2
    extract 4 0
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry_mock/contract.py:486
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    intc_3 // 4
    <
    bz vote_ternary_false@4
    intc_2 // 0

vote_ternary_merge@5:
    // smart_contracts/xgov_registry_mock/contract.py:486
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz vote_after_if_else@15
    // smart_contracts/xgov_registry_mock/contract.py:487
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_3 // 4
    dig 1
    dup
    cover 2
    >=
    intc_3 // 4
    dig 2
    uncover 2
    select
    dig 3
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry_mock/contract.py:489
    // case err.UNAUTHORIZED:
    bytec 30 // "Unauthorized"
    // smart_contracts/xgov_registry_mock/contract.py:491
    // case err.VOTER_NOT_FOUND:
    pushbytess "Voter not found" "Voter already voted" "Votes exceeded" // "Voter not found", "Voter already voted", "Votes exceeded"
    // smart_contracts/xgov_registry_mock/contract.py:497
    // case err.MISSING_CONFIG:
    bytec 31 // "Missing Config"
    // smart_contracts/xgov_registry_mock/contract.py:499
    // case err.WRONG_PROPOSAL_STATUS:
    bytec_1 // "Wrong Proposal Status or finalized"
    // smart_contracts/xgov_registry_mock/contract.py:501
    // case err.VOTING_PERIOD_EXPIRED:
    pushbytes "Voting Period Expired"
    // smart_contracts/xgov_registry_mock/contract.py:488-504
    // match error_without_prefix:
    //     case err.UNAUTHORIZED:
    //         assert False, err.UNAUTHORIZED  # noqa
    //     case err.VOTER_NOT_FOUND:
    //         assert False, err.VOTER_NOT_FOUND  # noqa
    //     case err.VOTER_ALREADY_VOTED:
    //         assert False, err.VOTER_ALREADY_VOTED  # noqa
    //     case err.VOTES_EXCEEDED:
    //         assert False, err.VOTES_EXCEEDED  # noqa
    //     case err.MISSING_CONFIG:
    //         assert False, err.MISSING_CONFIG  # noqa
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case err.VOTING_PERIOD_EXPIRED:
    //         assert False, err.VOTING_PERIOD_EXPIRED  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 7
    match vote_switch_case_0@7 vote_switch_case_1@8 vote_switch_case_2@9 vote_switch_case_3@10 vote_switch_case_4@11 vote_switch_case_5@12 vote_switch_case_6@13
    // smart_contracts/xgov_registry_mock/contract.py:504
    // assert False, "Unknown error"  # noqa
    err // Unknown error

vote_switch_case_6@13:
    // smart_contracts/xgov_registry_mock/contract.py:502
    // assert False, err.VOTING_PERIOD_EXPIRED  # noqa
    err // Voting Period Expired

vote_switch_case_5@12:
    // smart_contracts/xgov_registry_mock/contract.py:500
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status or finalized

vote_switch_case_4@11:
    // smart_contracts/xgov_registry_mock/contract.py:498
    // assert False, err.MISSING_CONFIG  # noqa
    err // Missing Config

vote_switch_case_3@10:
    // smart_contracts/xgov_registry_mock/contract.py:496
    // assert False, err.VOTES_EXCEEDED  # noqa
    err // Votes exceeded

vote_switch_case_2@9:
    // smart_contracts/xgov_registry_mock/contract.py:494
    // assert False, err.VOTER_ALREADY_VOTED  # noqa
    err // Voter already voted

vote_switch_case_1@8:
    // smart_contracts/xgov_registry_mock/contract.py:492
    // assert False, err.VOTER_NOT_FOUND  # noqa
    err // Voter not found

vote_switch_case_0@7:
    // smart_contracts/xgov_registry_mock/contract.py:490
    // assert False, err.UNAUTHORIZED  # noqa
    err // Unauthorized

vote_after_if_else@15:
    // smart_contracts/xgov_registry_mock/contract.py:450
    // @arc4.abimethod()
    intc_0 // 1
    return

vote_ternary_false@4:
    // smart_contracts/xgov_registry_mock/contract.py:486
    // if error.native.startswith(err.ARC_65_PREFIX):
    dig 2
    extract 6 4
    bytec_2 // "ERR:"
    ==
    b vote_ternary_merge@5


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_council[routing]() -> void:
set_xgov_council:
    // smart_contracts/xgov_registry_mock/contract.py:506
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry_mock/contract.py:515
    // self.xgov_council.value = xgov_council
    bytec 29 // 0x78676f765f636f756e63696c
    swap
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:506
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.fund[routing]() -> void:
fund:
    // smart_contracts/xgov_registry_mock/contract.py:517
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry_mock/contract.py:531-535
    // error, _tx = arc4.abi_call(
    //     Proposal.fund,
    //     app_id=proposal_app.as_uint64(),
    //     fee=0,
    // )
    itxn_begin
    // smart_contracts/xgov_registry_mock/contract.py:533
    // app_id=proposal_app.as_uint64(),
    btoi
    itxn_field ApplicationID
    // smart_contracts/xgov_registry_mock/contract.py:531-535
    // error, _tx = arc4.abi_call(
    //     Proposal.fund,
    //     app_id=proposal_app.as_uint64(),
    //     fee=0,
    // )
    pushbytes 0x8a5e4c80 // method "fund()string"
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:534
    // fee=0,
    intc_2 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:531-535
    // error, _tx = arc4.abi_call(
    //     Proposal.fund,
    //     app_id=proposal_app.as_uint64(),
    //     fee=0,
    // )
    itxn_submit
    itxn LastLog
    dupn 2
    extract 4 0
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry_mock/contract.py:537
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    intc_3 // 4
    <
    bz fund_ternary_false@4
    intc_2 // 0

fund_ternary_merge@5:
    // smart_contracts/xgov_registry_mock/contract.py:537
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz fund_after_if_else@10
    // smart_contracts/xgov_registry_mock/contract.py:538
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_3 // 4
    dig 1
    dup
    cover 2
    >=
    intc_3 // 4
    dig 2
    uncover 2
    select
    dig 3
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry_mock/contract.py:540
    // case err.UNAUTHORIZED:
    bytec 30 // "Unauthorized"
    // smart_contracts/xgov_registry_mock/contract.py:542
    // case err.WRONG_PROPOSAL_STATUS:
    bytec_1 // "Wrong Proposal Status or finalized"
    // smart_contracts/xgov_registry_mock/contract.py:539-545
    // match error_without_prefix:
    //     case err.UNAUTHORIZED:
    //         assert False, err.UNAUTHORIZED  # noqa
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 2
    match fund_switch_case_0@7 fund_switch_case_1@8
    // smart_contracts/xgov_registry_mock/contract.py:545
    // assert False, "Unknown error"  # noqa
    err // Unknown error

fund_switch_case_1@8:
    // smart_contracts/xgov_registry_mock/contract.py:543
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status or finalized

fund_switch_case_0@7:
    // smart_contracts/xgov_registry_mock/contract.py:541
    // assert False, err.UNAUTHORIZED  # noqa
    err // Unauthorized

fund_after_if_else@10:
    // smart_contracts/xgov_registry_mock/contract.py:517
    // @arc4.abimethod()
    intc_0 // 1
    return

fund_ternary_false@4:
    // smart_contracts/xgov_registry_mock/contract.py:537
    // if error.native.startswith(err.ARC_65_PREFIX):
    dig 2
    extract 6 4
    bytec_2 // "ERR:"
    ==
    b fund_ternary_merge@5


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.finalize_proposal[routing]() -> void:
finalize_proposal:
    // smart_contracts/xgov_registry_mock/contract.py:547
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry_mock/contract.py:549-553
    // error, _tx = arc4.abi_call(
    //     Proposal.finalize,
    //     app_id=proposal_app.as_uint64(),
    //     fee=0,
    // )
    itxn_begin
    // smart_contracts/xgov_registry_mock/contract.py:551
    // app_id=proposal_app.as_uint64(),
    btoi
    itxn_field ApplicationID
    // smart_contracts/xgov_registry_mock/contract.py:549-553
    // error, _tx = arc4.abi_call(
    //     Proposal.finalize,
    //     app_id=proposal_app.as_uint64(),
    //     fee=0,
    // )
    pushbytes 0x802069b4 // method "finalize()string"
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:552
    // fee=0,
    intc_2 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:549-553
    // error, _tx = arc4.abi_call(
    //     Proposal.finalize,
    //     app_id=proposal_app.as_uint64(),
    //     fee=0,
    // )
    itxn_submit
    itxn LastLog
    dupn 2
    extract 4 0
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry_mock/contract.py:555
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    intc_3 // 4
    <
    bz finalize_proposal_ternary_false@4
    intc_2 // 0

finalize_proposal_ternary_merge@5:
    // smart_contracts/xgov_registry_mock/contract.py:555
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz finalize_proposal_after_if_else@11
    // smart_contracts/xgov_registry_mock/contract.py:556
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_3 // 4
    dig 1
    dup
    cover 2
    >=
    intc_3 // 4
    dig 2
    uncover 2
    select
    dig 3
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry_mock/contract.py:558
    // case err.WRONG_PROPOSAL_STATUS:
    bytec_1 // "Wrong Proposal Status or finalized"
    // smart_contracts/xgov_registry_mock/contract.py:560
    // case err.MISSING_CONFIG:
    bytec 31 // "Missing Config"
    // smart_contracts/xgov_registry_mock/contract.py:562
    // case err.VOTERS_ASSIGNED:
    pushbytes "There are voters assigned to this proposal"
    // smart_contracts/xgov_registry_mock/contract.py:557-565
    // match error_without_prefix:
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case err.MISSING_CONFIG:
    //         assert False, err.MISSING_CONFIG  # noqa
    //     case err.VOTERS_ASSIGNED:
    //         assert False, err.VOTERS_ASSIGNED  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 3
    match finalize_proposal_switch_case_0@7 finalize_proposal_switch_case_1@8 finalize_proposal_switch_case_2@9
    // smart_contracts/xgov_registry_mock/contract.py:565
    // assert False, "Unknown error"  # noqa
    err // Unknown error

finalize_proposal_switch_case_2@9:
    // smart_contracts/xgov_registry_mock/contract.py:563
    // assert False, err.VOTERS_ASSIGNED  # noqa
    err // There are voters assigned to this proposal

finalize_proposal_switch_case_1@8:
    // smart_contracts/xgov_registry_mock/contract.py:561
    // assert False, err.MISSING_CONFIG  # noqa
    err // Missing Config

finalize_proposal_switch_case_0@7:
    // smart_contracts/xgov_registry_mock/contract.py:559
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status or finalized

finalize_proposal_after_if_else@11:
    // smart_contracts/xgov_registry_mock/contract.py:547
    // @arc4.abimethod()
    intc_0 // 1
    return

finalize_proposal_ternary_false@4:
    // smart_contracts/xgov_registry_mock/contract.py:555
    // if error.native.startswith(err.ARC_65_PREFIX):
    dig 2
    extract 6 4
    bytec_2 // "ERR:"
    ==
    b finalize_proposal_ternary_merge@5


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.drop_proposal[routing]() -> void:
drop_proposal:
    // smart_contracts/xgov_registry_mock/contract.py:567
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry_mock/contract.py:569-573
    // error, _tx = arc4.abi_call(
    //     Proposal.drop,
    //     app_id=proposal_app.as_uint64(),
    //     fee=0,
    // )
    itxn_begin
    // smart_contracts/xgov_registry_mock/contract.py:571
    // app_id=proposal_app.as_uint64(),
    btoi
    itxn_field ApplicationID
    // smart_contracts/xgov_registry_mock/contract.py:569-573
    // error, _tx = arc4.abi_call(
    //     Proposal.drop,
    //     app_id=proposal_app.as_uint64(),
    //     fee=0,
    // )
    pushbytes 0x7371321a // method "drop()string"
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:572
    // fee=0,
    intc_2 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:569-573
    // error, _tx = arc4.abi_call(
    //     Proposal.drop,
    //     app_id=proposal_app.as_uint64(),
    //     fee=0,
    // )
    itxn_submit
    itxn LastLog
    dupn 2
    extract 4 0
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry_mock/contract.py:575
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    intc_3 // 4
    <
    bz drop_proposal_ternary_false@4
    intc_2 // 0

drop_proposal_ternary_merge@5:
    // smart_contracts/xgov_registry_mock/contract.py:575
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz drop_proposal_after_if_else@9
    // smart_contracts/xgov_registry_mock/contract.py:576
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_3 // 4
    dig 1
    dup
    cover 2
    >=
    intc_3 // 4
    dig 2
    uncover 2
    select
    dig 3
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry_mock/contract.py:578
    // case err.WRONG_PROPOSAL_STATUS:
    bytec_1 // "Wrong Proposal Status or finalized"
    // smart_contracts/xgov_registry_mock/contract.py:577-581
    // match error_without_prefix:
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    swap
    match drop_proposal_switch_case_0@7
    // smart_contracts/xgov_registry_mock/contract.py:581
    // assert False, "Unknown error"  # noqa
    err // Unknown error

drop_proposal_switch_case_0@7:
    // smart_contracts/xgov_registry_mock/contract.py:579
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status or finalized

drop_proposal_after_if_else@9:
    // smart_contracts/xgov_registry_mock/contract.py:567
    // @arc4.abimethod()
    intc_0 // 1
    return

drop_proposal_ternary_false@4:
    // smart_contracts/xgov_registry_mock/contract.py:575
    // if error.native.startswith(err.ARC_65_PREFIX):
    dig 2
    extract 6 4
    bytec_2 // "ERR:"
    ==
    b drop_proposal_ternary_merge@5


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.is_proposal[routing]() -> void:
is_proposal:
    // smart_contracts/xgov_registry_mock/contract.py:583
    // @arc4.abimethod()
    txna ApplicationArgs 1
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    intc_0 // 1
    return
