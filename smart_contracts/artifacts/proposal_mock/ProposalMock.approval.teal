#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 8 32
    bytecblock 0x70726f706f736572 0x72656769737472795f6170705f6964 0x 0x737461747573 0x7265717565737465645f616d6f756e74 0x636f6d6d69747465655f6964 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/proposal_mock/contract.py:21
    // key=prop_cfg.GS_KEY_PROPOSER,
    bytec_0 // 0x70726f706f736572
    // smart_contracts/proposal_mock/contract.py:20
    // arc4.Address(),
    global ZeroAddress
    // smart_contracts/proposal_mock/contract.py:19-22
    // self.proposer = GlobalState(
    //     arc4.Address(),
    //     key=prop_cfg.GS_KEY_PROPOSER,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:25
    // key=prop_cfg.GS_KEY_REGISTRY_APP_ID,
    bytec_1 // 0x72656769737472795f6170705f6964
    // smart_contracts/proposal_mock/contract.py:24
    // UInt64(),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:23-26
    // self.registry_app_id = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_REGISTRY_APP_ID,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:29
    // key=prop_cfg.GS_KEY_TITLE,
    pushbytes 0x7469746c65
    // smart_contracts/proposal_mock/contract.py:28
    // String(),
    bytec_2 // ""
    // smart_contracts/proposal_mock/contract.py:27-30
    // self.title = GlobalState(
    //     String(),
    //     key=prop_cfg.GS_KEY_TITLE,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:33
    // key=prop_cfg.GS_KEY_OPEN_TS,
    pushbytes 0x6f70656e5f74696d657374616d70
    // smart_contracts/proposal_mock/contract.py:32
    // UInt64(),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:31-34
    // self.submission_ts = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_OPEN_TS,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:37
    // key=prop_cfg.GS_KEY_SUBMISSION_TS,
    pushbytes 0x7375626d697373696f6e5f74696d657374616d70
    // smart_contracts/proposal_mock/contract.py:36
    // UInt64(),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:35-38
    // self.finalization_ts = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_SUBMISSION_TS,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:41
    // key=prop_cfg.GS_KEY_STATUS,
    bytec_3 // 0x737461747573
    // smart_contracts/proposal_mock/contract.py:40
    // UInt64(enm.STATUS_EMPTY),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:39-42
    // self.status = GlobalState(
    //     UInt64(enm.STATUS_EMPTY),
    //     key=prop_cfg.GS_KEY_STATUS,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:45
    // key=prop_cfg.GS_KEY_FUNDING_CATEGORY,
    pushbytes 0x66756e64696e675f63617465676f7279
    // smart_contracts/proposal_mock/contract.py:44
    // UInt64(enm.FUNDING_CATEGORY_NULL),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:43-46
    // self.funding_category = GlobalState(
    //     UInt64(enm.FUNDING_CATEGORY_NULL),
    //     key=prop_cfg.GS_KEY_FUNDING_CATEGORY,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:49
    // key=prop_cfg.GS_KEY_FUNDING_TYPE,
    pushbytes 0x66756e64696e675f74797065
    // smart_contracts/proposal_mock/contract.py:48
    // UInt64(enm.FUNDING_NULL),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:47-50
    // self.funding_type = GlobalState(
    //     UInt64(enm.FUNDING_NULL),
    //     key=prop_cfg.GS_KEY_FUNDING_TYPE,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:53
    // key=prop_cfg.GS_KEY_REQUESTED_AMOUNT,
    bytec 4 // 0x7265717565737465645f616d6f756e74
    // smart_contracts/proposal_mock/contract.py:52
    // UInt64(),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:51-54
    // self.requested_amount = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_REQUESTED_AMOUNT,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:57
    // key=prop_cfg.GS_KEY_LOCKED_AMOUNT,
    pushbytes 0x6c6f636b65645f616d6f756e74
    // smart_contracts/proposal_mock/contract.py:56
    // UInt64(),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:55-58
    // self.locked_amount = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_LOCKED_AMOUNT,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:61
    // key=prop_cfg.GS_KEY_COMMITTEE_ID,
    bytec 5 // 0x636f6d6d69747465655f6964
    // smart_contracts/proposal_mock/contract.py:60
    // typ.Bytes32.from_bytes(b""),
    bytec_2 // 0x
    // smart_contracts/proposal_mock/contract.py:59-62
    // self.committee_id = GlobalState(
    //     typ.Bytes32.from_bytes(b""),
    //     key=prop_cfg.GS_KEY_COMMITTEE_ID,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:65
    // key=prop_cfg.GS_KEY_COMMITTEE_MEMBERS,
    bytec 6 // 0x636f6d6d69747465655f6d656d62657273
    // smart_contracts/proposal_mock/contract.py:64
    // UInt64(),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:63-66
    // self.committee_members = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_COMMITTEE_MEMBERS,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:69
    // key=prop_cfg.GS_KEY_COMMITTEE_VOTES,
    bytec 7 // 0x636f6d6d69747465655f766f746573
    // smart_contracts/proposal_mock/contract.py:68
    // UInt64(),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:67-70
    // self.committee_votes = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_COMMITTEE_VOTES,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:73
    // key=prop_cfg.GS_KEY_VOTED_MEMBERS,
    pushbytes 0x766f7465645f6d656d62657273
    // smart_contracts/proposal_mock/contract.py:72
    // UInt64(),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:71-74
    // self.voted_members = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_VOTED_MEMBERS,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:77
    // key=prop_cfg.GS_KEY_APPROVALS,
    pushbytes 0x617070726f76616c73
    // smart_contracts/proposal_mock/contract.py:76
    // UInt64(),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:75-78
    // self.approvals = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_APPROVALS,
    // )
    app_global_put
    // smart_contracts/proposal_mock/contract.py:81
    // key=prop_cfg.GS_KEY_REJECTIONS,
    pushbytes 0x72656a656374696f6e73
    // smart_contracts/proposal_mock/contract.py:80
    // UInt64(),
    intc_0 // 0
    // smart_contracts/proposal_mock/contract.py:79-82
    // self.rejections = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_REJECTIONS,
    // )
    app_global_put

main_after_if_else@2:
    // smart_contracts/proposal_mock/contract.py:17
    // class ProposalMock(ARC4Contract):
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@11
    pushbytess 0x1394cc3c 0xd3791253 0x025a9804 0xe94a444d 0xbb8e1d68 // method "set_status(uint64)void", method "set_requested_amount(uint64)void", method "set_committee_details(byte[32],uint64,uint64)void", method "release_funds()void", method "vote(address,uint64,uint64)void"
    txna ApplicationArgs 0
    match set_status set_requested_amount set_committee_details main_release_funds_route@8 vote
    err

main_release_funds_route@8:
    // smart_contracts/proposal_mock/contract.py:105
    // @arc4.abimethod()
    intc_1 // 1
    return

main_create_NoOp@11:
    // smart_contracts/proposal_mock/contract.py:17
    // class ProposalMock(ARC4Contract):
    pushbytes 0xcc694eaa // method "create(address)void"
    txna ApplicationArgs 0
    match create
    err


// smart_contracts.proposal_mock.contract.ProposalMock.create[routing]() -> void:
create:
    // smart_contracts/proposal_mock/contract.py:84
    // @arc4.abimethod(create="require")
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/proposal_mock/contract.py:86
    // self.proposer.value = proposer
    bytec_0 // 0x70726f706f736572
    swap
    app_global_put
    // smart_contracts/proposal_mock/contract.py:87
    // self.registry_app_id.value = Global.caller_application_id
    bytec_1 // 0x72656769737472795f6170705f6964
    global CallerApplicationID
    app_global_put
    // smart_contracts/proposal_mock/contract.py:84
    // @arc4.abimethod(create="require")
    intc_1 // 1
    return


// smart_contracts.proposal_mock.contract.ProposalMock.set_status[routing]() -> void:
set_status:
    // smart_contracts/proposal_mock/contract.py:89
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/proposal_mock/contract.py:91
    // self.status.value = status
    bytec_3 // 0x737461747573
    swap
    app_global_put
    // smart_contracts/proposal_mock/contract.py:89
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.proposal_mock.contract.ProposalMock.set_requested_amount[routing]() -> void:
set_requested_amount:
    // smart_contracts/proposal_mock/contract.py:93
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/proposal_mock/contract.py:95
    // self.requested_amount.value = requested_amount
    bytec 4 // 0x7265717565737465645f616d6f756e74
    swap
    app_global_put
    // smart_contracts/proposal_mock/contract.py:93
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.proposal_mock.contract.ProposalMock.set_committee_details[routing]() -> void:
set_committee_details:
    // smart_contracts/proposal_mock/contract.py:97
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 2
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 3
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/proposal_mock/contract.py:101
    // self.committee_id.value = metadata_hash.copy()
    bytec 5 // 0x636f6d6d69747465655f6964
    uncover 3
    app_global_put
    // smart_contracts/proposal_mock/contract.py:102
    // self.committee_members.value = size
    bytec 6 // 0x636f6d6d69747465655f6d656d62657273
    uncover 2
    app_global_put
    // smart_contracts/proposal_mock/contract.py:103
    // self.committee_votes.value = votes
    bytec 7 // 0x636f6d6d69747465655f766f746573
    swap
    app_global_put
    // smart_contracts/proposal_mock/contract.py:97
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.proposal_mock.contract.ProposalMock.vote[routing]() -> void:
vote:
    // smart_contracts/proposal_mock/contract.py:109
    // @arc4.abimethod()
    txna ApplicationArgs 1
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 2
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 3
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    intc_1 // 1
    return
