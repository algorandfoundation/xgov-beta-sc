# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "create(address)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "submit(pay,string,uint64,uint64,uint8)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "upload_metadata(byte[],bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "drop()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "finalize()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assign_voters((address,uint64)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote(address,uint64,uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "scrutiny()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "review(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fund()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unassign_voters(address[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "decommission()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "ProposalTypedGlobalState",
                    "elements": [
                        [
                            "proposer",
                            "address"
                        ],
                        [
                            "registry_app_id",
                            "uint64"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "submission_ts",
                            "uint64"
                        ],
                        [
                            "finalization_ts",
                            "uint64"
                        ],
                        [
                            "vote_open_ts",
                            "uint64"
                        ],
                        [
                            "status",
                            "uint64"
                        ],
                        [
                            "decommissioned",
                            "bool"
                        ],
                        [
                            "funding_category",
                            "uint64"
                        ],
                        [
                            "focus",
                            "uint8"
                        ],
                        [
                            "funding_type",
                            "uint64"
                        ],
                        [
                            "requested_amount",
                            "uint64"
                        ],
                        [
                            "locked_amount",
                            "uint64"
                        ],
                        [
                            "committee_id",
                            "byte[32]"
                        ],
                        [
                            "committee_members",
                            "uint64"
                        ],
                        [
                            "committee_votes",
                            "uint64"
                        ],
                        [
                            "voted_members",
                            "uint64"
                        ],
                        [
                            "approvals",
                            "uint64"
                        ],
                        [
                            "rejections",
                            "uint64"
                        ],
                        [
                            "nulls",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "op_up()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuX19hbGdvcHlfZW50cnlwb2ludF93aXRoX2luaXQoKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDEwIDIwIDEwMDAwCiAgICBieXRlY2Jsb2NrIDB4MDAwMCAweDczNzQ2MTc0NzU3MyAweCAweDY0NjU2MzZmNmQ2ZDY5NzM3MzY5NmY2ZTY1NjQgMHg3MDcyNmY3MDZmNzM2NTcyIDB4NjY3NTZlNjQ2OTZlNjc1ZjYzNjE3NDY1Njc2ZjcyNzkgIk0iIDB4NzI2NTY3Njk3Mzc0NzI3OTVmNjE3MDcwNWY2OTY0IDB4NjM2ZjZkNmQ2OTc0NzQ2NTY1NWY2ZDY1NmQ2MjY1NzI3MyAidm90ZXJzX2NvdW50IiAweDYzNmY2ZDZkNjk3NDc0NjU2NTVmNzY2Zjc0NjU3MyAweDc2NmY3NDY1NjQ1ZjZkNjU2ZDYyNjU3MjczIDB4NjE3MDcwNzI2Zjc2NjE2YzczIDB4NzI2NTZhNjU2Mzc0Njk2ZjZlNzMgImFzc2lnbmVkX3ZvdGVzIiAweDZjNmY2MzZiNjU2NDVmNjE2ZDZmNzU2ZTc0IDB4NmU3NTZjNmM3MyAweDE1MWY3Yzc1IDB4MDAgMHg3Mzc1NjI2ZDY5NzM3MzY5NmY2ZTVmNzQ2OTZkNjU3Mzc0NjE2ZDcwIDB4NzY2Zjc0NjU1ZjZmNzA2NTZlNjk2ZTY3NWY3NDY5NmQ2NTczNzQ2MTZkNzAgMHg2MzZmNmQ2ZDY5NzQ3NDY1NjU1ZjY5NjQgMHgwMDJiNDU1MjUyM2E1NzcyNmY2ZTY3MjA1MDcyNmY3MDZmNzM2MTZjMjA1Mzc0NjE3NDc1NzMyMDZmNzIyMDQ0NjU2MzZmNmQ2ZDY5NzM3MzY5NmY2ZTY1NjQgMHg3NDY5NzQ2YzY1IDB4NjY2OTZlNjE2YzY5N2E2MTc0Njk2ZjZlNWY3NDY5NmQ2NTczNzQ2MTZkNzAgMHg2NjZmNjM3NTczIDB4NjY3NTZlNjQ2OTZlNjc1Zjc0Nzk3MDY1IDB4NzI2NTcxNzU2NTczNzQ2NTY0NWY2MTZkNmY3NTZlNzQgIlYiIDB4Nzg2NzZmNzY1ZjY0NjE2NTZkNmY2ZQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ2CiAgICAvLyBUeG4uZ2xvYmFsX251bV9ieXRlX3NsaWNlID09IHByb3BfY2ZnLkdMT0JBTF9CWVRFUwogICAgdHhuIEdsb2JhbE51bUJ5dGVTbGljZQogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDQtNDcKICAgIC8vICMgUHJlY29uZGl0aW9ucwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBUeG4uZ2xvYmFsX251bV9ieXRlX3NsaWNlID09IHByb3BfY2ZnLkdMT0JBTF9CWVRFUwogICAgLy8gKSwgZXJyLldST05HX0dMT0JBTF9CWVRFUwogICAgYXNzZXJ0IC8vIFdyb25nIEdsb2JhbCBCeXRlcyBhbGxvY2F0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDgKICAgIC8vIGFzc2VydCBUeG4uZ2xvYmFsX251bV91aW50ID09IHByb3BfY2ZnLkdMT0JBTF9VSU5UUywgZXJyLldST05HX0dMT0JBTF9VSU5UUwogICAgdHhuIEdsb2JhbE51bVVpbnQKICAgIHB1c2hpbnQgMTkgLy8gMTkKICAgID09CiAgICBhc3NlcnQgLy8gV3JvbmcgR2xvYmFsIFVJbnRzIGFsbG9jYXRpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0OQogICAgLy8gYXNzZXJ0IFR4bi5sb2NhbF9udW1fYnl0ZV9zbGljZSA9PSBwcm9wX2NmZy5MT0NBTF9CWVRFUywgZXJyLldST05HX0xPQ0FMX0JZVEVTCiAgICB0eG4gTG9jYWxOdW1CeXRlU2xpY2UKICAgICEKICAgIGFzc2VydCAvLyBXcm9uZyBMb2NhbCBCeXRlcyBhbGxvY2F0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTAKICAgIC8vIGFzc2VydCBUeG4ubG9jYWxfbnVtX3VpbnQgPT0gcHJvcF9jZmcuTE9DQUxfVUlOVFMsIGVyci5XUk9OR19MT0NBTF9VSU5UUwogICAgdHhuIExvY2FsTnVtVWludAogICAgIQogICAgYXNzZXJ0IC8vIFdyb25nIExvY2FsIFVJbnRzIGFsbG9jYXRpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1NQogICAgLy8ga2V5PXByb3BfY2ZnLkdTX0tFWV9QUk9QT1NFUiwKICAgIGJ5dGVjIDQgLy8gMHg3MDcyNmY3MDZmNzM2NTcyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTQKICAgIC8vIEFjY291bnQoKSwKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjUyLTU2CiAgICAvLyAjIEdsb2JhbCBWYXJpYWJsZXMKICAgIC8vIHNlbGYucHJvcG9zZXIgPSBHbG9iYWxTdGF0ZSgKICAgIC8vICAgICBBY2NvdW50KCksCiAgICAvLyAgICAga2V5PXByb3BfY2ZnLkdTX0tFWV9QUk9QT1NFUiwKICAgIC8vICkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTkKICAgIC8vIGtleT1wcm9wX2NmZy5HU19LRVlfUkVHSVNUUllfQVBQX0lELAogICAgYnl0ZWMgNyAvLyAweDcyNjU2NzY5NzM3NDcyNzk1ZjYxNzA3MDVmNjk2NAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjU4CiAgICAvLyBVSW50NjQoKSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTctNjAKICAgIC8vIHNlbGYucmVnaXN0cnlfYXBwX2lkID0gR2xvYmFsU3RhdGUoCiAgICAvLyAgICAgVUludDY0KCksCiAgICAvLyAgICAga2V5PXByb3BfY2ZnLkdTX0tFWV9SRUdJU1RSWV9BUFBfSUQsCiAgICAvLyApCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjYzCiAgICAvLyBrZXk9cHJvcF9jZmcuR1NfS0VZX1RJVExFLAogICAgYnl0ZWMgMjMgLy8gMHg3NDY5NzQ2YzY1CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjIKICAgIC8vIFN0cmluZygpLAogICAgYnl0ZWNfMiAvLyAiIgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjYxLTY0CiAgICAvLyBzZWxmLnRpdGxlID0gR2xvYmFsU3RhdGUoCiAgICAvLyAgICAgU3RyaW5nKCksCiAgICAvLyAgICAga2V5PXByb3BfY2ZnLkdTX0tFWV9USVRMRSwKICAgIC8vICkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjcKICAgIC8vIGtleT1wcm9wX2NmZy5HU19LRVlfU1VCTUlTU0lPTl9UUywKICAgIGJ5dGVjIDE5IC8vIDB4NzM3NTYyNmQ2OTczNzM2OTZmNmU1Zjc0Njk2ZDY1NzM3NDYxNmQ3MAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjY2CiAgICAvLyBVSW50NjQoKSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjUtNjgKICAgIC8vIHNlbGYuc3VibWlzc2lvbl90cyA9IEdsb2JhbFN0YXRlKAogICAgLy8gICAgIFVJbnQ2NCgpLAogICAgLy8gICAgIGtleT1wcm9wX2NmZy5HU19LRVlfU1VCTUlTU0lPTl9UUywKICAgIC8vICkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzEKICAgIC8vIGtleT1wcm9wX2NmZy5HU19LRVlfRklOQUxJWkFUSU9OX1RTLAogICAgYnl0ZWMgMjQgLy8gMHg2NjY5NmU2MTZjNjk3YTYxNzQ2OTZmNmU1Zjc0Njk2ZDY1NzM3NDYxNmQ3MAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjcwCiAgICAvLyBVSW50NjQoKSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjktNzIKICAgIC8vIHNlbGYuZmluYWxpemF0aW9uX3RzID0gR2xvYmFsU3RhdGUoCiAgICAvLyAgICAgVUludDY0KCksCiAgICAvLyAgICAga2V5PXByb3BfY2ZnLkdTX0tFWV9GSU5BTElaQVRJT05fVFMsCiAgICAvLyApCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc1CiAgICAvLyBrZXk9cHJvcF9jZmcuR1NfS0VZX1ZPVEVfT1BFTl9UUywKICAgIGJ5dGVjIDIwIC8vIDB4NzY2Zjc0NjU1ZjZmNzA2NTZlNjk2ZTY3NWY3NDY5NmQ2NTczNzQ2MTZkNzAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3NAogICAgLy8gVUludDY0KCksCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjczLTc2CiAgICAvLyBzZWxmLnZvdGVfb3Blbl90cyA9IEdsb2JhbFN0YXRlKAogICAgLy8gICAgIFVJbnQ2NCgpLAogICAgLy8gICAgIGtleT1wcm9wX2NmZy5HU19LRVlfVk9URV9PUEVOX1RTLAogICAgLy8gKQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3OQogICAgLy8ga2V5PXByb3BfY2ZnLkdTX0tFWV9TVEFUVVMsCiAgICBieXRlY18xIC8vIDB4NzM3NDYxNzQ3NTczCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzgKICAgIC8vIFVJbnQ2NChlbm0uU1RBVFVTX0VNUFRZKSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzctODAKICAgIC8vIHNlbGYuc3RhdHVzID0gR2xvYmFsU3RhdGUoCiAgICAvLyAgICAgVUludDY0KGVubS5TVEFUVVNfRU1QVFkpLAogICAgLy8gICAgIGtleT1wcm9wX2NmZy5HU19LRVlfU1RBVFVTLAogICAgLy8gKQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4MwogICAgLy8ga2V5PXByb3BfY2ZnLkdTX0tFWV9ERUNPTU1JU1NJT05FRCwKICAgIGJ5dGVjXzMgLy8gMHg2NDY1NjM2ZjZkNmQ2OTczNzM2OTZmNmU2NTY0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODIKICAgIC8vIEZhbHNlLCAgIyBub3FhOiBGQlQwMDMKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODEtODQKICAgIC8vIHNlbGYuZGVjb21taXNzaW9uZWQgPSBHbG9iYWxTdGF0ZSgKICAgIC8vICAgICBGYWxzZSwgICMgbm9xYTogRkJUMDAzCiAgICAvLyAgICAga2V5PXByb3BfY2ZnLkdTX0tFWV9ERUNPTU1JU1NJT05FRCwKICAgIC8vICkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODcKICAgIC8vIGtleT1wcm9wX2NmZy5HU19LRVlfRlVORElOR19DQVRFR09SWSwKICAgIGJ5dGVjIDUgLy8gMHg2Njc1NmU2NDY5NmU2NzVmNjM2MTc0NjU2NzZmNzI3OQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojg2CiAgICAvLyBVSW50NjQoZW5tLkZVTkRJTkdfQ0FURUdPUllfTlVMTCksCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojg1LTg4CiAgICAvLyBzZWxmLmZ1bmRpbmdfY2F0ZWdvcnkgPSBHbG9iYWxTdGF0ZSgKICAgIC8vICAgICBVSW50NjQoZW5tLkZVTkRJTkdfQ0FURUdPUllfTlVMTCksCiAgICAvLyAgICAga2V5PXByb3BfY2ZnLkdTX0tFWV9GVU5ESU5HX0NBVEVHT1JZLAogICAgLy8gKQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5MQogICAgLy8ga2V5PXByb3BfY2ZnLkdTX0tFWV9GT0NVUywKICAgIGJ5dGVjIDI1IC8vIDB4NjY2ZjYzNzU3MwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBVSW50NjQoZW5tLkZPQ1VTX05VTEwpLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4OS05MgogICAgLy8gc2VsZi5mb2N1cyA9IEdsb2JhbFN0YXRlKAogICAgLy8gICAgIFVJbnQ2NChlbm0uRk9DVVNfTlVMTCksCiAgICAvLyAgICAga2V5PXByb3BfY2ZnLkdTX0tFWV9GT0NVUywKICAgIC8vICkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTUKICAgIC8vIGtleT1wcm9wX2NmZy5HU19LRVlfRlVORElOR19UWVBFLAogICAgYnl0ZWMgMjYgLy8gMHg2Njc1NmU2NDY5NmU2NzVmNzQ3OTcwNjUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5NAogICAgLy8gVUludDY0KGVubS5GVU5ESU5HX05VTEwpLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5My05NgogICAgLy8gc2VsZi5mdW5kaW5nX3R5cGUgPSBHbG9iYWxTdGF0ZSgKICAgIC8vICAgICBVSW50NjQoZW5tLkZVTkRJTkdfTlVMTCksCiAgICAvLyAgICAga2V5PXByb3BfY2ZnLkdTX0tFWV9GVU5ESU5HX1RZUEUsCiAgICAvLyApCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk5CiAgICAvLyBrZXk9cHJvcF9jZmcuR1NfS0VZX1JFUVVFU1RFRF9BTU9VTlQsCiAgICBieXRlYyAyNyAvLyAweDcyNjU3MTc1NjU3Mzc0NjU2NDVmNjE2ZDZmNzU2ZTc0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTgKICAgIC8vIFVJbnQ2NCgpLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5Ny0xMDAKICAgIC8vIHNlbGYucmVxdWVzdGVkX2Ftb3VudCA9IEdsb2JhbFN0YXRlKAogICAgLy8gICAgIFVJbnQ2NCgpLAogICAgLy8gICAgIGtleT1wcm9wX2NmZy5HU19LRVlfUkVRVUVTVEVEX0FNT1VOVCwKICAgIC8vICkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTAzCiAgICAvLyBrZXk9cHJvcF9jZmcuR1NfS0VZX0xPQ0tFRF9BTU9VTlQsCiAgICBieXRlYyAxNSAvLyAweDZjNmY2MzZiNjU2NDVmNjE2ZDZmNzU2ZTc0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTAyCiAgICAvLyBVSW50NjQoKSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTAxLTEwNAogICAgLy8gc2VsZi5sb2NrZWRfYW1vdW50ID0gR2xvYmFsU3RhdGUoCiAgICAvLyAgICAgVUludDY0KCksCiAgICAvLyAgICAga2V5PXByb3BfY2ZnLkdTX0tFWV9MT0NLRURfQU1PVU5ULAogICAgLy8gKQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMDcKICAgIC8vIGtleT1wcm9wX2NmZy5HU19LRVlfQ09NTUlUVEVFX0lELAogICAgYnl0ZWMgMjEgLy8gMHg2MzZmNmQ2ZDY5NzQ3NDY1NjU1ZjY5NjQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMDYKICAgIC8vIHR5cC5CeXRlczMyLmZyb21fYnl0ZXMoYiIiKSwKICAgIGJ5dGVjXzIgLy8gMHgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMDUtMTA4CiAgICAvLyBzZWxmLmNvbW1pdHRlZV9pZCA9IEdsb2JhbFN0YXRlKAogICAgLy8gICAgIHR5cC5CeXRlczMyLmZyb21fYnl0ZXMoYiIiKSwKICAgIC8vICAgICBrZXk9cHJvcF9jZmcuR1NfS0VZX0NPTU1JVFRFRV9JRCwKICAgIC8vICkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTExCiAgICAvLyBrZXk9cHJvcF9jZmcuR1NfS0VZX0NPTU1JVFRFRV9NRU1CRVJTLAogICAgYnl0ZWMgOCAvLyAweDYzNmY2ZDZkNjk3NDc0NjU2NTVmNmQ2NTZkNjI2NTcyNzMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMTAKICAgIC8vIFVJbnQ2NCgpLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMDktMTEyCiAgICAvLyBzZWxmLmNvbW1pdHRlZV9tZW1iZXJzID0gR2xvYmFsU3RhdGUoCiAgICAvLyAgICAgVUludDY0KCksCiAgICAvLyAgICAga2V5PXByb3BfY2ZnLkdTX0tFWV9DT01NSVRURUVfTUVNQkVSUywKICAgIC8vICkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTE1CiAgICAvLyBrZXk9cHJvcF9jZmcuR1NfS0VZX0NPTU1JVFRFRV9WT1RFUywKICAgIGJ5dGVjIDEwIC8vIDB4NjM2ZjZkNmQ2OTc0NzQ2NTY1NWY3NjZmNzQ2NTczCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTE0CiAgICAvLyBVSW50NjQoKSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTEzLTExNgogICAgLy8gc2VsZi5jb21taXR0ZWVfdm90ZXMgPSBHbG9iYWxTdGF0ZSgKICAgIC8vICAgICBVSW50NjQoKSwKICAgIC8vICAgICBrZXk9cHJvcF9jZmcuR1NfS0VZX0NPTU1JVFRFRV9WT1RFUywKICAgIC8vICkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTE5CiAgICAvLyBrZXk9cHJvcF9jZmcuR1NfS0VZX1ZPVEVEX01FTUJFUlMsCiAgICBieXRlYyAxMSAvLyAweDc2NmY3NDY1NjQ1ZjZkNjU2ZDYyNjU3MjczCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTE4CiAgICAvLyBVSW50NjQoKSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTE3LTEyMAogICAgLy8gc2VsZi52b3RlZF9tZW1iZXJzID0gR2xvYmFsU3RhdGUoCiAgICAvLyAgICAgVUludDY0KCksCiAgICAvLyAgICAga2V5PXByb3BfY2ZnLkdTX0tFWV9WT1RFRF9NRU1CRVJTLAogICAgLy8gKQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMjMKICAgIC8vIGtleT1wcm9wX2NmZy5HU19LRVlfQVBQUk9WQUxTLAogICAgYnl0ZWMgMTIgLy8gMHg2MTcwNzA3MjZmNzY2MTZjNzMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMjIKICAgIC8vIFVJbnQ2NCgpLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMjEtMTI0CiAgICAvLyBzZWxmLmFwcHJvdmFscyA9IEdsb2JhbFN0YXRlKAogICAgLy8gICAgIFVJbnQ2NCgpLAogICAgLy8gICAgIGtleT1wcm9wX2NmZy5HU19LRVlfQVBQUk9WQUxTLAogICAgLy8gKQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMjcKICAgIC8vIGtleT1wcm9wX2NmZy5HU19LRVlfUkVKRUNUSU9OUywKICAgIGJ5dGVjIDEzIC8vIDB4NzI2NTZhNjU2Mzc0Njk2ZjZlNzMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMjYKICAgIC8vIFVJbnQ2NCgpLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMjUtMTI4CiAgICAvLyBzZWxmLnJlamVjdGlvbnMgPSBHbG9iYWxTdGF0ZSgKICAgIC8vICAgICBVSW50NjQoKSwKICAgIC8vICAgICBrZXk9cHJvcF9jZmcuR1NfS0VZX1JFSkVDVElPTlMsCiAgICAvLyApCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEzMQogICAgLy8ga2V5PXByb3BfY2ZnLkdTX0tFWV9OVUxMUywKICAgIGJ5dGVjIDE2IC8vIDB4NmU3NTZjNmM3MwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEzMAogICAgLy8gVUludDY0KCksCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEyOS0xMzIKICAgIC8vIHNlbGYubnVsbHMgPSBHbG9iYWxTdGF0ZSgKICAgIC8vICAgICBVSW50NjQoKSwKICAgIC8vICAgICBrZXk9cHJvcF9jZmcuR1NfS0VZX05VTExTLAogICAgLy8gKQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMzMKICAgIC8vIHNlbGYudm90ZXJzX2NvdW50ID0gVUludDY0KDApCiAgICBieXRlYyA5IC8vICJ2b3RlcnNfY291bnQiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMzQKICAgIC8vIHNlbGYuYXNzaWduZWRfdm90ZXMgPSBVSW50NjQoMCkKICAgIGJ5dGVjIDE0IC8vICJhc3NpZ25lZF92b3RlcyIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAoKbWFpbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzQtNDIKICAgIC8vIGNsYXNzIFByb3Bvc2FsKAogICAgLy8gICAgIEFSQzRDb250cmFjdCwKICAgIC8vICAgICBzdGF0ZV90b3RhbHM9U3RhdGVUb3RhbHMoCiAgICAvLyAgICAgICAgIGdsb2JhbF9ieXRlcz1wcm9wX2NmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1wcm9wX2NmZy5HTE9CQUxfVUlOVFMsCiAgICAvLyAgICAgICAgIGxvY2FsX2J5dGVzPXByb3BfY2ZnLkxPQ0FMX0JZVEVTLAogICAgLy8gICAgICAgICBsb2NhbF91aW50cz1wcm9wX2NmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2FmdGVyX2lmX2Vsc2VAMjAKICAgIHB1c2hieXRlc3MgMHhjYzY5NGVhYSAweDFlYzM4NTNmIDB4NzE0Mzk5NGYgMHg3MzcxMzIxYSAweDIzZDhiN2NlIDB4MGQ5YWIwZDcgMHgxODQxYTBkMiAweDczNGRiZWNjIDB4MjEyZDlmMDcgMHg4YTVlNGM4MCAweDJhYzE5YjA1IDB4NjllY2Y0YTIgMHgyNDM3OGQzYyAweGE4YzZmODBhIDB4ZGJkODNkZDkgLy8gbWV0aG9kICJjcmVhdGUoYWRkcmVzcyl2b2lkIiwgbWV0aG9kICJzdWJtaXQocGF5LHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ4KXZvaWQiLCBtZXRob2QgInVwbG9hZF9tZXRhZGF0YShieXRlW10sYm9vbCl2b2lkIiwgbWV0aG9kICJkcm9wKClzdHJpbmciLCBtZXRob2QgImZpbmFsaXplKCl2b2lkIiwgbWV0aG9kICJhc3NpZ25fdm90ZXJzKChhZGRyZXNzLHVpbnQ2NClbXSl2b2lkIiwgbWV0aG9kICJ2b3RlKGFkZHJlc3MsdWludDY0LHVpbnQ2NClzdHJpbmciLCBtZXRob2QgInNjcnV0aW55KCl2b2lkIiwgbWV0aG9kICJyZXZpZXcoYm9vbCl2b2lkIiwgbWV0aG9kICJmdW5kKClzdHJpbmciLCBtZXRob2QgInVuYXNzaWduX3ZvdGVycyhhZGRyZXNzW10pdm9pZCIsIG1ldGhvZCAiZGVjb21taXNzaW9uKClzdHJpbmciLCBtZXRob2QgImRlbGV0ZSgpdm9pZCIsIG1ldGhvZCAiZ2V0X3N0YXRlKCkoYWRkcmVzcyx1aW50NjQsc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCxib29sLHVpbnQ2NCx1aW50OCx1aW50NjQsdWludDY0LHVpbnQ2NCxieXRlWzMyXSx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkiLCBtZXRob2QgIm9wX3VwKCl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9jcmVhdGVfcm91dGVANSBtYWluX3N1Ym1pdF9yb3V0ZUA2IG1haW5fdXBsb2FkX21ldGFkYXRhX3JvdXRlQDcgbWFpbl9kcm9wX3JvdXRlQDggbWFpbl9maW5hbGl6ZV9yb3V0ZUA5IG1haW5fYXNzaWduX3ZvdGVyc19yb3V0ZUAxMCBtYWluX3ZvdGVfcm91dGVAMTEgbWFpbl9zY3J1dGlueV9yb3V0ZUAxMiBtYWluX3Jldmlld19yb3V0ZUAxMyBtYWluX2Z1bmRfcm91dGVAMTQgbWFpbl91bmFzc2lnbl92b3RlcnNfcm91dGVAMTUgbWFpbl9kZWNvbW1pc3Npb25fcm91dGVAMTYgbWFpbl9kZWxldGVfcm91dGVAMTcgbWFpbl9nZXRfc3RhdGVfcm91dGVAMTggbWFpbl9vcF91cF9yb3V0ZUAxOQoKbWFpbl9hZnRlcl9pZl9lbHNlQDIwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjM0LTQyCiAgICAvLyBjbGFzcyBQcm9wb3NhbCgKICAgIC8vICAgICBBUkM0Q29udHJhY3QsCiAgICAvLyAgICAgc3RhdGVfdG90YWxzPVN0YXRlVG90YWxzKAogICAgLy8gICAgICAgICBnbG9iYWxfYnl0ZXM9cHJvcF9jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9cHJvcF9jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1wcm9wX2NmZy5MT0NBTF9CWVRFUywKICAgIC8vICAgICAgICAgbG9jYWxfdWludHM9cHJvcF9jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX29wX3VwX3JvdXRlQDE5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEwMTUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X3N0YXRlX3JvdXRlQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk4NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X3N0YXRlCiAgICBieXRlYyAxNyAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9kZWxldGVfcm91dGVAMTc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTcyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoYWxsb3dfYWN0aW9ucz0oIkRlbGV0ZUFwcGxpY2F0aW9uIiwpKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgRGVsZXRlQXBwbGljYXRpb24KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBkZWxldGUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZGVjb21taXNzaW9uX3JvdXRlQDE2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjkzNAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBkZWNvbW1pc3Npb24KICAgIGJ5dGVjIDE3IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3VuYXNzaWduX3ZvdGVyc19yb3V0ZUAxNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5MDMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozNC00MgogICAgLy8gY2xhc3MgUHJvcG9zYWwoCiAgICAvLyAgICAgQVJDNENvbnRyYWN0LAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPXByb3BfY2ZnLkdMT0JBTF9CWVRFUywKICAgIC8vICAgICAgICAgZ2xvYmFsX3VpbnRzPXByb3BfY2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9cHJvcF9jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPXByb3BfY2ZnLkxPQ0FMX1VJTlRTLAogICAgLy8gICAgICksCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjkwMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgdW5hc3NpZ25fdm90ZXJzCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2Z1bmRfcm91dGVAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODgxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGZ1bmQKICAgIGJ5dGVjIDE3IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3Jldmlld19yb3V0ZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4NTQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozNC00MgogICAgLy8gY2xhc3MgUHJvcG9zYWwoCiAgICAvLyAgICAgQVJDNENvbnRyYWN0LAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPXByb3BfY2ZnLkdMT0JBTF9CWVRFUywKICAgIC8vICAgICAgICAgZ2xvYmFsX3VpbnRzPXByb3BfY2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9cHJvcF9jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPXByb3BfY2ZnLkxPQ0FMX1VJTlRTLAogICAgLy8gICAgICksCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojg1NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgcmV2aWV3CiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3NjcnV0aW55X3JvdXRlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjgxMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBzY3J1dGlueQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl92b3RlX3JvdXRlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc2MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjM0LTQyCiAgICAvLyBjbGFzcyBQcm9wb3NhbCgKICAgIC8vICAgICBBUkM0Q29udHJhY3QsCiAgICAvLyAgICAgc3RhdGVfdG90YWxzPVN0YXRlVG90YWxzKAogICAgLy8gICAgICAgICBnbG9iYWxfYnl0ZXM9cHJvcF9jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9cHJvcF9jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1wcm9wX2NmZy5MT0NBTF9CWVRFUywKICAgIC8vICAgICAgICAgbG9jYWxfdWludHM9cHJvcF9jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzYyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiB2b3RlCiAgICBieXRlYyAxNyAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hc3NpZ25fdm90ZXJzX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjcyNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjM0LTQyCiAgICAvLyBjbGFzcyBQcm9wb3NhbCgKICAgIC8vICAgICBBUkM0Q29udHJhY3QsCiAgICAvLyAgICAgc3RhdGVfdG90YWxzPVN0YXRlVG90YWxzKAogICAgLy8gICAgICAgICBnbG9iYWxfYnl0ZXM9cHJvcF9jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9cHJvcF9jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1wcm9wX2NmZy5MT0NBTF9CWVRFUywKICAgIC8vICAgICAgICAgbG9jYWxfdWludHM9cHJvcF9jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzI3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBhc3NpZ25fdm90ZXJzCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2ZpbmFsaXplX3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjY0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGZpbmFsaXplCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2Ryb3Bfcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2NDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZHJvcAogICAgYnl0ZWMgMTcgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBsb2FkX21ldGFkYXRhX3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjA5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzQtNDIKICAgIC8vIGNsYXNzIFByb3Bvc2FsKAogICAgLy8gICAgIEFSQzRDb250cmFjdCwKICAgIC8vICAgICBzdGF0ZV90b3RhbHM9U3RhdGVUb3RhbHMoCiAgICAvLyAgICAgICAgIGdsb2JhbF9ieXRlcz1wcm9wX2NmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1wcm9wX2NmZy5HTE9CQUxfVUlOVFMsCiAgICAvLyAgICAgICAgIGxvY2FsX2J5dGVzPXByb3BfY2ZnLkxPQ0FMX0JZVEVTLAogICAgLy8gICAgICAgICBsb2NhbF91aW50cz1wcm9wX2NmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2MDkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHVwbG9hZF9tZXRhZGF0YQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9zdWJtaXRfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1NTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozNC00MgogICAgLy8gY2xhc3MgUHJvcG9zYWwoCiAgICAvLyAgICAgQVJDNENvbnRyYWN0LAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPXByb3BfY2ZnLkdMT0JBTF9CWVRFUywKICAgIC8vICAgICAgICAgZ2xvYmFsX3VpbnRzPXByb3BfY2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9cHJvcF9jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPXByb3BfY2ZnLkxPQ0FMX1VJTlRTLAogICAgLy8gICAgICksCiAgICAvLyApOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTU2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBzdWJtaXQKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTQwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzQtNDIKICAgIC8vIGNsYXNzIFByb3Bvc2FsKAogICAgLy8gICAgIEFSQzRDb250cmFjdCwKICAgIC8vICAgICBzdGF0ZV90b3RhbHM9U3RhdGVUb3RhbHMoCiAgICAvLyAgICAgICAgIGdsb2JhbF9ieXRlcz1wcm9wX2NmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1wcm9wX2NmZy5HTE9CQUxfVUlOVFMsCiAgICAvLyAgICAgICAgIGxvY2FsX2J5dGVzPXByb3BfY2ZnLkxPQ0FMX0JZVEVTLAogICAgLy8gICAgICAgICBsb2NhbF91aW50cz1wcm9wX2NmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1NDAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChjcmVhdGU9InJlcXVpcmUiKQogICAgY2FsbHN1YiBjcmVhdGUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuaXNfdm90aW5nX29wZW4oKSAtPiB1aW50NjQsIGJ5dGVzOgppc192b3Rpbmdfb3BlbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNDQtMTQ1CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGlzX3ZvdGluZ19vcGVuKHNlbGYpIC0+IHR1cGxlW2Jvb2wsIHR5cC5FcnJvcl06CiAgICBwcm90byAwIDIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTQ2CiAgICAvLyB2b3RpbmdfZHVyYXRpb24gPSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCAtIHNlbGYudm90ZV9vcGVuX3RzLnZhbHVlCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMjAgLy8gMHg3NjZmNzQ2NTVmNmY3MDY1NmU2OTZlNjc1Zjc0Njk2ZDY1NzM3NDYxNmQ3MAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnZvdGVfb3Blbl90cyBleGlzdHMKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNDgKICAgIC8vIHNlbGYuZnVuZGluZ19jYXRlZ29yeS52YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDUgLy8gMHg2Njc1NmU2NDY5NmU2NzVmNjM2MTc0NjU2NzZmNzI3OQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIHN3YXAKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kaW5nX2NhdGVnb3J5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjI3NAogICAgLy8gaWYgY2F0ZWdvcnkgPT0gZW5tLkZVTkRJTkdfQ0FURUdPUllfU01BTEw6CiAgICBpbnRjXzIgLy8gMTAKICAgID09CiAgICBieiBpc192b3Rpbmdfb3Blbl9lbHNlX2JvZHlANQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjI3NgogICAgLy8gQnl0ZXMocmVnX2NmZy5HU19LRVlfVk9USU5HX0RVUkFUSU9OX1NNQUxMKQogICAgcHVzaGJ5dGVzIDB4NzY2Zjc0Njk2ZTY3NWY2NDc1NzI2MTc0Njk2ZjZlNWY3MzZkNjE2YzZjCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6Mjc1LTI3NwogICAgLy8gcmV0dXJuIHNlbGYuZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcoCiAgICAvLyAgICAgQnl0ZXMocmVnX2NmZy5HU19LRVlfVk9USU5HX0RVUkFUSU9OX1NNQUxMKQogICAgLy8gKQogICAgY2FsbHN1YiBnZXRfdWludF9mcm9tX3JlZ2lzdHJ5X2NvbmZpZwogICAgZnJhbWVfYnVyeSAwCiAgICBmcmFtZV9idXJ5IDEKCmlzX3ZvdGluZ19vcGVuX2FmdGVyX2lubGluZWRfc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLmdldF92b3RpbmdfZHVyYXRpb25AODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNTAKICAgIC8vIGlmIGVycm9yICE9IHR5cC5FcnJvcigiIik6CiAgICBmcmFtZV9kaWcgMAogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgICE9CiAgICBieiBpc192b3Rpbmdfb3Blbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNTEKICAgIC8vIHJldHVybiBGYWxzZSwgZXJyb3IKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfYnVyeSAxCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKaXNfdm90aW5nX29wZW5fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE1MwogICAgLy8gcmV0dXJuIHZvdGluZ19kdXJhdGlvbiA8PSBtYXhpbXVtX3ZvdGluZ19kdXJhdGlvbiwgdHlwLkVycm9yKCIiKQogICAgZnJhbWVfZGlnIDIKICAgIGZyYW1lX2RpZyAxCiAgICA8PQogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgIGZyYW1lX2J1cnkgMQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCmlzX3ZvdGluZ19vcGVuX2Vsc2VfYm9keUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjI3OAogICAgLy8gZWxpZiBjYXRlZ29yeSA9PSBlbm0uRlVORElOR19DQVRFR09SWV9NRURJVU06CiAgICBmcmFtZV9kaWcgMwogICAgaW50Y18zIC8vIDIwCiAgICA9PQogICAgYnogaXNfdm90aW5nX29wZW5fZWxzZV9ib2R5QDcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyODAKICAgIC8vIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1ZPVElOR19EVVJBVElPTl9NRURJVU0pCiAgICBwdXNoYnl0ZXMgMHg3NjZmNzQ2OTZlNjc1ZjY0NzU3MjYxNzQ2OTZmNmU1ZjZkNjU2NDY5NzU2ZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjI3OS0yODEKICAgIC8vIHJldHVybiBzZWxmLmdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnKAogICAgLy8gICAgIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1ZPVElOR19EVVJBVElPTl9NRURJVU0pCiAgICAvLyApCiAgICBjYWxsc3ViIGdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnCiAgICBmcmFtZV9idXJ5IDAKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE0Ny0xNDkKICAgIC8vIG1heGltdW1fdm90aW5nX2R1cmF0aW9uLCBlcnJvciA9IHNlbGYuZ2V0X3ZvdGluZ19kdXJhdGlvbigKICAgIC8vICAgICBzZWxmLmZ1bmRpbmdfY2F0ZWdvcnkudmFsdWUKICAgIC8vICkKICAgIGIgaXNfdm90aW5nX29wZW5fYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuZ2V0X3ZvdGluZ19kdXJhdGlvbkA4Cgppc192b3Rpbmdfb3Blbl9lbHNlX2JvZHlANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyODQKICAgIC8vIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1ZPVElOR19EVVJBVElPTl9MQVJHRSkKICAgIHB1c2hieXRlcyAweDc2NmY3NDY5NmU2NzVmNjQ3NTcyNjE3NDY5NmY2ZTVmNmM2MTcyNjc2NQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjI4My0yODUKICAgIC8vIHJldHVybiBzZWxmLmdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnKAogICAgLy8gICAgIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1ZPVElOR19EVVJBVElPTl9MQVJHRSkKICAgIC8vICkKICAgIGNhbGxzdWIgZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcKICAgIGZyYW1lX2J1cnkgMAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTQ3LTE0OQogICAgLy8gbWF4aW11bV92b3RpbmdfZHVyYXRpb24sIGVycm9yID0gc2VsZi5nZXRfdm90aW5nX2R1cmF0aW9uKAogICAgLy8gICAgIHNlbGYuZnVuZGluZ19jYXRlZ29yeS52YWx1ZQogICAgLy8gKQogICAgYiBpc192b3Rpbmdfb3Blbl9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5nZXRfdm90aW5nX2R1cmF0aW9uQDgKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuYXNzZXJ0X2RyYWZ0X2FuZF9wcm9wb3NlcigpIC0+IHZvaWQ6CmFzc2VydF9kcmFmdF9hbmRfcHJvcG9zZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzQ3CiAgICAvLyBhc3NlcnQgc2VsZi5pc19wcm9wb3NlcigpLCBlcnIuVU5BVVRIT1JJWkVECiAgICBjYWxsc3ViIGlzX3Byb3Bvc2VyCiAgICBhc3NlcnQgLy8gVW5hdXRob3JpemVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzQ5CiAgICAvLyBzZWxmLnN0YXR1cy52YWx1ZSA9PSBlbm0uU1RBVFVTX0RSQUZUIGFuZCBub3Qgc2VsZi5kZWNvbW1pc3Npb25lZC52YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gMHg3Mzc0NjE3NDc1NzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zdGF0dXMgZXhpc3RzCiAgICBpbnRjXzIgLy8gMTAKICAgID09CiAgICBieiBhc3NlcnRfZHJhZnRfYW5kX3Byb3Bvc2VyX2Jvb2xfZmFsc2VAMwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gMHg2NDY1NjM2ZjZkNmQ2OTczNzM2OTZmNmU2NTY0CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVjb21taXNzaW9uZWQgZXhpc3RzCiAgICBibnogYXNzZXJ0X2RyYWZ0X2FuZF9wcm9wb3Nlcl9ib29sX2ZhbHNlQDMKICAgIGludGNfMSAvLyAxCgphc3NlcnRfZHJhZnRfYW5kX3Byb3Bvc2VyX2Jvb2xfbWVyZ2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozNDgtMzUwCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfRFJBRlQgYW5kIG5vdCBzZWxmLmRlY29tbWlzc2lvbmVkLnZhbHVlCiAgICAvLyApLCBlcnIuV1JPTkdfUFJPUE9TQUxfU1RBVFVTCiAgICBhc3NlcnQgLy8gV3JvbmcgUHJvcG9zYWwgU3RhdHVzIG9yIERlY29tbWlzc2lvbmVkCiAgICByZXRzdWIKCmFzc2VydF9kcmFmdF9hbmRfcHJvcG9zZXJfYm9vbF9mYWxzZUAzOgogICAgaW50Y18wIC8vIDAKICAgIGIgYXNzZXJ0X2RyYWZ0X2FuZF9wcm9wb3Nlcl9ib29sX21lcmdlQDQKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuZ2V0X2V4cGVjdGVkX2xvY2tlZF9hbW91bnQocmVxdWVzdGVkX2Ftb3VudDogdWludDY0KSAtPiB1aW50NjQ6CmdldF9leHBlY3RlZF9sb2NrZWRfYW1vdW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQyMy00MjQKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgZ2V0X2V4cGVjdGVkX2xvY2tlZF9hbW91bnQoc2VsZiwgcmVxdWVzdGVkX2Ftb3VudDogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0MjYKICAgIC8vIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1BST1BPU0FMX0NPTU1JVE1FTlRfQlBTKQogICAgcHVzaGJ5dGVzIDB4NzA3MjZmNzA2ZjczNjE2YzVmNjM2ZjZkNmQ2OTc0NmQ2NTZlNzQ1ZjYyNzA3MwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQyNS00MjcKICAgIC8vIHByb3Bvc2FsX2NvbW1pdG1lbnRfYnBzLCBlcnJvciA9IHNlbGYuZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcoCiAgICAvLyAgICAgQnl0ZXMocmVnX2NmZy5HU19LRVlfUFJPUE9TQUxfQ09NTUlUTUVOVF9CUFMpCiAgICAvLyApCiAgICBjYWxsc3ViIGdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDI4CiAgICAvLyBhc3NlcnQgZXJyb3IgPT0gdHlwLkVycm9yKCIiKSwgZXJyLk1JU1NJTkdfQ09ORklHCiAgICBieXRlY18wIC8vIDB4MDAwMAogICAgPT0KICAgIGFzc2VydCAvLyBNaXNzaW5nIENvbmZpZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQyMQogICAgLy8gcmV0dXJuIGFtb3VudCAqIGZyYWN0aW9uX2luX2JwcyAvLyBjb25zdC5CUFMKICAgIGZyYW1lX2RpZyAtMQogICAgKgogICAgaW50YyA0IC8vIDEwMDAwCiAgICAvCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDI5LTQzMgogICAgLy8gcmV0dXJuIHNlbGYucmVsYXRpdmVfdG9fYWJzb2x1dGVfYW1vdW50KAogICAgLy8gICAgIHJlcXVlc3RlZF9hbW91bnQsCiAgICAvLyAgICAgcHJvcG9zYWxfY29tbWl0bWVudF9icHMsCiAgICAvLyApCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcoZ2xvYmFsX3N0YXRlX2tleTogYnl0ZXMpIC0+IHVpbnQ2NCwgYnl0ZXM6CmdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ2NS00NjgKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcoCiAgICAvLyAgICAgc2VsZiwgZ2xvYmFsX3N0YXRlX2tleTogQnl0ZXMKICAgIC8vICkgLT4gdHVwbGVbVUludDY0LCB0eXAuRXJyb3JdOgogICAgcHJvdG8gMSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDcwCiAgICAvLyBzZWxmLnJlZ2lzdHJ5X2FwcF9pZC52YWx1ZSwgZ2xvYmFsX3N0YXRlX2tleQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gMHg3MjY1Njc2OTczNzQ3Mjc5NWY2MTcwNzA1ZjY5NjQKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5yZWdpc3RyeV9hcHBfaWQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDY5LTQ3MQogICAgLy8gdmFsdWUsIGV4aXN0cyA9IEFwcEdsb2JhbC5nZXRfZXhfdWludDY0KAogICAgLy8gICAgIHNlbGYucmVnaXN0cnlfYXBwX2lkLnZhbHVlLCBnbG9iYWxfc3RhdGVfa2V5CiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDcyCiAgICAvLyBlcnJvciA9IHR5cC5FcnJvcigiIikKICAgIGJ5dGVjXzAgLy8gMHgwMDAwCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDczCiAgICAvLyBpZiBub3QgZXhpc3RzOgogICAgYm56IGdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ3NAogICAgLy8gZXJyb3IgPSB0eXAuRXJyb3IoZXJyLkFSQ182NV9QUkVGSVggKyBlcnIuTUlTU0lOR19DT05GSUcpCiAgICBwdXNoYnl0ZXMgMHgwMDEyNDU1MjUyM2E0ZDY5NzM3MzY5NmU2NzIwNDM2ZjZlNjY2OTY3CiAgICBmcmFtZV9idXJ5IDEKCmdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0NzUKICAgIC8vIHJldHVybiB2YWx1ZSwgZXJyb3IKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgMQogICAgdW5jb3ZlciAzCiAgICB1bmNvdmVyIDMKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5nZXRfYnl0ZXNfZnJvbV9yZWdpc3RyeV9jb25maWcoZ2xvYmFsX3N0YXRlX2tleTogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRfYnl0ZXNfZnJvbV9yZWdpc3RyeV9jb25maWc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDc3LTQ3OAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBnZXRfYnl0ZXNfZnJvbV9yZWdpc3RyeV9jb25maWcoc2VsZiwgZ2xvYmFsX3N0YXRlX2tleTogQnl0ZXMpIC0+IEJ5dGVzOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDgwCiAgICAvLyBzZWxmLnJlZ2lzdHJ5X2FwcF9pZC52YWx1ZSwgZ2xvYmFsX3N0YXRlX2tleQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gMHg3MjY1Njc2OTczNzQ3Mjc5NWY2MTcwNzA1ZjY5NjQKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5yZWdpc3RyeV9hcHBfaWQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDc5LTQ4MQogICAgLy8gdmFsdWUsIGV4aXN0cyA9IEFwcEdsb2JhbC5nZXRfZXhfYnl0ZXMoCiAgICAvLyAgICAgc2VsZi5yZWdpc3RyeV9hcHBfaWQudmFsdWUsIGdsb2JhbF9zdGF0ZV9rZXkKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0ODIKICAgIC8vIGFzc2VydCBleGlzdHMsIGVyci5NSVNTSU5HX0NPTkZJRwogICAgYXNzZXJ0IC8vIE1pc3NpbmcgQ29uZmlnCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDgzCiAgICAvLyByZXR1cm4gdmFsdWUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5jaGVja19yZWdpc3RyeV9ub3RfcGF1c2VkKCkgLT4gdm9pZDoKY2hlY2tfcmVnaXN0cnlfbm90X3BhdXNlZDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0ODgKICAgIC8vIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1BBVVNFRF9SRUdJU1RSWSkKICAgIHB1c2hieXRlcyAweDcwNjE3NTczNjU2NDVmNzI2NTY3Njk3Mzc0NzI3OQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ4Ny00ODkKICAgIC8vIHJlZ2lzdHJ5X3BhdXNlZCwgZXJyb3IgPSBzZWxmLmdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnKAogICAgLy8gICAgIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1BBVVNFRF9SRUdJU1RSWSkKICAgIC8vICkKICAgIGNhbGxzdWIgZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0OTEKICAgIC8vIGFzc2VydCBlcnJvciA9PSB0eXAuRXJyb3IoIiIpLCBlcnIuTUlTU0lOR19DT05GSUcKICAgIGJ5dGVjXzAgLy8gMHgwMDAwCiAgICA9PQogICAgYXNzZXJ0IC8vIE1pc3NpbmcgQ29uZmlnCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDkyCiAgICAvLyBhc3NlcnQgbm90IHJlZ2lzdHJ5X3BhdXNlZCwgZXJyLlBBVVNFRF9SRUdJU1RSWQogICAgIQogICAgYXNzZXJ0IC8vIFJlZ2lzdHJ5J3Mgbm9uLWFkbWluIG1ldGhvZHMgYXJlIHBhdXNlZAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLmlzX3Byb3Bvc2VyKCkgLT4gdWludDY0Ogppc19wcm9wb3NlcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1MDAKICAgIC8vIHJldHVybiBUeG4uc2VuZGVyID09IHNlbGYucHJvcG9zZXIudmFsdWUKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vIDB4NzA3MjZmNzA2ZjczNjU3MgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnByb3Bvc2VyIGV4aXN0cwogICAgPT0KICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5pc194Z292X2RhZW1vbigpIC0+IHVpbnQ2NDoKaXNfeGdvdl9kYWVtb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTEwCiAgICAvLyByZXR1cm4gVHhuLnNlbmRlciA9PSBBY2NvdW50KAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjUxMQogICAgLy8gc2VsZi5nZXRfYnl0ZXNfZnJvbV9yZWdpc3RyeV9jb25maWcoQnl0ZXMocmVnX2NmZy5HU19LRVlfWEdPVl9EQUVNT04pKQogICAgYnl0ZWMgMjkgLy8gMHg3ODY3NmY3NjVmNjQ2MTY1NmQ2ZjZlCiAgICBjYWxsc3ViIGdldF9ieXRlc19mcm9tX3JlZ2lzdHJ5X2NvbmZpZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjUxMC01MTIKICAgIC8vIHJldHVybiBUeG4uc2VuZGVyID09IEFjY291bnQoCiAgICAvLyAgICAgc2VsZi5nZXRfYnl0ZXNfZnJvbV9yZWdpc3RyeV9jb25maWcoQnl0ZXMocmVnX2NmZy5HU19LRVlfWEdPVl9EQUVNT04pKQogICAgLy8gKQogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgID09CiAgICBhc3NlcnQgLy8gQWRkcmVzcyBsZW5ndGggaXMgMzIgYnl0ZXMKICAgID09CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuaXNfcmVnaXN0cnlfY2FsbCgpIC0+IHVpbnQ2NDoKaXNfcmVnaXN0cnlfY2FsbDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1MTYKICAgIC8vIHJldHVybiBHbG9iYWwuY2FsbGVyX2FwcGxpY2F0aW9uX2lkID09IHNlbGYucmVnaXN0cnlfYXBwX2lkLnZhbHVlCiAgICBnbG9iYWwgQ2FsbGVyQXBwbGljYXRpb25JRAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gMHg3MjY1Njc2OTczNzQ3Mjc5NWY2MTcwNzA1ZjY5NjQKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5yZWdpc3RyeV9hcHBfaWQgZXhpc3RzCiAgICA9PQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLnBheShyZWNlaXZlcjogYnl0ZXMsIGFtb3VudDogdWludDY0KSAtPiB2b2lkOgpwYXk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTE4LTUxOQogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBwYXkoc2VsZiwgcmVjZWl2ZXI6IEFjY291bnQsIGFtb3VudDogVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTIwLTUyNAogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHJlY2VpdmVyPXJlY2VpdmVyLAogICAgLy8gICAgIGFtb3VudD1hbW91bnQsCiAgICAvLyAgICAgZmVlPVVJbnQ2NCgwKSwgICMgZW5mb3JjZXMgdGhlIHNlbmRlciB0byBwYXkgdGhlIGZlZQogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgZnJhbWVfZGlnIC0yCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTIwCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICBpbnRjXzEgLy8gcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTIzCiAgICAvLyBmZWU9VUludDY0KDApLCAgIyBlbmZvcmNlcyB0aGUgc2VuZGVyIHRvIHBheSB0aGUgZmVlCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1MjAtNTI0CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9cmVjZWl2ZXIsCiAgICAvLyAgICAgYW1vdW50PWFtb3VudCwKICAgIC8vICAgICBmZWU9VUludDY0KDApLCAgIyBlbmZvcmNlcyB0aGUgc2VuZGVyIHRvIHBheSB0aGUgZmVlCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLnRyYW5zZmVyX2xvY2tlZF9hbW91bnQocmVjZWl2ZXI6IGJ5dGVzKSAtPiB2b2lkOgp0cmFuc2Zlcl9sb2NrZWRfYW1vdW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjUyNi01MjcKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgdHJhbnNmZXJfbG9ja2VkX2Ftb3VudChzZWxmLCByZWNlaXZlcjogQWNjb3VudCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjUyOAogICAgLy8gc2VsZi5wYXkocmVjZWl2ZXIsIHNlbGYubG9ja2VkX2Ftb3VudC52YWx1ZSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxNSAvLyAweDZjNmY2MzZiNjU2NDVmNjE2ZDZmNzU2ZTc0CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubG9ja2VkX2Ftb3VudCBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgc3dhcAogICAgY2FsbHN1YiBwYXkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1MjkKICAgIC8vIHNlbGYubG9ja2VkX2Ftb3VudC52YWx1ZSA9IFVJbnQ2NCgwKQogICAgYnl0ZWMgMTUgLy8gMHg2YzZmNjM2YjY1NjQ1ZjYxNmQ2Zjc1NmU3NAogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuYXNzZXJ0X3NhbWVfYXBwX2FuZF9tZXRob2QoZ3JvdXBfaW5kZXg6IHVpbnQ2NCkgLT4gdm9pZDoKYXNzZXJ0X3NhbWVfYXBwX2FuZF9tZXRob2Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTMxLTUzMgogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBhc3NlcnRfc2FtZV9hcHBfYW5kX21ldGhvZChzZWxmLCBncm91cF9pbmRleDogVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTM0CiAgICAvLyBHVHhuLmFwcGxpY2F0aW9uX2lkKGdyb3VwX2luZGV4KSA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9pZAogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBcHBsaWNhdGlvbklECiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTMzLTUzNQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBHVHhuLmFwcGxpY2F0aW9uX2lkKGdyb3VwX2luZGV4KSA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9pZAogICAgLy8gKSwgZXJyLldST05HX0FQUF9JRAogICAgYXNzZXJ0IC8vIFdyb25nIEFwcCBJRAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjUzNgogICAgLy8gYXNzZXJ0IEdUeG4uYXBwbGljYXRpb25fYXJncyhncm91cF9pbmRleCwgMCkgPT0gVHhuLmFwcGxpY2F0aW9uX2FyZ3MoCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjUzNi01MzgKICAgIC8vIGFzc2VydCBHVHhuLmFwcGxpY2F0aW9uX2FyZ3MoZ3JvdXBfaW5kZXgsIDApID09IFR4bi5hcHBsaWNhdGlvbl9hcmdzKAogICAgLy8gICAgIDAKICAgIC8vICksIGVyci5XUk9OR19NRVRIT0RfQ0FMTAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgPT0KICAgIGFzc2VydCAvLyBXcm9uZyBNZXRob2QgQ2FsbAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLmNyZWF0ZShwcm9wb3NlcjogYnl0ZXMpIC0+IHZvaWQ6CmNyZWF0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1NDAtNTQxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIC8vIGRlZiBjcmVhdGUoc2VsZiwgcHJvcG9zZXI6IGFyYzQuQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjU0OAogICAgLy8gR2xvYmFsLmNhbGxlcl9hcHBsaWNhdGlvbl9pZCAhPSAwCiAgICBnbG9iYWwgQ2FsbGVyQXBwbGljYXRpb25JRAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjU0Ny01NDkKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgR2xvYmFsLmNhbGxlcl9hcHBsaWNhdGlvbl9pZCAhPSAwCiAgICAvLyApLCBlcnIuVU5BVVRIT1JJWkVEICAjIE9ubHkgY2FsbGFibGUgYnkgYW5vdGhlciBjb250cmFjdAogICAgYXNzZXJ0IC8vIFVuYXV0aG9yaXplZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjU1MQogICAgLy8gc2VsZi5wcm9wb3Nlci52YWx1ZSA9IHByb3Bvc2VyLm5hdGl2ZQogICAgYnl0ZWMgNCAvLyAweDcwNzI2ZjcwNmY3MzY1NzIKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1NTIKICAgIC8vIHNlbGYucmVnaXN0cnlfYXBwX2lkLnZhbHVlID0gR2xvYmFsLmNhbGxlcl9hcHBsaWNhdGlvbl9pZAogICAgYnl0ZWMgNyAvLyAweDcyNjU2NzY5NzM3NDcyNzk1ZjYxNzA3MDVmNjk2NAogICAgZ2xvYmFsIENhbGxlckFwcGxpY2F0aW9uSUQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzI1CiAgICAvLyBzZWxmLmdldF9ieXRlc19mcm9tX3JlZ2lzdHJ5X2NvbmZpZyhCeXRlcyhyZWdfY2ZnLkdTX0tFWV9DT01NSVRURUVfSUQpKQogICAgYnl0ZWMgMjEgLy8gMHg2MzZmNmQ2ZDY5NzQ3NDY1NjU1ZjY5NjQKICAgIGNhbGxzdWIgZ2V0X2J5dGVzX2Zyb21fcmVnaXN0cnlfY29uZmlnCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzI3CiAgICAvLyBhc3NlcnQgY29tbWl0dGVlX2lkICE9IHR5cC5CeXRlczMyLmZyb21fYnl0ZXMoYiIiKSwgZXJyLkVNUFRZX0NPTU1JVFRFRV9JRAogICAgZHVwCiAgICBieXRlY18yIC8vIDB4CiAgICAhPQogICAgYXNzZXJ0IC8vIEVtcHR5IENvbW1pdHRlZSBJRAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjMzMAogICAgLy8gQnl0ZXMocmVnX2NmZy5HU19LRVlfQ09NTUlUVEVFX01FTUJFUlMpCiAgICBieXRlYyA4IC8vIDB4NjM2ZjZkNmQ2OTc0NzQ2NTY1NWY2ZDY1NmQ2MjY1NzI3MwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjMyOS0zMzEKICAgIC8vIGNvbW1pdHRlZV9tZW1iZXJzLCBlcnJvciA9IHNlbGYuZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcoCiAgICAvLyAgICAgQnl0ZXMocmVnX2NmZy5HU19LRVlfQ09NTUlUVEVFX01FTUJFUlMpCiAgICAvLyApCiAgICBjYWxsc3ViIGdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzMyCiAgICAvLyBhc3NlcnQgZXJyb3IgPT0gdHlwLkVycm9yKCIiKSwgZXJyLk1JU1NJTkdfQ09ORklHCiAgICBieXRlY18wIC8vIDB4MDAwMAogICAgPT0KICAgIGFzc2VydCAvLyBNaXNzaW5nIENvbmZpZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjMzMwogICAgLy8gYXNzZXJ0IGNvbW1pdHRlZV9tZW1iZXJzID4gVUludDY0KDApLCBlcnIuV1JPTkdfQ09NTUlUVEVFX01FTUJFUlMKICAgIGR1cAogICAgYXNzZXJ0IC8vIFdyb25nIENvbW1pdHRlZSBNZW1iZXJzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzM2CiAgICAvLyBCeXRlcyhyZWdfY2ZnLkdTX0tFWV9DT01NSVRURUVfVk9URVMpCiAgICBieXRlYyAxMCAvLyAweDYzNmY2ZDZkNjk3NDc0NjU2NTVmNzY2Zjc0NjU3MwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjMzNS0zMzcKICAgIC8vIGNvbW1pdHRlZV92b3RlcywgZXJyb3IgPSBzZWxmLmdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnKAogICAgLy8gICAgIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX0NPTU1JVFRFRV9WT1RFUykKICAgIC8vICkKICAgIGNhbGxzdWIgZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozMzgKICAgIC8vIGFzc2VydCBlcnJvciA9PSB0eXAuRXJyb3IoIiIpLCBlcnIuTUlTU0lOR19DT05GSUcKICAgIGJ5dGVjXzAgLy8gMHgwMDAwCiAgICA9PQogICAgYXNzZXJ0IC8vIE1pc3NpbmcgQ29uZmlnCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzM5CiAgICAvLyBhc3NlcnQgY29tbWl0dGVlX3ZvdGVzID4gVUludDY0KDApLCBlcnIuV1JPTkdfQ09NTUlUVEVFX1ZPVEVTCiAgICBkdXAKICAgIGFzc2VydCAvLyBXcm9uZyBDb21taXR0ZWUgVm90ZXMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozNDEKICAgIC8vIHNlbGYuY29tbWl0dGVlX2lkLnZhbHVlID0gY29tbWl0dGVlX2lkLmNvcHkoKQogICAgYnl0ZWMgMjEgLy8gMHg2MzZmNmQ2ZDY5NzQ3NDY1NjU1ZjY5NjQKICAgIHVuY292ZXIgMwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozNDIKICAgIC8vIHNlbGYuY29tbWl0dGVlX21lbWJlcnMudmFsdWUgPSBjb21taXR0ZWVfbWVtYmVycwogICAgYnl0ZWMgOCAvLyAweDYzNmY2ZDZkNjk3NDc0NjU2NTVmNmQ2NTZkNjI2NTcyNzMKICAgIHVuY292ZXIgMgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozNDMKICAgIC8vIHNlbGYuY29tbWl0dGVlX3ZvdGVzLnZhbHVlID0gY29tbWl0dGVlX3ZvdGVzCiAgICBieXRlYyAxMCAvLyAweDYzNmY2ZDZkNjk3NDc0NjU2NTVmNzY2Zjc0NjU3MwogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5zdWJtaXQocGF5bWVudDogdWludDY0LCB0aXRsZTogYnl0ZXMsIGZ1bmRpbmdfdHlwZTogYnl0ZXMsIHJlcXVlc3RlZF9hbW91bnQ6IGJ5dGVzLCBmb2N1czogYnl0ZXMpIC0+IHZvaWQ6CnN1Ym1pdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1NTYtNTY0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIHN1Ym1pdCgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIHBheW1lbnQ6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uLAogICAgLy8gICAgIHRpdGxlOiBhcmM0LlN0cmluZywKICAgIC8vICAgICBmdW5kaW5nX3R5cGU6IGFyYzQuVUludDY0LAogICAgLy8gICAgIHJlcXVlc3RlZF9hbW91bnQ6IGFyYzQuVUludDY0LAogICAgLy8gICAgIGZvY3VzOiBhcmM0LlVJbnQ4LAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gNSAwCiAgICBieXRlY18yIC8vICIiCiAgICBkdXBuIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1ODkKICAgIC8vIHNlbGYuY2hlY2tfcmVnaXN0cnlfbm90X3BhdXNlZCgpCiAgICBjYWxsc3ViIGNoZWNrX3JlZ2lzdHJ5X25vdF9wYXVzZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozODEKICAgIC8vIGFzc2VydCBzZWxmLmlzX3Byb3Bvc2VyKCksIGVyci5VTkFVVEhPUklaRUQKICAgIGNhbGxzdWIgaXNfcHJvcG9zZXIKICAgIGFzc2VydCAvLyBVbmF1dGhvcml6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozODMKICAgIC8vIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfRU1QVFkgYW5kIG5vdCBzZWxmLmRlY29tbWlzc2lvbmVkLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN0YXR1cyBleGlzdHMKICAgIGJueiBzdWJtaXRfYm9vbF9mYWxzZUA0CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAweDY0NjU2MzZmNmQ2ZDY5NzM3MzY5NmY2ZTY1NjQKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5kZWNvbW1pc3Npb25lZCBleGlzdHMKICAgIGJueiBzdWJtaXRfYm9vbF9mYWxzZUA0CiAgICBpbnRjXzEgLy8gMQoKc3VibWl0X2Jvb2xfbWVyZ2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozODItMzg0CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfRU1QVFkgYW5kIG5vdCBzZWxmLmRlY29tbWlzc2lvbmVkLnZhbHVlCiAgICAvLyApLCBlcnIuV1JPTkdfUFJPUE9TQUxfU1RBVFVTCiAgICBhc3NlcnQgLy8gV3JvbmcgUHJvcG9zYWwgU3RhdHVzIG9yIERlY29tbWlzc2lvbmVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTk0CiAgICAvLyB0aXRsZS5uYXRpdmUsIGZ1bmRpbmdfdHlwZS5uYXRpdmUsIHJlcXVlc3RlZF9hbW91bnQubmF0aXZlCiAgICBmcmFtZV9kaWcgLTQKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9idXJ5IC00CiAgICBmcmFtZV9kaWcgLTMKICAgIGJ0b2kKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIGZyYW1lX2J1cnkgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjM5NAogICAgLy8gYXNzZXJ0IHRpdGxlLmJ5dGVzLmxlbmd0aCA8PSBjb25zdC5USVRMRV9NQVhfQllURVMsIGVyci5XUk9OR19USVRMRV9MRU5HVEgKICAgIGZyYW1lX2RpZyAtNAogICAgbGVuCiAgICBwdXNoaW50IDEyMyAvLyAxMjMKICAgIDw9CiAgICBhc3NlcnQgLy8gV3JvbmcgVGl0bGUgbGVuZ3RoCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6Mzk1CiAgICAvLyBhc3NlcnQgdGl0bGUgIT0gIiIsIGVyci5XUk9OR19USVRMRV9MRU5HVEgKICAgIGZyYW1lX2RpZyAtNAogICAgYnl0ZWNfMiAvLyAiIgogICAgIT0KICAgIGFzc2VydCAvLyBXcm9uZyBUaXRsZSBsZW5ndGgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozOTgKICAgIC8vIGZ1bmRpbmdfdHlwZSA9PSBlbm0uRlVORElOR19QUk9BQ1RJVkUKICAgIGludGNfMiAvLyAxMAogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozOTgtMzk5CiAgICAvLyBmdW5kaW5nX3R5cGUgPT0gZW5tLkZVTkRJTkdfUFJPQUNUSVZFCiAgICAvLyBvciBmdW5kaW5nX3R5cGUgPT0gZW5tLkZVTkRJTkdfUkVUUk9BQ1RJVkUKICAgIGJueiBzdWJtaXRfYm9vbF90cnVlQDkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozOTkKICAgIC8vIG9yIGZ1bmRpbmdfdHlwZSA9PSBlbm0uRlVORElOR19SRVRST0FDVElWRQogICAgZnJhbWVfZGlnIDAKICAgIGludGNfMyAvLyAyMAogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozOTgtMzk5CiAgICAvLyBmdW5kaW5nX3R5cGUgPT0gZW5tLkZVTkRJTkdfUFJPQUNUSVZFCiAgICAvLyBvciBmdW5kaW5nX3R5cGUgPT0gZW5tLkZVTkRJTkdfUkVUUk9BQ1RJVkUKICAgIGJ6IHN1Ym1pdF9ib29sX2ZhbHNlQDEwCgpzdWJtaXRfYm9vbF90cnVlQDk6CiAgICBpbnRjXzEgLy8gMQoKc3VibWl0X2Jvb2xfbWVyZ2VAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6Mzk3LTQwMAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBmdW5kaW5nX3R5cGUgPT0gZW5tLkZVTkRJTkdfUFJPQUNUSVZFCiAgICAvLyAgICAgb3IgZnVuZGluZ190eXBlID09IGVubS5GVU5ESU5HX1JFVFJPQUNUSVZFCiAgICAvLyApLCBlcnIuV1JPTkdfRlVORElOR19UWVBFCiAgICBhc3NlcnQgLy8gV3JvbmcgRnVuZGluZyBUeXBlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDAzCiAgICAvLyBCeXRlcyhyZWdfY2ZnLkdTX0tFWV9NSU5fUkVRVUVTVEVEX0FNT1VOVCkKICAgIHB1c2hieXRlcyAweDZkNjk2ZTVmNzI2NTcxNzU2NTczNzQ2NTY0NWY2MTZkNmY3NTZlNzQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0MDItNDA0CiAgICAvLyBtaW5fcmVxdWVzdGVkX2Ftb3VudCwgZXJyb3IgPSBzZWxmLmdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnKAogICAgLy8gICAgIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX01JTl9SRVFVRVNURURfQU1PVU5UKQogICAgLy8gKQogICAgY2FsbHN1YiBnZXRfdWludF9mcm9tX3JlZ2lzdHJ5X2NvbmZpZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQwNQogICAgLy8gYXNzZXJ0IGVycm9yID09IHR5cC5FcnJvcigiIiksIGVyci5NSVNTSU5HX0NPTkZJRwogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgID09CiAgICBhc3NlcnQgLy8gTWlzc2luZyBDb25maWcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0MDgKICAgIC8vIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX01BWF9SRVFVRVNURURfQU1PVU5UX0xBUkdFKQogICAgcHVzaGJ5dGVzIDB4NmQ2MTc4NWY3MjY1NzE3NTY1NzM3NDY1NjQ1ZjYxNmQ2Zjc1NmU3NDVmNmM2MTcyNjc2NQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQwNy00MDkKICAgIC8vIG1heF9yZXF1ZXN0ZWRfYW1vdW50X2xhcmdlLCBlcnJvciA9IHNlbGYuZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcoCiAgICAvLyAgICAgQnl0ZXMocmVnX2NmZy5HU19LRVlfTUFYX1JFUVVFU1RFRF9BTU9VTlRfTEFSR0UpCiAgICAvLyApCiAgICBjYWxsc3ViIGdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDEwCiAgICAvLyBhc3NlcnQgZXJyb3IgPT0gdHlwLkVycm9yKCIiKSwgZXJyLk1JU1NJTkdfQ09ORklHCiAgICBieXRlY18wIC8vIDB4MDAwMAogICAgPT0KICAgIGFzc2VydCAvLyBNaXNzaW5nIENvbmZpZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQxMgogICAgLy8gYXNzZXJ0IHJlcXVlc3RlZF9hbW91bnQgPj0gbWluX3JlcXVlc3RlZF9hbW91bnQsIGVyci5XUk9OR19NSU5fUkVRVUVTVEVEX0FNT1VOVAogICAgZnJhbWVfZGlnIDIKICAgIGR1cAogICAgdW5jb3ZlciAzCiAgICA+PQogICAgYXNzZXJ0IC8vIFJlcXVlc3RlZCBhbW91bnQgaXMgbGVzcyB0aGFuIHRoZSBtaW5pbXVtIHJlcXVlc3RlZCBhbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0MTQKICAgIC8vIHJlcXVlc3RlZF9hbW91bnQgPD0gbWF4X3JlcXVlc3RlZF9hbW91bnRfbGFyZ2UKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICA8PQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQxMy00MTUKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgcmVxdWVzdGVkX2Ftb3VudCA8PSBtYXhfcmVxdWVzdGVkX2Ftb3VudF9sYXJnZQogICAgLy8gKSwgZXJyLldST05HX01BWF9SRVFVRVNURURfQU1PVU5UCiAgICBhc3NlcnQgLy8gUmVxdWVzdGVkIGFtb3VudCBpcyBtb3JlIHRoYW4gdGhlIG1heGltdW0gcmVxdWVzdGVkIGFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQzOAogICAgLy8gZXhwZWN0ZWRfbG9ja19hbW91bnQgPSBzZWxmLmdldF9leHBlY3RlZF9sb2NrZWRfYW1vdW50KHJlcXVlc3RlZF9hbW91bnQpCiAgICBkdXAKICAgIGNhbGxzdWIgZ2V0X2V4cGVjdGVkX2xvY2tlZF9hbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0NDAKICAgIC8vIGFzc2VydCBwYXltZW50LnNlbmRlciA9PSBzZWxmLnByb3Bvc2VyLnZhbHVlLCBlcnIuV1JPTkdfU0VOREVSCiAgICBmcmFtZV9kaWcgLTUKICAgIGd0eG5zIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDQgLy8gMHg3MDcyNmY3MDZmNzM2NTcyCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucHJvcG9zZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIFdyb25nIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ0MgogICAgLy8gcGF5bWVudC5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTUKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0NDEtNDQzCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHBheW1lbnQucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgZXJyLldST05HX1JFQ0VJVkVSCiAgICBhc3NlcnQgLy8gV3JvbmcgUmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0NDQKICAgIC8vIGFzc2VydCBwYXltZW50LmFtb3VudCA9PSBleHBlY3RlZF9sb2NrX2Ftb3VudCwgZXJyLldST05HX0xPQ0tFRF9BTU9VTlQKICAgIGZyYW1lX2RpZyAtNQogICAgZ3R4bnMgQW1vdW50CiAgICA9PQogICAgYXNzZXJ0IC8vIExvY2tlZCBhbW91bnQgaXMgaW5jb3JyZWN0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTk4CiAgICAvLyBzZWxmLnRpdGxlLnZhbHVlID0gdGl0bGUubmF0aXZlCiAgICBieXRlYyAyMyAvLyAweDc0Njk3NDZjNjUKICAgIGZyYW1lX2RpZyAtNAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0NDkKICAgIC8vIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX01BWF9SRVFVRVNURURfQU1PVU5UX1NNQUxMKQogICAgcHVzaGJ5dGVzIDB4NmQ2MTc4NWY3MjY1NzE3NTY1NzM3NDY1NjQ1ZjYxNmQ2Zjc1NmU3NDVmNzM2ZDYxNmM2YwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ0OC00NTAKICAgIC8vIG1heF9yZXF1ZXN0ZWRfYW1vdW50X3NtYWxsLCBlcnJvciA9IHNlbGYuZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcoCiAgICAvLyAgICAgQnl0ZXMocmVnX2NmZy5HU19LRVlfTUFYX1JFUVVFU1RFRF9BTU9VTlRfU01BTEwpCiAgICAvLyApCiAgICBjYWxsc3ViIGdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDUxCiAgICAvLyBhc3NlcnQgZXJyb3IgPT0gdHlwLkVycm9yKCIiKSwgZXJyLk1JU1NJTkdfQ09ORklHCiAgICBieXRlY18wIC8vIDB4MDAwMAogICAgPT0KICAgIGFzc2VydCAvLyBNaXNzaW5nIENvbmZpZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ1NAogICAgLy8gQnl0ZXMocmVnX2NmZy5HU19LRVlfTUFYX1JFUVVFU1RFRF9BTU9VTlRfTUVESVVNKQogICAgcHVzaGJ5dGVzIDB4NmQ2MTc4NWY3MjY1NzE3NTY1NzM3NDY1NjQ1ZjYxNmQ2Zjc1NmU3NDVmNmQ2NTY0Njk3NTZkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDUzLTQ1NQogICAgLy8gbWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVtLCBlcnJvciA9IHNlbGYuZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcoCiAgICAvLyAgICAgQnl0ZXMocmVnX2NmZy5HU19LRVlfTUFYX1JFUVVFU1RFRF9BTU9VTlRfTUVESVVNKQogICAgLy8gKQogICAgY2FsbHN1YiBnZXRfdWludF9mcm9tX3JlZ2lzdHJ5X2NvbmZpZwogICAgc3dhcAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDU2CiAgICAvLyBhc3NlcnQgZXJyb3IgPT0gdHlwLkVycm9yKCIiKSwgZXJyLk1JU1NJTkdfQ09ORklHCiAgICBieXRlY18wIC8vIDB4MDAwMAogICAgPT0KICAgIGFzc2VydCAvLyBNaXNzaW5nIENvbmZpZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ1OAogICAgLy8gaWYgcmVxdWVzdGVkX2Ftb3VudCA8PSBtYXhfcmVxdWVzdGVkX2Ftb3VudF9zbWFsbDoKICAgIDw9CiAgICBieiBzdWJtaXRfZWxzZV9ib2R5QDE3CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDU5CiAgICAvLyBzZWxmLmZ1bmRpbmdfY2F0ZWdvcnkudmFsdWUgPSBVSW50NjQoZW5tLkZVTkRJTkdfQ0FURUdPUllfU01BTEwpCiAgICBieXRlYyA1IC8vIDB4NjY3NTZlNjQ2OTZlNjc1ZjYzNjE3NDY1Njc2ZjcyNzkKICAgIGludGNfMiAvLyAxMAogICAgYXBwX2dsb2JhbF9wdXQKCnN1Ym1pdF9hZnRlcl9pZl9lbHNlQDIwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjYwMAogICAgLy8gc2VsZi5mdW5kaW5nX3R5cGUudmFsdWUgPSBmdW5kaW5nX3R5cGUubmF0aXZlCiAgICBieXRlYyAyNiAvLyAweDY2NzU2ZTY0Njk2ZTY3NWY3NDc5NzA2NQogICAgZnJhbWVfZGlnIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjAxCiAgICAvLyBzZWxmLnJlcXVlc3RlZF9hbW91bnQudmFsdWUgPSByZXF1ZXN0ZWRfYW1vdW50Lm5hdGl2ZQogICAgYnl0ZWMgMjcgLy8gMHg3MjY1NzE3NTY1NzM3NDY1NjQ1ZjYxNmQ2Zjc1NmU3NAogICAgZnJhbWVfZGlnIDIKICAgIGR1cAogICAgY292ZXIgMgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2MDIKICAgIC8vIHNlbGYuZm9jdXMudmFsdWUgPSBmb2N1cy5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgYnl0ZWMgMjUgLy8gMHg2NjZmNjM3NTczCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjYwMy02MDUKICAgIC8vIHNlbGYubG9ja2VkX2Ftb3VudC52YWx1ZSA9IHNlbGYuZ2V0X2V4cGVjdGVkX2xvY2tlZF9hbW91bnQoCiAgICAvLyAgICAgcmVxdWVzdGVkX2Ftb3VudC5uYXRpdmUKICAgIC8vICkKICAgIGNhbGxzdWIgZ2V0X2V4cGVjdGVkX2xvY2tlZF9hbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2MDMKICAgIC8vIHNlbGYubG9ja2VkX2Ftb3VudC52YWx1ZSA9IHNlbGYuZ2V0X2V4cGVjdGVkX2xvY2tlZF9hbW91bnQoCiAgICBieXRlYyAxNSAvLyAweDZjNmY2MzZiNjU2NDVmNjE2ZDZmNzU2ZTc0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjAzLTYwNQogICAgLy8gc2VsZi5sb2NrZWRfYW1vdW50LnZhbHVlID0gc2VsZi5nZXRfZXhwZWN0ZWRfbG9ja2VkX2Ftb3VudCgKICAgIC8vICAgICByZXF1ZXN0ZWRfYW1vdW50Lm5hdGl2ZQogICAgLy8gKQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2MDYKICAgIC8vIHNlbGYuc3VibWlzc2lvbl90cy52YWx1ZSA9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICBieXRlYyAxOSAvLyAweDczNzU2MjZkNjk3MzczNjk2ZjZlNWY3NDY5NmQ2NTczNzQ2MTZkNzAKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjA3CiAgICAvLyBzZWxmLnN0YXR1cy52YWx1ZSA9IFVJbnQ2NChlbm0uU1RBVFVTX0RSQUZUKQogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgaW50Y18yIC8vIDEwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgpzdWJtaXRfZWxzZV9ib2R5QDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ2MAogICAgLy8gZWxpZiByZXF1ZXN0ZWRfYW1vdW50IDw9IG1heF9yZXF1ZXN0ZWRfYW1vdW50X21lZGl1bToKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9kaWcgMQogICAgPD0KICAgIGJ6IHN1Ym1pdF9lbHNlX2JvZHlAMTkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0NjEKICAgIC8vIHNlbGYuZnVuZGluZ19jYXRlZ29yeS52YWx1ZSA9IFVJbnQ2NChlbm0uRlVORElOR19DQVRFR09SWV9NRURJVU0pCiAgICBieXRlYyA1IC8vIDB4NjY3NTZlNjQ2OTZlNjc1ZjYzNjE3NDY1Njc2ZjcyNzkKICAgIGludGNfMyAvLyAyMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIGIgc3VibWl0X2FmdGVyX2lmX2Vsc2VAMjAKCnN1Ym1pdF9lbHNlX2JvZHlAMTk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDYzCiAgICAvLyBzZWxmLmZ1bmRpbmdfY2F0ZWdvcnkudmFsdWUgPSBVSW50NjQoZW5tLkZVTkRJTkdfQ0FURUdPUllfTEFSR0UpCiAgICBieXRlYyA1IC8vIDB4NjY3NTZlNjQ2OTZlNjc1ZjYzNjE3NDY1Njc2ZjcyNzkKICAgIHB1c2hpbnQgMzMgLy8gMzMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICBiIHN1Ym1pdF9hZnRlcl9pZl9lbHNlQDIwCgpzdWJtaXRfYm9vbF9mYWxzZUAxMDoKICAgIGludGNfMCAvLyAwCiAgICBiIHN1Ym1pdF9ib29sX21lcmdlQDExCgpzdWJtaXRfYm9vbF9mYWxzZUA0OgogICAgaW50Y18wIC8vIDAKICAgIGIgc3VibWl0X2Jvb2xfbWVyZ2VANQoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC51cGxvYWRfbWV0YWRhdGEocGF5bG9hZDogYnl0ZXMsIGlzX2ZpcnN0X2luX2dyb3VwOiBieXRlcykgLT4gdm9pZDoKdXBsb2FkX21ldGFkYXRhOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjYwOS02MTIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgdXBsb2FkX21ldGFkYXRhKAogICAgLy8gICAgIHNlbGYsIHBheWxvYWQ6IGFyYzQuRHluYW1pY0J5dGVzLCBpc19maXJzdF9pbl9ncm91cDogYXJjNC5Cb29sCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2MjYKICAgIC8vIHNlbGYuY2hlY2tfcmVnaXN0cnlfbm90X3BhdXNlZCgpCiAgICBjYWxsc3ViIGNoZWNrX3JlZ2lzdHJ5X25vdF9wYXVzZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozNzMKICAgIC8vIHNlbGYuYXNzZXJ0X2RyYWZ0X2FuZF9wcm9wb3NlcigpCiAgICBjYWxsc3ViIGFzc2VydF9kcmFmdF9hbmRfcHJvcG9zZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozNzcKICAgIC8vIGFzc2VydCBwYXlsb2FkLmxlbmd0aCA+IDAsIGVyci5FTVBUWV9QQVlMT0FECiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZHVwCiAgICBhc3NlcnQgLy8gRW1wdHkgcGF5bG9hZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjYzMQogICAgLy8gaWYgaXNfZmlyc3RfaW5fZ3JvdXA6CiAgICBmcmFtZV9kaWcgLTEKICAgIGJ5dGVjIDE4IC8vIDB4MDAKICAgICE9CiAgICBieiB1cGxvYWRfbWV0YWRhdGFfZWxzZV9ib2R5QDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2MzItNjMzCiAgICAvLyAjIGNsZWFyIGFuZCB3cml0ZSB0aGUgbWV0YWRhdGEgdG8gdGhlIGJveAogICAgLy8gc2VsZi5tZXRhZGF0YS5kZWxldGUoKQogICAgYnl0ZWMgNiAvLyAiTSIKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjYzNAogICAgLy8gc2VsZi5tZXRhZGF0YS5wdXQocGF5bG9hZC5uYXRpdmUpCiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgMiAwCiAgICBieXRlYyA2IC8vICJNIgogICAgc3dhcAogICAgYm94X3B1dAogICAgcmV0c3ViCgp1cGxvYWRfbWV0YWRhdGFfZWxzZV9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjM2LTYzNwogICAgLy8gIyBhcHBlbmQgdGhlIG1ldGFkYXRhIHRvIHRoZSBib3gKICAgIC8vIG9sZF9zaXplID0gc2VsZi5tZXRhZGF0YS5sZW5ndGgKICAgIGJ5dGVjIDYgLy8gIk0iCiAgICBib3hfbGVuCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5tZXRhZGF0YSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2MzgKICAgIC8vIHNlbGYubWV0YWRhdGEucmVzaXplKHNlbGYubWV0YWRhdGEubGVuZ3RoICsgcGF5bG9hZC5sZW5ndGgpCiAgICBieXRlYyA2IC8vICJNIgogICAgYm94X2xlbgogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubWV0YWRhdGEgZXhpc3RzCiAgICBmcmFtZV9kaWcgMAogICAgKwogICAgYnl0ZWMgNiAvLyAiTSIKICAgIHN3YXAKICAgIGJveF9yZXNpemUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2MzkKICAgIC8vIHNlbGYubWV0YWRhdGEucmVwbGFjZShvbGRfc2l6ZSwgcGF5bG9hZC5uYXRpdmUpCiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgMiAwCiAgICBieXRlYyA2IC8vICJNIgogICAgY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5kcm9wKCkgLT4gYnl0ZXM6CmRyb3A6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjQxLTY0MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBkcm9wKHNlbGYpIC0+IHR5cC5FcnJvcjoKICAgIHByb3RvIDAgMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozNjYKICAgIC8vIGFzc2VydCBzZWxmLmlzX3JlZ2lzdHJ5X2NhbGwoKSwgZXJyLlVOQVVUSE9SSVpFRAogICAgY2FsbHN1YiBpc19yZWdpc3RyeV9jYWxsCiAgICBhc3NlcnQgLy8gVW5hdXRob3JpemVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzY3CiAgICAvLyBpZiBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX0RSQUZUIG9yIHNlbGYuZGVjb21taXNzaW9uZWQudmFsdWU6CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN0YXR1cyBleGlzdHMKICAgIGludGNfMiAvLyAxMAogICAgIT0KICAgIGJueiBkcm9wX2lmX2JvZHlANQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gMHg2NDY1NjM2ZjZkNmQ2OTczNzM2OTZmNmU2NTY0CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVjb21taXNzaW9uZWQgZXhpc3RzCiAgICBieiBkcm9wX2FmdGVyX2lmX2Vsc2VANgoKZHJvcF9pZl9ib2R5QDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzY4CiAgICAvLyByZXR1cm4gdHlwLkVycm9yKGVyci5BUkNfNjVfUFJFRklYICsgZXJyLldST05HX1BST1BPU0FMX1NUQVRVUykKICAgIGJ5dGVjIDIyIC8vIDB4MDAyYjQ1NTI1MjNhNTc3MjZmNmU2NzIwNTA3MjZmNzA2ZjczNjE2YzIwNTM3NDYxNzQ3NTczMjA2ZjcyMjA0NDY1NjM2ZjZkNmQ2OTczNzM2OTZmNmU2NTY0CiAgICBmcmFtZV9idXJ5IDAKCmRyb3BfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuZHJvcF9jaGVja19hdXRob3JpemF0aW9uQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjUyCiAgICAvLyBpZiBlcnJvciAhPSB0eXAuRXJyb3IoIiIpOgogICAgZnJhbWVfZGlnIDAKICAgIGJ5dGVjXzAgLy8gMHgwMDAwCiAgICAhPQogICAgYnogZHJvcF9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2NTMKICAgIC8vIHJldHVybiBlcnJvcgogICAgZnJhbWVfZGlnIDAKICAgIHN3YXAKICAgIHJldHN1YgoKZHJvcF9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjU2CiAgICAvLyByZWNlaXZlcj1zZWxmLnByb3Bvc2VyLnZhbHVlLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDQgLy8gMHg3MDcyNmY3MDZmNzM2NTcyCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucHJvcG9zZXIgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjU1LTY1NwogICAgLy8gc2VsZi50cmFuc2Zlcl9sb2NrZWRfYW1vdW50KAogICAgLy8gICAgIHJlY2VpdmVyPXNlbGYucHJvcG9zZXIudmFsdWUsCiAgICAvLyApCiAgICBjYWxsc3ViIHRyYW5zZmVyX2xvY2tlZF9hbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2NTkKICAgIC8vIHNlbGYubWV0YWRhdGEuZGVsZXRlKCkKICAgIGJ5dGVjIDYgLy8gIk0iCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2NjAKICAgIC8vIHNlbGYuZGVjb21taXNzaW9uZWQudmFsdWUgPSBUcnVlCiAgICBieXRlY18zIC8vIDB4NjQ2NTYzNmY2ZDZkNjk3MzczNjk2ZjZlNjU2NAogICAgaW50Y18xIC8vIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjYyCiAgICAvLyByZXR1cm4gdHlwLkVycm9yKCIiKQogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgIHN3YXAKICAgIHJldHN1YgoKZHJvcF9hZnRlcl9pZl9lbHNlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzY5CiAgICAvLyByZXR1cm4gdHlwLkVycm9yKCIiKQogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjY1MQogICAgLy8gZXJyb3IgPSBzZWxmLmRyb3BfY2hlY2tfYXV0aG9yaXphdGlvbigpCiAgICBiIGRyb3BfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuZHJvcF9jaGVja19hdXRob3JpemF0aW9uQDcKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuZmluYWxpemUoKSAtPiB2b2lkOgpmaW5hbGl6ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2NjQtNjY1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIGZpbmFsaXplKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjgwCiAgICAvLyBzZWxmLmNoZWNrX3JlZ2lzdHJ5X25vdF9wYXVzZWQoKQogICAgY2FsbHN1YiBjaGVja19yZWdpc3RyeV9ub3RfcGF1c2VkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzU1CiAgICAvLyBzZWxmLmFzc2VydF9kcmFmdF9hbmRfcHJvcG9zZXIoKQogICAgY2FsbHN1YiBhc3NlcnRfZHJhZnRfYW5kX3Byb3Bvc2VyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzU3CiAgICAvLyBkaXNjdXNzaW9uX2R1cmF0aW9uID0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgLSBzZWxmLnN1Ym1pc3Npb25fdHMudmFsdWUKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxOSAvLyAweDczNzU2MjZkNjk3MzczNjk2ZjZlNWY3NDY5NmQ2NTczNzQ2MTZkNzAKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zdWJtaXNzaW9uX3RzIGV4aXN0cwogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjM1OQogICAgLy8gc2VsZi5mdW5kaW5nX2NhdGVnb3J5LnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAweDY2NzU2ZTY0Njk2ZTY3NWY2MzYxNzQ2NTY3NmY3Mjc5CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgc3dhcAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRpbmdfY2F0ZWdvcnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjU3CiAgICAvLyBpZiBjYXRlZ29yeSA9PSBlbm0uRlVORElOR19DQVRFR09SWV9TTUFMTDoKICAgIGludGNfMiAvLyAxMAogICAgPT0KICAgIGJ6IGZpbmFsaXplX2Vsc2VfYm9keUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjU5CiAgICAvLyBCeXRlcyhyZWdfY2ZnLkdTX0tFWV9ESVNDVVNTSU9OX0RVUkFUSU9OX1NNQUxMKQogICAgcHVzaGJ5dGVzIDB4NjQ2OTczNjM3NTczNzM2OTZmNmU1ZjY0NzU3MjYxNzQ2OTZmNmU1ZjczNmQ2MTZjNmMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyNTgtMjYwCiAgICAvLyB2YWx1ZSwgZXJyb3IgPSBzZWxmLmdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnKAogICAgLy8gICAgIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX0RJU0NVU1NJT05fRFVSQVRJT05fU01BTEwpCiAgICAvLyApCiAgICBjYWxsc3ViIGdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnCiAgICBmcmFtZV9idXJ5IDAKCmZpbmFsaXplX2FmdGVyX2lmX2Vsc2VANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyNjkKICAgIC8vIGFzc2VydCBlcnJvciA9PSB0eXAuRXJyb3IoIiIpLCBlcnIuTUlTU0lOR19DT05GSUcKICAgIGZyYW1lX2RpZyAwCiAgICBieXRlY18wIC8vIDB4MDAwMAogICAgPT0KICAgIGFzc2VydCAvLyBNaXNzaW5nIENvbmZpZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjM2MgogICAgLy8gYXNzZXJ0IGRpc2N1c3Npb25fZHVyYXRpb24gPj0gbWluaW11bV9kaXNjdXNzaW9uX2R1cmF0aW9uLCBlcnIuVE9PX0VBUkxZCiAgICBmcmFtZV9kaWcgMQogICAgPD0KICAgIGFzc2VydCAvLyBUb28gZWFybHkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2ODQKICAgIC8vIHNlbGYuc3RhdHVzLnZhbHVlID0gVUludDY0KGVubS5TVEFUVVNfRklOQUwpCiAgICBieXRlY18xIC8vIDB4NzM3NDYxNzQ3NTczCiAgICBpbnRjXzMgLy8gMjAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6Njg1CiAgICAvLyBzZWxmLmZpbmFsaXphdGlvbl90cy52YWx1ZSA9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICBieXRlYyAyNCAvLyAweDY2Njk2ZTYxNmM2OTdhNjE3NDY5NmY2ZTVmNzQ2OTZkNjU3Mzc0NjE2ZDcwCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjY4OAogICAgLy8gQnl0ZXMocmVnX2NmZy5HU19LRVlfT1BFTl9QUk9QT1NBTF9GRUUpCiAgICBwdXNoYnl0ZXMgMHg2ZjcwNjU2ZTVmNzA3MjZmNzA2ZjczNjE2YzVmNjY2NTY1CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6Njg3LTY4OQogICAgLy8gb3Blbl9wcm9wb3NhbF9mZWUsIGVycm9yID0gc2VsZi5nZXRfdWludF9mcm9tX3JlZ2lzdHJ5X2NvbmZpZygKICAgIC8vICAgICBCeXRlcyhyZWdfY2ZnLkdTX0tFWV9PUEVOX1BST1BPU0FMX0ZFRSkKICAgIC8vICkKICAgIGNhbGxzdWIgZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2OTAKICAgIC8vIGFzc2VydCBlcnJvciA9PSB0eXAuRXJyb3IoIiIpLCBlcnIuTUlTU0lOR19DT05GSUcKICAgIGJ5dGVjXzAgLy8gMHgwMDAwCiAgICA9PQogICAgYXNzZXJ0IC8vIE1pc3NpbmcgQ29uZmlnCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjkyCiAgICAvLyBhc3NlcnQgc2VsZi5tZXRhZGF0YS5sZW5ndGggPiAwLCBlcnIuTUlTU0lOR19NRVRBREFUQQogICAgYnl0ZWMgNiAvLyAiTSIKICAgIGJveF9sZW4KICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm1ldGFkYXRhIGV4aXN0cwogICAgYXNzZXJ0IC8vIE1pc3NpbmcgTWV0YWRhdGEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2OTUKICAgIC8vIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX0RBRU1PTl9PUFNfRlVORElOR19CUFMpCiAgICBwdXNoYnl0ZXMgMHg2NDYxNjU2ZDZmNmU1ZjZmNzA2NTcyNjE3NDY5NmY2ZTVmNjY3NTZlNjQ2OTZlNjc1ZjYyNzA3MwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjY5NC02OTYKICAgIC8vIGRhZW1vbl9vcHNfZnVuZGluZ19icHMsIGVycm9yID0gc2VsZi5nZXRfdWludF9mcm9tX3JlZ2lzdHJ5X2NvbmZpZygKICAgIC8vICAgICBCeXRlcyhyZWdfY2ZnLkdTX0tFWV9EQUVNT05fT1BTX0ZVTkRJTkdfQlBTKQogICAgLy8gKQogICAgY2FsbHN1YiBnZXRfdWludF9mcm9tX3JlZ2lzdHJ5X2NvbmZpZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjY5NwogICAgLy8gYXNzZXJ0IGVycm9yID09IHR5cC5FcnJvcigiIiksIGVyci5NSVNTSU5HX0NPTkZJRwogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgID09CiAgICBhc3NlcnQgLy8gTWlzc2luZyBDb25maWcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3MDEKICAgIC8vIHNlbGYuZ2V0X2J5dGVzX2Zyb21fcmVnaXN0cnlfY29uZmlnKEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1hHT1ZfREFFTU9OKSkKICAgIGJ5dGVjIDI5IC8vIDB4Nzg2NzZmNzY1ZjY0NjE2NTZkNmY2ZQogICAgY2FsbHN1YiBnZXRfYnl0ZXNfZnJvbV9yZWdpc3RyeV9jb25maWcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3MDAtNzAyCiAgICAvLyByZWNlaXZlcj1BY2NvdW50KAogICAgLy8gICAgIHNlbGYuZ2V0X2J5dGVzX2Zyb21fcmVnaXN0cnlfY29uZmlnKEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1hHT1ZfREFFTU9OKSkKICAgIC8vICksCiAgICBkdXAKICAgIGxlbgogICAgcHVzaGludCAzMiAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBBZGRyZXNzIGxlbmd0aCBpcyAzMiBieXRlcwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQyMQogICAgLy8gcmV0dXJuIGFtb3VudCAqIGZyYWN0aW9uX2luX2JwcyAvLyBjb25zdC5CUFMKICAgIGNvdmVyIDIKICAgICoKICAgIGludGMgNCAvLyAxMDAwMAogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjY5OS03MDYKICAgIC8vIHNlbGYucGF5KAogICAgLy8gICAgIHJlY2VpdmVyPUFjY291bnQoCiAgICAvLyAgICAgICAgIHNlbGYuZ2V0X2J5dGVzX2Zyb21fcmVnaXN0cnlfY29uZmlnKEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1hHT1ZfREFFTU9OKSkKICAgIC8vICAgICApLAogICAgLy8gICAgIGFtb3VudD1zZWxmLnJlbGF0aXZlX3RvX2Fic29sdXRlX2Ftb3VudCgKICAgIC8vICAgICAgICAgb3Blbl9wcm9wb3NhbF9mZWUsIGRhZW1vbl9vcHNfZnVuZGluZ19icHMKICAgIC8vICAgICApLAogICAgLy8gKQogICAgY2FsbHN1YiBwYXkKICAgIHJldHN1YgoKZmluYWxpemVfZWxzZV9ib2R5QDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjYxCiAgICAvLyBlbGlmIGNhdGVnb3J5ID09IGVubS5GVU5ESU5HX0NBVEVHT1JZX01FRElVTToKICAgIGZyYW1lX2RpZyAyCiAgICBpbnRjXzMgLy8gMjAKICAgID09CiAgICBieiBmaW5hbGl6ZV9lbHNlX2JvZHlANQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjI2MwogICAgLy8gQnl0ZXMocmVnX2NmZy5HU19LRVlfRElTQ1VTU0lPTl9EVVJBVElPTl9NRURJVU0pCiAgICBwdXNoYnl0ZXMgMHg2NDY5NzM2Mzc1NzM3MzY5NmY2ZTVmNjQ3NTcyNjE3NDY5NmY2ZTVmNmQ2NTY0Njk3NTZkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjYyLTI2NAogICAgLy8gdmFsdWUsIGVycm9yID0gc2VsZi5nZXRfdWludF9mcm9tX3JlZ2lzdHJ5X2NvbmZpZygKICAgIC8vICAgICBCeXRlcyhyZWdfY2ZnLkdTX0tFWV9ESVNDVVNTSU9OX0RVUkFUSU9OX01FRElVTSkKICAgIC8vICkKICAgIGNhbGxzdWIgZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcKICAgIGZyYW1lX2J1cnkgMAogICAgYiBmaW5hbGl6ZV9hZnRlcl9pZl9lbHNlQDcKCmZpbmFsaXplX2Vsc2VfYm9keUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjI2NwogICAgLy8gQnl0ZXMocmVnX2NmZy5HU19LRVlfRElTQ1VTU0lPTl9EVVJBVElPTl9MQVJHRSkKICAgIHB1c2hieXRlcyAweDY0Njk3MzYzNzU3MzczNjk2ZjZlNWY2NDc1NzI2MTc0Njk2ZjZlNWY2YzYxNzI2NzY1CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjY2LTI2OAogICAgLy8gdmFsdWUsIGVycm9yID0gc2VsZi5nZXRfdWludF9mcm9tX3JlZ2lzdHJ5X2NvbmZpZygKICAgIC8vICAgICBCeXRlcyhyZWdfY2ZnLkdTX0tFWV9ESVNDVVNTSU9OX0RVUkFUSU9OX0xBUkdFKQogICAgLy8gKQogICAgY2FsbHN1YiBnZXRfdWludF9mcm9tX3JlZ2lzdHJ5X2NvbmZpZwogICAgZnJhbWVfYnVyeSAwCiAgICBiIGZpbmFsaXplX2FmdGVyX2lmX2Vsc2VANwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5hc3NpZ25fdm90ZXJzKHZvdGVyczogYnl0ZXMpIC0+IHZvaWQ6CmFzc2lnbl92b3RlcnM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzI3LTczMQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBhc3NpZ25fdm90ZXJzKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgdm90ZXJzOiBhcmM0LkR5bmFtaWNBcnJheVtDb21taXR0ZWVNZW1iZXJdLAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICBieXRlY18yIC8vICIiCiAgICBkdXBuIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyNDUKICAgIC8vIGFzc2VydCBzZWxmLmlzX3hnb3ZfZGFlbW9uKCksIGVyci5VTkFVVEhPUklaRUQKICAgIGNhbGxzdWIgaXNfeGdvdl9kYWVtb24KICAgIGFzc2VydCAvLyBVbmF1dGhvcml6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyNDYKICAgIC8vIGFzc2VydCBzZWxmLnN0YXR1cy52YWx1ZSA9PSBlbm0uU1RBVFVTX0ZJTkFMLCBlcnIuV1JPTkdfUFJPUE9TQUxfU1RBVFVTCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN0YXR1cyBleGlzdHMKICAgIGludGNfMyAvLyAyMAogICAgPT0KICAgIGFzc2VydCAvLyBXcm9uZyBQcm9wb3NhbCBTdGF0dXMgb3IgRGVjb21taXNzaW9uZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3NTEKICAgIC8vIGlmIFR4bi5ncm91cF9pbmRleCA9PSAwOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGJueiBhc3NpZ25fdm90ZXJzX2Vsc2VfYm9keUA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzUyLTc1MwogICAgLy8gIyBDaGVjayB0aGF0IHRoZSBlbnRpcmUgZ3JvdXAgY2FsbHMgdGhlIHNhbWUgYXBwIGFuZCBtZXRob2QKICAgIC8vIGZvciBpIGluIHVyYW5nZSgxLCBHbG9iYWwuZ3JvdXBfc2l6ZSk6CiAgICBnbG9iYWwgR3JvdXBTaXplCiAgICBmcmFtZV9idXJ5IDEKICAgIGludGNfMSAvLyAxCiAgICBmcmFtZV9idXJ5IDAKCmFzc2lnbl92b3RlcnNfZm9yX2hlYWRlckAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc1Mi03NTMKICAgIC8vICMgQ2hlY2sgdGhhdCB0aGUgZW50aXJlIGdyb3VwIGNhbGxzIHRoZSBzYW1lIGFwcCBhbmQgbWV0aG9kCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMSwgR2xvYmFsLmdyb3VwX3NpemUpOgogICAgZnJhbWVfZGlnIDAKICAgIGZyYW1lX2RpZyAxCiAgICA8CiAgICBieiBhc3NpZ25fdm90ZXJzX2FmdGVyX2lmX2Vsc2VANwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc1NAogICAgLy8gc2VsZi5hc3NlcnRfc2FtZV9hcHBfYW5kX21ldGhvZChpKQogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgY2FsbHN1YiBhc3NlcnRfc2FtZV9hcHBfYW5kX21ldGhvZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc1Mi03NTMKICAgIC8vICMgQ2hlY2sgdGhhdCB0aGUgZW50aXJlIGdyb3VwIGNhbGxzIHRoZSBzYW1lIGFwcCBhbmQgbWV0aG9kCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMSwgR2xvYmFsLmdyb3VwX3NpemUpOgogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMAogICAgYiBhc3NpZ25fdm90ZXJzX2Zvcl9oZWFkZXJAMgoKYXNzaWduX3ZvdGVyc19hZnRlcl9pZl9lbHNlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzU5CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uodm90ZXJzLmxlbmd0aCk6CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfYnVyeSAyCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAwCgphc3NpZ25fdm90ZXJzX2Zvcl9oZWFkZXJAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3NTkKICAgIC8vIGZvciBpIGluIHVyYW5nZSh2b3RlcnMubGVuZ3RoKToKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgMgogICAgPAogICAgYnogYXNzaWduX3ZvdGVyc19hZnRlcl9mb3JAMTEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3NjAKICAgIC8vIHNlbGYuX2Fzc2lnbl92b3Rlcih2b3RlcnNbaV0uYWRkcmVzcy5uYXRpdmUsIHZvdGVyc1tpXS52b3RpbmdfcG93ZXIubmF0aXZlKQogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDAKICAgIHB1c2hpbnQgNDAgLy8gNDAKICAgICoKICAgIHB1c2hpbnQgNDAgLy8gNDAKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBleHRyYWN0IDAgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBzd2FwCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjI1MgogICAgLy8gYXNzZXJ0IHZvdGVyIG5vdCBpbiBzZWxmLnZvdGVycywgZXJyLlZPVEVSX0FMUkVBRFlfQVNTSUdORUQKICAgIGJ5dGVjIDI4IC8vICJWIgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAhCiAgICBhc3NlcnQgLy8gVm90ZXIgQWxyZWFkeSBBc3NpZ25lZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjI1MwogICAgLy8gYXNzZXJ0IHZvdGluZ19wb3dlciA+IDAsIGVyci5JTlZBTElEX1ZPVElOR19QT1dFUgogICAgZGlnIDEKICAgIGFzc2VydCAvLyBJbnZhbGlkIFZvdGluZyBQb3dlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjcxMwogICAgLy8gdm90ZXM9YXJjNC5VSW50NjQodm90aW5nX3Bvd2VyKSwKICAgIGRpZyAxCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzE0CiAgICAvLyB2b3RlZD1hcmM0LkJvb2woRmFsc2UpLCAgIyBub3FhOiBGQlQwMDMKICAgIGJ5dGVjIDE4IC8vIDB4MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3MTItNzE1CiAgICAvLyBzZWxmLnZvdGVyc1t2b3Rlcl0gPSB0eXAuVm90ZXJCb3goCiAgICAvLyAgICAgdm90ZXM9YXJjNC5VSW50NjQodm90aW5nX3Bvd2VyKSwKICAgIC8vICAgICB2b3RlZD1hcmM0LkJvb2woRmFsc2UpLCAgIyBub3FhOiBGQlQwMDMKICAgIC8vICkKICAgIGNvbmNhdAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjcxNwogICAgLy8gc2VsZi52b3RlcnNfY291bnQgKz0gMQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDkgLy8gInZvdGVyc19jb3VudCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi52b3RlcnNfY291bnQgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgYnl0ZWMgOSAvLyAidm90ZXJzX2NvdW50IgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3MTgKICAgIC8vIHNlbGYuYXNzaWduZWRfdm90ZXMgKz0gdm90aW5nX3Bvd2VyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTQgLy8gImFzc2lnbmVkX3ZvdGVzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFzc2lnbmVkX3ZvdGVzIGV4aXN0cwogICAgKwogICAgYnl0ZWMgMTQgLy8gImFzc2lnbmVkX3ZvdGVzIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3MjAKICAgIC8vIGlmIHNlbGYudm90ZXJzX2NvdW50ID09IHNlbGYuY29tbWl0dGVlX21lbWJlcnMudmFsdWU6CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgOSAvLyAidm90ZXJzX2NvdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnZvdGVyc19jb3VudCBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA4IC8vIDB4NjM2ZjZkNmQ2OTc0NzQ2NTY1NWY2ZDY1NmQ2MjY1NzI3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvbW1pdHRlZV9tZW1iZXJzIGV4aXN0cwogICAgPT0KICAgIGJ6IGFzc2lnbl92b3RlcnNfYWZ0ZXJfaWZfZWxzZUAxNAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjcyMgogICAgLy8gc2VsZi5hc3NpZ25lZF92b3RlcyA9PSBzZWxmLmNvbW1pdHRlZV92b3Rlcy52YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDE0IC8vICJhc3NpZ25lZF92b3RlcyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hc3NpZ25lZF92b3RlcyBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMCAvLyAweDYzNmY2ZDZkNjk3NDc0NjU2NTVmNzY2Zjc0NjU3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvbW1pdHRlZV92b3RlcyBleGlzdHMKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzIxLTcyMwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBzZWxmLmFzc2lnbmVkX3ZvdGVzID09IHNlbGYuY29tbWl0dGVlX3ZvdGVzLnZhbHVlCiAgICAvLyApLCBlcnIuVk9USU5HX1BPV0VSX01JU01BVENICiAgICBhc3NlcnQgLy8gVm90aW5nIFBvd2VyIE1pc21hdGNoCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzI0CiAgICAvLyBzZWxmLnN0YXR1cy52YWx1ZSA9IFVJbnQ2NChlbm0uU1RBVFVTX1ZPVElORykKICAgIGJ5dGVjXzEgLy8gMHg3Mzc0NjE3NDc1NzMKICAgIHB1c2hpbnQgMjUgLy8gMjUKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzI1CiAgICAvLyBzZWxmLnZvdGVfb3Blbl90cy52YWx1ZSA9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICBieXRlYyAyMCAvLyAweDc2NmY3NDY1NWY2ZjcwNjU2ZTY5NmU2NzVmNzQ2OTZkNjU3Mzc0NjE2ZDcwCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBhcHBfZ2xvYmFsX3B1dAoKYXNzaWduX3ZvdGVyc19hZnRlcl9pZl9lbHNlQDE0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc1OQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHZvdGVycy5sZW5ndGgpOgogICAgZnJhbWVfZGlnIDAKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDAKICAgIGIgYXNzaWduX3ZvdGVyc19mb3JfaGVhZGVyQDgKCmFzc2lnbl92b3RlcnNfYWZ0ZXJfZm9yQDExOgogICAgcmV0c3ViCgphc3NpZ25fdm90ZXJzX2Vsc2VfYm9keUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc1Ni03NTcKICAgIC8vICMgQ2hlY2sgdGhhdCB0aGUgZmlyc3QgdHJhbnNhY3Rpb24gaW4gdGhlIGdyb3VwIGNhbGxzIHRoZSBzYW1lIGFwcCBhbmQgbWV0aG9kCiAgICAvLyBzZWxmLmFzc2VydF9zYW1lX2FwcF9hbmRfbWV0aG9kKFVJbnQ2NCgwKSkKICAgIGludGNfMCAvLyAwCiAgICBjYWxsc3ViIGFzc2VydF9zYW1lX2FwcF9hbmRfbWV0aG9kCiAgICBiIGFzc2lnbl92b3RlcnNfYWZ0ZXJfaWZfZWxzZUA3CgoKLy8gc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLnZvdGUodm90ZXI6IGJ5dGVzLCBhcHByb3ZhbHM6IGJ5dGVzLCByZWplY3Rpb25zOiBieXRlcykgLT4gYnl0ZXM6CnZvdGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzYyLTc2NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiB2b3RlKAogICAgLy8gICAgIHNlbGYsIHZvdGVyOiBhcmM0LkFkZHJlc3MsIGFwcHJvdmFsczogYXJjNC5VSW50NjQsIHJlamVjdGlvbnM6IGFyYzQuVUludDY0CiAgICAvLyApIC0+IHR5cC5FcnJvcjoKICAgIHByb3RvIDMgMQogICAgaW50Y18wIC8vIDAKICAgIGR1cG4gMgogICAgYnl0ZWNfMiAvLyAiIgogICAgZHVwbiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjAwCiAgICAvLyBhc3NlcnQgc2VsZi5pc19yZWdpc3RyeV9jYWxsKCksIGVyci5VTkFVVEhPUklaRUQKICAgIGNhbGxzdWIgaXNfcmVnaXN0cnlfY2FsbAogICAgYXNzZXJ0IC8vIFVuYXV0aG9yaXplZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjIwMgogICAgLy8gaWYgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19WT1RJTkc6CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN0YXR1cyBleGlzdHMKICAgIHB1c2hpbnQgMjUgLy8gMjUKICAgICE9CiAgICBieiB2b3RlX2FmdGVyX2lmX2Vsc2VAMTUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyMDMKICAgIC8vIHJldHVybiB0eXAuRXJyb3IoZXJyLkFSQ182NV9QUkVGSVggKyBlcnIuV1JPTkdfUFJPUE9TQUxfU1RBVFVTKQogICAgYnl0ZWMgMjIgLy8gMHgwMDJiNDU1MjUyM2E1NzcyNmY2ZTY3MjA1MDcyNmY3MDZmNzM2MTZjMjA1Mzc0NjE3NDc1NzMyMDZmNzIyMDQ0NjU2MzZmNmQ2ZDY5NzM3MzY5NmY2ZTY1NjQKICAgIGZyYW1lX2J1cnkgMAoKdm90ZV9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC52b3RlX2NoZWNrX2F1dGhvcml6YXRpb25AMjA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6Nzg1CiAgICAvLyBpZiBlcnJvciAhPSB0eXAuRXJyb3IoIiIpOgogICAgZnJhbWVfZGlnIDAKICAgIGJ5dGVjXzAgLy8gMHgwMDAwCiAgICAhPQogICAgYnogdm90ZV9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3ODYKICAgIC8vIHJldHVybiBlcnJvcgogICAgcmV0c3ViCgp2b3RlX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3ODkKICAgIC8vIHZvdGVyLm5hdGl2ZSwgYXBwcm92YWxzLm5hdGl2ZSwgcmVqZWN0aW9ucy5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgZnJhbWVfYnVyeSAzCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGZyYW1lX2J1cnkgNQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjIxOAogICAgLy8gaWYgdm90ZXIgbm90IGluIHNlbGYudm90ZXJzOgogICAgYnl0ZWMgMjggLy8gIlYiCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IHZvdGVfYWZ0ZXJfaWZfZWxzZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjE5CiAgICAvLyByZXR1cm4gdHlwLkVycm9yKGVyci5BUkNfNjVfUFJFRklYICsgZXJyLlZPVEVSX05PVF9GT1VORCkKICAgIHB1c2hieXRlcyAweDAwMTM0NTUyNTIzYTU2NmY3NDY1NzIyMDZlNmY3NDIwNjY2Zjc1NmU2NAogICAgZnJhbWVfYnVyeSAwCgp2b3RlX2FmdGVyX2lubGluZWRfc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLnZvdGVfaW5wdXRfdmFsaWRhdGlvbkAxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3OTEKICAgIC8vIGlmIGVycm9yICE9IHR5cC5FcnJvcigiIik6CiAgICBmcmFtZV9kaWcgMAogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgICE9CiAgICBieiB2b3RlX2FmdGVyX2lmX2Vsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc5MgogICAgLy8gcmV0dXJuIGVycm9yCiAgICByZXRzdWIKCnZvdGVfYWZ0ZXJfaWZfZWxzZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc5NAogICAgLy8gdm90ZXJfYm94ID0gc2VsZi52b3RlcnNbdm90ZXIubmF0aXZlXS5jb3B5KCkKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnZvdGVycyBlbnRyeSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3OTYKICAgIC8vIHZvdGVzPXZvdGVyX2JveC52b3RlcywKICAgIGR1cAogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6Nzk3CiAgICAvLyB2b3RlZD1hcmM0LkJvb2woVHJ1ZSksICAjIG5vcWE6IEZCVDAwMwogICAgcHVzaGJ5dGVzIDB4ODAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3OTUtNzk4CiAgICAvLyBzZWxmLnZvdGVyc1t2b3Rlci5uYXRpdmVdID0gdHlwLlZvdGVyQm94KAogICAgLy8gICAgIHZvdGVzPXZvdGVyX2JveC52b3RlcywKICAgIC8vICAgICB2b3RlZD1hcmM0LkJvb2woVHJ1ZSksICAjIG5vcWE6IEZCVDAwMwogICAgLy8gKQogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4MDAKICAgIC8vIHNlbGYudm90ZWRfbWVtYmVycy52YWx1ZSArPSAxCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTEgLy8gMHg3NjZmNzQ2NTY0NWY2ZDY1NmQ2MjY1NzI3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnZvdGVkX21lbWJlcnMgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgYnl0ZWMgMTEgLy8gMHg3NjZmNzQ2NTY0NWY2ZDY1NmQ2MjY1NzI3MwogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4MDIKICAgIC8vIG51bGxzID0gdm90ZXJfYm94LnZvdGVzLm5hdGl2ZSAtIGFwcHJvdmFscy5uYXRpdmUgLSByZWplY3Rpb25zLm5hdGl2ZQogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBmcmFtZV9kaWcgMwogICAgZHVwCiAgICBjb3ZlciAyCiAgICAtCiAgICBmcmFtZV9kaWcgNQogICAgZHVwCiAgICBjb3ZlciAzCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODA0CiAgICAvLyBzZWxmLmFwcHJvdmFscy52YWx1ZSArPSBhcHByb3ZhbHMubmF0aXZlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTIgLy8gMHg2MTcwNzA3MjZmNzY2MTZjNzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hcHByb3ZhbHMgZXhpc3RzCiAgICB1bmNvdmVyIDIKICAgICsKICAgIGJ5dGVjIDEyIC8vIDB4NjE3MDcwNzI2Zjc2NjE2YzczCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjgwNQogICAgLy8gc2VsZi5yZWplY3Rpb25zLnZhbHVlICs9IHJlamVjdGlvbnMubmF0aXZlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTMgLy8gMHg3MjY1NmE2NTYzNzQ2OTZmNmU3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnJlamVjdGlvbnMgZXhpc3RzCiAgICB1bmNvdmVyIDIKICAgICsKICAgIGJ5dGVjIDEzIC8vIDB4NzI2NTZhNjU2Mzc0Njk2ZjZlNzMKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODA2CiAgICAvLyBzZWxmLm51bGxzLnZhbHVlICs9IG51bGxzCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTYgLy8gMHg2ZTc1NmM2YzczCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubnVsbHMgZXhpc3RzCiAgICArCiAgICBieXRlYyAxNiAvLyAweDZlNzU2YzZjNzMKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODA4CiAgICAvLyByZXR1cm4gdHlwLkVycm9yKCIiKQogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgp2b3RlX2FmdGVyX2lmX2Vsc2VANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyMjEKICAgIC8vIHZvdGVyX2JveCA9IHNlbGYudm90ZXJzW3ZvdGVyXS5jb3B5KCkKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGZyYW1lX2J1cnkgMgogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudm90ZXJzIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjIyMgogICAgLy8gaWYgdm90ZXJfYm94LnZvdGVkOgogICAgcHVzaGludCA2NCAvLyA2NAogICAgZ2V0Yml0CiAgICBieXRlYyAxOCAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjIDE4IC8vIDB4MDAKICAgICE9CiAgICBieiB2b3RlX2FmdGVyX2lmX2Vsc2VAOQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjIyMwogICAgLy8gcmV0dXJuIHR5cC5FcnJvcihlcnIuQVJDXzY1X1BSRUZJWCArIGVyci5WT1RFUl9BTFJFQURZX1ZPVEVEKQogICAgcHVzaGJ5dGVzIDB4MDAxNzQ1NTI1MjNhNTY2Zjc0NjU3MjIwNjE2YzcyNjU2MTY0NzkyMDc2NmY3NDY1NjQKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc4OC03OTAKICAgIC8vIGVycm9yID0gc2VsZi52b3RlX2lucHV0X3ZhbGlkYXRpb24oCiAgICAvLyAgICAgdm90ZXIubmF0aXZlLCBhcHByb3ZhbHMubmF0aXZlLCByZWplY3Rpb25zLm5hdGl2ZQogICAgLy8gKQogICAgYiB2b3RlX2FmdGVyX2lubGluZWRfc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLnZvdGVfaW5wdXRfdmFsaWRhdGlvbkAxMgoKdm90ZV9hZnRlcl9pZl9lbHNlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjI1CiAgICAvLyBpZiBhcHByb3ZhbHMgKyByZWplY3Rpb25zID4gdm90ZXJfYm94LnZvdGVzOgogICAgZnJhbWVfZGlnIDIKICAgIGV4dHJhY3QgMCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2RpZyA1CiAgICArCiAgICBpdG9iCiAgICBiPAogICAgYnogdm90ZV9hZnRlcl9pZl9lbHNlQDExCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjI2CiAgICAvLyByZXR1cm4gdHlwLkVycm9yKGVyci5BUkNfNjVfUFJFRklYICsgZXJyLlZPVEVTX0VYQ0VFREVEKQogICAgcHVzaGJ5dGVzIDB4MDAxMjQ1NTI1MjNhNTY2Zjc0NjU3MzIwNjU3ODYzNjU2NTY0NjU2NAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6Nzg4LTc5MAogICAgLy8gZXJyb3IgPSBzZWxmLnZvdGVfaW5wdXRfdmFsaWRhdGlvbigKICAgIC8vICAgICB2b3Rlci5uYXRpdmUsIGFwcHJvdmFscy5uYXRpdmUsIHJlamVjdGlvbnMubmF0aXZlCiAgICAvLyApCiAgICBiIHZvdGVfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwudm90ZV9pbnB1dF92YWxpZGF0aW9uQDEyCgp2b3RlX2FmdGVyX2lmX2Vsc2VAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjI4CiAgICAvLyByZXR1cm4gdHlwLkVycm9yKCIiKQogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc4OC03OTAKICAgIC8vIGVycm9yID0gc2VsZi52b3RlX2lucHV0X3ZhbGlkYXRpb24oCiAgICAvLyAgICAgdm90ZXIubmF0aXZlLCBhcHByb3ZhbHMubmF0aXZlLCByZWplY3Rpb25zLm5hdGl2ZQogICAgLy8gKQogICAgYiB2b3RlX2FmdGVyX2lubGluZWRfc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLnZvdGVfaW5wdXRfdmFsaWRhdGlvbkAxMgoKdm90ZV9hZnRlcl9pZl9lbHNlQDE1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjIwNQogICAgLy8gaXNfdm90aW5nX29wZW4sIGVycm9yID0gc2VsZi5pc192b3Rpbmdfb3BlbigpCiAgICBjYWxsc3ViIGlzX3ZvdGluZ19vcGVuCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGZyYW1lX2J1cnkgMAogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjA2CiAgICAvLyBpZiBlcnJvciAhPSB0eXAuRXJyb3IoIiIpOgogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgICE9CiAgICBibnogdm90ZV9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC52b3RlX2NoZWNrX2F1dGhvcml6YXRpb25AMjAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyMDkKICAgIC8vIGlmIG5vdCBpc192b3Rpbmdfb3BlbjoKICAgIGZyYW1lX2RpZyA0CiAgICBibnogdm90ZV9hZnRlcl9pZl9lbHNlQDE5CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjEwCiAgICAvLyByZXR1cm4gdHlwLkVycm9yKGVyci5BUkNfNjVfUFJFRklYICsgZXJyLlZPVElOR19QRVJJT0RfRVhQSVJFRCkKICAgIHB1c2hieXRlcyAweDAwMTk0NTUyNTIzYTU2NmY3NDY5NmU2NzIwNTA2NTcyNjk2ZjY0MjA0NTc4NzA2OTcyNjU2NAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6Nzg0CiAgICAvLyBlcnJvciA9IHNlbGYudm90ZV9jaGVja19hdXRob3JpemF0aW9uKCkKICAgIGIgdm90ZV9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC52b3RlX2NoZWNrX2F1dGhvcml6YXRpb25AMjAKCnZvdGVfYWZ0ZXJfaWZfZWxzZUAxOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyMTIKICAgIC8vIHJldHVybiB0eXAuRXJyb3IoIiIpCiAgICBieXRlY18wIC8vIDB4MDAwMAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6Nzg0CiAgICAvLyBlcnJvciA9IHNlbGYudm90ZV9jaGVja19hdXRob3JpemF0aW9uKCkKICAgIGIgdm90ZV9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC52b3RlX2NoZWNrX2F1dGhvcml6YXRpb25AMjAKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuc2NydXRpbnkoKSAtPiB2b2lkOgpzY3J1dGlueToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4MTAtODExCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIHNjcnV0aW55KHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICIiCiAgICBkdXBuIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4MjEKICAgIC8vIHNlbGYuY2hlY2tfcmVnaXN0cnlfbm90X3BhdXNlZCgpCiAgICBjYWxsc3ViIGNoZWNrX3JlZ2lzdHJ5X25vdF9wYXVzZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyMzIKICAgIC8vIGFzc2VydCBzZWxmLnN0YXR1cy52YWx1ZSA9PSBlbm0uU1RBVFVTX1ZPVElORywgZXJyLldST05HX1BST1BPU0FMX1NUQVRVUwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gMHg3Mzc0NjE3NDc1NzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zdGF0dXMgZXhpc3RzCiAgICBwdXNoaW50IDI1IC8vIDI1CiAgICA9PQogICAgYXNzZXJ0IC8vIFdyb25nIFByb3Bvc2FsIFN0YXR1cyBvciBEZWNvbW1pc3Npb25lZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjIzNAogICAgLy8gaXNfdm90aW5nX29wZW4sIGVycm9yID0gc2VsZi5pc192b3Rpbmdfb3BlbigpCiAgICBjYWxsc3ViIGlzX3ZvdGluZ19vcGVuCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjM1CiAgICAvLyBhc3NlcnQgZXJyb3IgPT0gdHlwLkVycm9yKCIiKSwgZXJyLk1JU1NJTkdfQ09ORklHCiAgICBieXRlY18wIC8vIDB4MDAwMAogICAgPT0KICAgIGFzc2VydCAvLyBNaXNzaW5nIENvbmZpZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjIzOAogICAgLy8gbm90IGlzX3ZvdGluZ19vcGVuICAjIHZvdGluZyBwZXJpb2QgaGFzIGVuZGVkCiAgICBieiBzY3J1dGlueV9ib29sX3RydWVAOAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjIzOQogICAgLy8gb3Igc2VsZi52b3RlZF9tZW1iZXJzLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTEgLy8gMHg3NjZmNzQ2NTY0NWY2ZDY1NmQ2MjY1NzI3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnZvdGVkX21lbWJlcnMgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjQwCiAgICAvLyA9PSBzZWxmLmNvbW1pdHRlZV9tZW1iZXJzLnZhbHVlICAjIGFsbCBjb21taXR0ZWUgbWVtYmVycyBoYXZlIHZvdGVkCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgOCAvLyAweDYzNmY2ZDZkNjk3NDc0NjU2NTVmNmQ2NTZkNjI2NTcyNzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jb21taXR0ZWVfbWVtYmVycyBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyMzktMjQwCiAgICAvLyBvciBzZWxmLnZvdGVkX21lbWJlcnMudmFsdWUKICAgIC8vID09IHNlbGYuY29tbWl0dGVlX21lbWJlcnMudmFsdWUgICMgYWxsIGNvbW1pdHRlZSBtZW1iZXJzIGhhdmUgdm90ZWQKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjM4LTI0MAogICAgLy8gbm90IGlzX3ZvdGluZ19vcGVuICAjIHZvdGluZyBwZXJpb2QgaGFzIGVuZGVkCiAgICAvLyBvciBzZWxmLnZvdGVkX21lbWJlcnMudmFsdWUKICAgIC8vID09IHNlbGYuY29tbWl0dGVlX21lbWJlcnMudmFsdWUgICMgYWxsIGNvbW1pdHRlZSBtZW1iZXJzIGhhdmUgdm90ZWQKICAgIGJ6IHNjcnV0aW55X2Jvb2xfZmFsc2VAOQoKc2NydXRpbnlfYm9vbF90cnVlQDg6CiAgICBpbnRjXzEgLy8gMQoKc2NydXRpbnlfYm9vbF9tZXJnZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyMzctMjQxCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIG5vdCBpc192b3Rpbmdfb3BlbiAgIyB2b3RpbmcgcGVyaW9kIGhhcyBlbmRlZAogICAgLy8gICAgIG9yIHNlbGYudm90ZWRfbWVtYmVycy52YWx1ZQogICAgLy8gICAgID09IHNlbGYuY29tbWl0dGVlX21lbWJlcnMudmFsdWUgICMgYWxsIGNvbW1pdHRlZSBtZW1iZXJzIGhhdmUgdm90ZWQKICAgIC8vICksIGVyci5WT1RJTkdfT05HT0lORwogICAgYXNzZXJ0IC8vIFZvdGluZyBPbmdvaW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODI1LTgyNwogICAgLy8gIyBBIGNhdGVnb3J5IGRlcGVuZGVudCBxdW9ydW0gb2YgYWxsIHhHb3YgVm90aW5nIENvbW1pdHRlZSAoMSB4R292LCAxIHZvdGUpIGlzIHJlYWNoZWQuCiAgICAvLyAjIE51bGwgdm90ZXMgYWZmZWN0IHRoaXMgcXVvcnVtLgogICAgLy8gcXVvcnVtX2JwcyA9IHNlbGYuZ2V0X3F1b3J1bShzZWxmLmZ1bmRpbmdfY2F0ZWdvcnkudmFsdWUpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAweDY2NzU2ZTY0Njk2ZTY3NWY2MzYxNzQ2NTY3NmY3Mjc5CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgc3dhcAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBmcmFtZV9idXJ5IDEKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRpbmdfY2F0ZWdvcnkgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6Mjg5CiAgICAvLyBpZiBjYXRlZ29yeSA9PSBlbm0uRlVORElOR19DQVRFR09SWV9TTUFMTDoKICAgIGludGNfMiAvLyAxMAogICAgPT0KICAgIGJ6IHNjcnV0aW55X2Vsc2VfYm9keUAxNAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjI5MQogICAgLy8gQnl0ZXMocmVnX2NmZy5HU19LRVlfUVVPUlVNX1NNQUxMKQogICAgcHVzaGJ5dGVzIDB4NzE3NTZmNzI3NTZkNWY3MzZkNjE2YzZjCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjkwLTI5MgogICAgLy8gdmFsdWUsIGVycm9yID0gc2VsZi5nZXRfdWludF9mcm9tX3JlZ2lzdHJ5X2NvbmZpZygKICAgIC8vICAgICBCeXRlcyhyZWdfY2ZnLkdTX0tFWV9RVU9SVU1fU01BTEwpCiAgICAvLyApCiAgICBjYWxsc3ViIGdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnCiAgICBmcmFtZV9idXJ5IDAKCnNjcnV0aW55X2FmdGVyX2lmX2Vsc2VAMTg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzAxCiAgICAvLyBhc3NlcnQgZXJyb3IgPT0gdHlwLkVycm9yKCIiKSwgZXJyLk1JU1NJTkdfQ09ORklHCiAgICBmcmFtZV9kaWcgMAogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgID09CiAgICBhc3NlcnQgLy8gTWlzc2luZyBDb25maWcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4MjkKICAgIC8vIHNlbGYuY29tbWl0dGVlX21lbWJlcnMudmFsdWUsIHF1b3J1bV9icHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA4IC8vIDB4NjM2ZjZkNmQ2OTc0NzQ2NTY1NWY2ZDY1NmQ2MjY1NzI3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvbW1pdHRlZV9tZW1iZXJzIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQyMQogICAgLy8gcmV0dXJuIGFtb3VudCAqIGZyYWN0aW9uX2luX2JwcyAvLyBjb25zdC5CUFMKICAgICoKICAgIGludGMgNCAvLyAxMDAwMAogICAgLwogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODMyLTgzNAogICAgLy8gIyBBIGNhdGVnb3J5IGRlcGVuZGVudCB3ZWlnaHRlZCBxdW9ydW0gb2YgYWxsIHhHb3YgVm90aW5nIENvbW1pdHRlZSB2b3RpbmcgcG93ZXIgKDEgdm90ZSkgaXMgcmVhY2hlZC4KICAgIC8vICMgTnVsbCB2b3RlcyBhZmZlY3QgdGhpcyBxdW9ydW0uCiAgICAvLyB3ZWlnaHRlZF9xdW9ydW1fYnBzID0gc2VsZi5nZXRfd2VpZ2h0ZWRfcXVvcnVtKHNlbGYuZnVuZGluZ19jYXRlZ29yeS52YWx1ZSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vIDB4NjY3NTZlNjQ2OTZlNjc1ZjYzNjE3NDY1Njc2ZjcyNzkKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBzd2FwCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGZyYW1lX2J1cnkgMQogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGluZ19jYXRlZ29yeSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozMDYKICAgIC8vIGlmIGNhdGVnb3J5ID09IGVubS5GVU5ESU5HX0NBVEVHT1JZX1NNQUxMOgogICAgaW50Y18yIC8vIDEwCiAgICA9PQogICAgYnogc2NydXRpbnlfZWxzZV9ib2R5QDIyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzA4CiAgICAvLyBCeXRlcyhyZWdfY2ZnLkdTX0tFWV9XRUlHSFRFRF9RVU9SVU1fU01BTEwpCiAgICBwdXNoYnl0ZXMgMHg3NzY1Njk2NzY4NzQ2NTY0NWY3MTc1NmY3Mjc1NmQ1ZjczNmQ2MTZjNmMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozMDctMzA5CiAgICAvLyB2YWx1ZSwgZXJyb3IgPSBzZWxmLmdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnKAogICAgLy8gICAgIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1dFSUdIVEVEX1FVT1JVTV9TTUFMTCkKICAgIC8vICkKICAgIGNhbGxzdWIgZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcKICAgIGZyYW1lX2J1cnkgMAoKc2NydXRpbnlfYWZ0ZXJfaWZfZWxzZUAyNjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozMTgKICAgIC8vIGFzc2VydCBlcnJvciA9PSB0eXAuRXJyb3IoIiIpLCBlcnIuTUlTU0lOR19DT05GSUcKICAgIGZyYW1lX2RpZyAwCiAgICBieXRlY18wIC8vIDB4MDAwMAogICAgPT0KICAgIGFzc2VydCAvLyBNaXNzaW5nIENvbmZpZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjgzNQogICAgLy8gdG90YWxfdm90ZXMgPSBzZWxmLmFwcHJvdmFscy52YWx1ZSArIHNlbGYucmVqZWN0aW9ucy52YWx1ZSArIHNlbGYubnVsbHMudmFsdWUKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMiAvLyAweDYxNzA3MDcyNmY3NjYxNmM3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFwcHJvdmFscyBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMyAvLyAweDcyNjU2YTY1NjM3NDY5NmY2ZTczCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucmVqZWN0aW9ucyBleGlzdHMKICAgICsKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxNiAvLyAweDZlNzU2YzZjNzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5udWxscyBleGlzdHMKICAgICsKICAgIGZyYW1lX2J1cnkgNAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjgzNwogICAgLy8gc2VsZi5jb21taXR0ZWVfdm90ZXMudmFsdWUsIHdlaWdodGVkX3F1b3J1bV9icHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMCAvLyAweDYzNmY2ZDZkNjk3NDc0NjU2NTVmNzY2Zjc0NjU3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvbW1pdHRlZV92b3RlcyBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0MjEKICAgIC8vIHJldHVybiBhbW91bnQgKiBmcmFjdGlvbl9pbl9icHMgLy8gY29uc3QuQlBTCiAgICAqCiAgICBpbnRjIDQgLy8gMTAwMDAKICAgIC8KICAgIGZyYW1lX2J1cnkgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojg0MQogICAgLy8gc2VsZi52b3RlZF9tZW1iZXJzLnZhbHVlID49IG1pbmltdW1fdm90ZXJzX3JlcXVpcmVkCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTEgLy8gMHg3NjZmNzQ2NTY0NWY2ZDY1NmQ2MjY1NzI3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnZvdGVkX21lbWJlcnMgZXhpc3RzCiAgICBmcmFtZV9kaWcgMgogICAgPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4NDEtODQ1CiAgICAvLyBzZWxmLnZvdGVkX21lbWJlcnMudmFsdWUgPj0gbWluaW11bV92b3RlcnNfcmVxdWlyZWQKICAgIC8vIGFuZCB0b3RhbF92b3RlcyA+PSBtaW5pbXVtX3ZvdGVzX3JlcXVpcmVkCiAgICAvLyAjIFRoZSByZWxhdGl2ZSBtYWpvcml0eSBvZiBBcHByb3ZlZCBvdmVyIFJlamVjdGVkIHZvdGVzIGlzIHJlYWNoZWQuCiAgICAvLyAjIE51bGwgdm90ZXMgZG8gbm90IGFmZmVjdCB0aGUgcmVsYXRpdmUgbWFqb3JpdHkuCiAgICAvLyBhbmQgc2VsZi5hcHByb3ZhbHMudmFsdWUgPiBzZWxmLnJlamVjdGlvbnMudmFsdWUKICAgIGJ6IHNjcnV0aW55X2Vsc2VfYm9keUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODQyCiAgICAvLyBhbmQgdG90YWxfdm90ZXMgPj0gbWluaW11bV92b3Rlc19yZXF1aXJlZAogICAgZnJhbWVfZGlnIDQKICAgIGZyYW1lX2RpZyAzCiAgICA+PQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojg0MS04NDUKICAgIC8vIHNlbGYudm90ZWRfbWVtYmVycy52YWx1ZSA+PSBtaW5pbXVtX3ZvdGVyc19yZXF1aXJlZAogICAgLy8gYW5kIHRvdGFsX3ZvdGVzID49IG1pbmltdW1fdm90ZXNfcmVxdWlyZWQKICAgIC8vICMgVGhlIHJlbGF0aXZlIG1ham9yaXR5IG9mIEFwcHJvdmVkIG92ZXIgUmVqZWN0ZWQgdm90ZXMgaXMgcmVhY2hlZC4KICAgIC8vICMgTnVsbCB2b3RlcyBkbyBub3QgYWZmZWN0IHRoZSByZWxhdGl2ZSBtYWpvcml0eS4KICAgIC8vIGFuZCBzZWxmLmFwcHJvdmFscy52YWx1ZSA+IHNlbGYucmVqZWN0aW9ucy52YWx1ZQogICAgYnogc2NydXRpbnlfZWxzZV9ib2R5QDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4NDMtODQ1CiAgICAvLyAjIFRoZSByZWxhdGl2ZSBtYWpvcml0eSBvZiBBcHByb3ZlZCBvdmVyIFJlamVjdGVkIHZvdGVzIGlzIHJlYWNoZWQuCiAgICAvLyAjIE51bGwgdm90ZXMgZG8gbm90IGFmZmVjdCB0aGUgcmVsYXRpdmUgbWFqb3JpdHkuCiAgICAvLyBhbmQgc2VsZi5hcHByb3ZhbHMudmFsdWUgPiBzZWxmLnJlamVjdGlvbnMudmFsdWUKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMiAvLyAweDYxNzA3MDcyNmY3NjYxNmM3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFwcHJvdmFscyBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMyAvLyAweDcyNjU2YTY1NjM3NDY5NmY2ZTczCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucmVqZWN0aW9ucyBleGlzdHMKICAgID4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4NDEtODQ1CiAgICAvLyBzZWxmLnZvdGVkX21lbWJlcnMudmFsdWUgPj0gbWluaW11bV92b3RlcnNfcmVxdWlyZWQKICAgIC8vIGFuZCB0b3RhbF92b3RlcyA+PSBtaW5pbXVtX3ZvdGVzX3JlcXVpcmVkCiAgICAvLyAjIFRoZSByZWxhdGl2ZSBtYWpvcml0eSBvZiBBcHByb3ZlZCBvdmVyIFJlamVjdGVkIHZvdGVzIGlzIHJlYWNoZWQuCiAgICAvLyAjIE51bGwgdm90ZXMgZG8gbm90IGFmZmVjdCB0aGUgcmVsYXRpdmUgbWFqb3JpdHkuCiAgICAvLyBhbmQgc2VsZi5hcHByb3ZhbHMudmFsdWUgPiBzZWxmLnJlamVjdGlvbnMudmFsdWUKICAgIGJ6IHNjcnV0aW55X2Vsc2VfYm9keUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODQ3CiAgICAvLyBzZWxmLnN0YXR1cy52YWx1ZSA9IFVJbnQ2NChlbm0uU1RBVFVTX0FQUFJPVkVEKQogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgcHVzaGludCAzMCAvLyAzMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKc2NydXRpbnlfZWxzZV9ib2R5QDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODQ5CiAgICAvLyBzZWxmLnN0YXR1cy52YWx1ZSA9IFVJbnQ2NChlbm0uU1RBVFVTX1JFSkVDVEVEKQogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgcHVzaGludCA0MCAvLyA0MAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4NTEKICAgIC8vIHJlY2VpdmVyPXNlbGYucHJvcG9zZXIudmFsdWUsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAweDcwNzI2ZjcwNmY3MzY1NzIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wcm9wb3NlciBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4NTAtODUyCiAgICAvLyBzZWxmLnRyYW5zZmVyX2xvY2tlZF9hbW91bnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9c2VsZi5wcm9wb3Nlci52YWx1ZSwKICAgIC8vICkKICAgIGNhbGxzdWIgdHJhbnNmZXJfbG9ja2VkX2Ftb3VudAogICAgcmV0c3ViCgpzY3J1dGlueV9lbHNlX2JvZHlAMjI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzEwCiAgICAvLyBlbGlmIGNhdGVnb3J5ID09IGVubS5GVU5ESU5HX0NBVEVHT1JZX01FRElVTToKICAgIGZyYW1lX2RpZyAxCiAgICBpbnRjXzMgLy8gMjAKICAgID09CiAgICBieiBzY3J1dGlueV9lbHNlX2JvZHlAMjQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozMTIKICAgIC8vIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1dFSUdIVEVEX1FVT1JVTV9NRURJVU0pCiAgICBwdXNoYnl0ZXMgMHg3NzY1Njk2NzY4NzQ2NTY0NWY3MTc1NmY3Mjc1NmQ1ZjZkNjU2NDY5NzU2ZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjMxMS0zMTMKICAgIC8vIHZhbHVlLCBlcnJvciA9IHNlbGYuZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcoCiAgICAvLyAgICAgQnl0ZXMocmVnX2NmZy5HU19LRVlfV0VJR0hURURfUVVPUlVNX01FRElVTSkKICAgIC8vICkKICAgIGNhbGxzdWIgZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcKICAgIGZyYW1lX2J1cnkgMAogICAgYiBzY3J1dGlueV9hZnRlcl9pZl9lbHNlQDI2CgpzY3J1dGlueV9lbHNlX2JvZHlAMjQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzE2CiAgICAvLyBCeXRlcyhyZWdfY2ZnLkdTX0tFWV9XRUlHSFRFRF9RVU9SVU1fTEFSR0UpCiAgICBwdXNoYnl0ZXMgMHg3NzY1Njk2NzY4NzQ2NTY0NWY3MTc1NmY3Mjc1NmQ1ZjZjNjE3MjY3NjUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozMTUtMzE3CiAgICAvLyB2YWx1ZSwgZXJyb3IgPSBzZWxmLmdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnKAogICAgLy8gICAgIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1dFSUdIVEVEX1FVT1JVTV9MQVJHRSkKICAgIC8vICkKICAgIGNhbGxzdWIgZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcKICAgIGZyYW1lX2J1cnkgMAogICAgYiBzY3J1dGlueV9hZnRlcl9pZl9lbHNlQDI2CgpzY3J1dGlueV9lbHNlX2JvZHlAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjkzCiAgICAvLyBlbGlmIGNhdGVnb3J5ID09IGVubS5GVU5ESU5HX0NBVEVHT1JZX01FRElVTToKICAgIGZyYW1lX2RpZyAxCiAgICBpbnRjXzMgLy8gMjAKICAgID09CiAgICBieiBzY3J1dGlueV9lbHNlX2JvZHlAMTYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyOTUKICAgIC8vIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1FVT1JVTV9NRURJVU0pCiAgICBwdXNoYnl0ZXMgMHg3MTc1NmY3Mjc1NmQ1ZjZkNjU2NDY5NzU2ZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjI5NC0yOTYKICAgIC8vIHZhbHVlLCBlcnJvciA9IHNlbGYuZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcoCiAgICAvLyAgICAgQnl0ZXMocmVnX2NmZy5HU19LRVlfUVVPUlVNX01FRElVTSkKICAgIC8vICkKICAgIGNhbGxzdWIgZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcKICAgIGZyYW1lX2J1cnkgMAogICAgYiBzY3J1dGlueV9hZnRlcl9pZl9lbHNlQDE4CgpzY3J1dGlueV9lbHNlX2JvZHlAMTY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6Mjk5CiAgICAvLyBCeXRlcyhyZWdfY2ZnLkdTX0tFWV9RVU9SVU1fTEFSR0UpCiAgICBwdXNoYnl0ZXMgMHg3MTc1NmY3Mjc1NmQ1ZjZjNjE3MjY3NjUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyOTgtMzAwCiAgICAvLyB2YWx1ZSwgZXJyb3IgPSBzZWxmLmdldF91aW50X2Zyb21fcmVnaXN0cnlfY29uZmlnKAogICAgLy8gICAgIEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1FVT1JVTV9MQVJHRSkKICAgIC8vICkKICAgIGNhbGxzdWIgZ2V0X3VpbnRfZnJvbV9yZWdpc3RyeV9jb25maWcKICAgIGZyYW1lX2J1cnkgMAogICAgYiBzY3J1dGlueV9hZnRlcl9pZl9lbHNlQDE4CgpzY3J1dGlueV9ib29sX2ZhbHNlQDk6CiAgICBpbnRjXzAgLy8gMAogICAgYiBzY3J1dGlueV9ib29sX21lcmdlQDEwCgoKLy8gc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLnJldmlldyhibG9jazogdWludDY0KSAtPiB2b2lkOgpyZXZpZXc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODU0LTg1NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiByZXZpZXcoc2VsZiwgYmxvY2s6IGJvb2wpIC0+IE5vbmU6ICAjIG5vcWE6IEZCVDAwMQogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTA0CiAgICAvLyByZXR1cm4gVHhuLnNlbmRlciA9PSBBY2NvdW50KAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjUwNQogICAgLy8gc2VsZi5nZXRfYnl0ZXNfZnJvbV9yZWdpc3RyeV9jb25maWcoQnl0ZXMocmVnX2NmZy5HU19LRVlfWEdPVl9DT1VOQ0lMKSkKICAgIHB1c2hieXRlcyAweDc4Njc2Zjc2NWY2MzZmNzU2ZTYzNjk2YwogICAgY2FsbHN1YiBnZXRfYnl0ZXNfZnJvbV9yZWdpc3RyeV9jb25maWcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1MDQtNTA2CiAgICAvLyByZXR1cm4gVHhuLnNlbmRlciA9PSBBY2NvdW50KAogICAgLy8gICAgIHNlbGYuZ2V0X2J5dGVzX2Zyb21fcmVnaXN0cnlfY29uZmlnKEJ5dGVzKHJlZ19jZmcuR1NfS0VZX1hHT1ZfQ09VTkNJTCkpCiAgICAvLyApCiAgICBkdXAKICAgIGxlbgogICAgcHVzaGludCAzMiAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBBZGRyZXNzIGxlbmd0aCBpcyAzMiBieXRlcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNTcKICAgIC8vIGFzc2VydCBzZWxmLmlzX2NvdW5jaWwoKSwgZXJyLlVOQVVUSE9SSVpFRAogICAgYXNzZXJ0IC8vIFVuYXV0aG9yaXplZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE1OAogICAgLy8gYXNzZXJ0IHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfQVBQUk9WRUQsIGVyci5XUk9OR19QUk9QT1NBTF9TVEFUVVMKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vIDB4NzM3NDYxNzQ3NTczCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3RhdHVzIGV4aXN0cwogICAgcHVzaGludCAzMCAvLyAzMAogICAgPT0KICAgIGFzc2VydCAvLyBXcm9uZyBQcm9wb3NhbCBTdGF0dXMgb3IgRGVjb21taXNzaW9uZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4NjkKICAgIC8vIGlmIGJsb2NrOgogICAgZnJhbWVfZGlnIC0xCiAgICBieiByZXZpZXdfZWxzZV9ib2R5QDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4NzAKICAgIC8vIHNlbGYuc3RhdHVzLnZhbHVlID0gVUludDY0KGVubS5TVEFUVVNfQkxPQ0tFRCkKICAgIGJ5dGVjXzEgLy8gMHg3Mzc0NjE3NDc1NzMKICAgIHB1c2hpbnQgNjAgLy8gNjAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODcyLTg3MwogICAgLy8gIyBzbGFzaGluZzogc2VuZCBsb2NrZWQgYW1vdW50IHRvIHRoZSByZWdpc3RyeSB0cmVhc3VyeQogICAgLy8gcmVnX2FwcCA9IEFwcGxpY2F0aW9uKHNlbGYucmVnaXN0cnlfYXBwX2lkLnZhbHVlKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gMHg3MjY1Njc2OTczNzQ3Mjc5NWY2MTcwNzA1ZjY5NjQKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5yZWdpc3RyeV9hcHBfaWQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODc1CiAgICAvLyByZWNlaXZlcj1yZWdfYXBwLmFkZHJlc3MsCiAgICBhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCiAgICBhc3NlcnQgLy8gYXBwbGljYXRpb24gZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODc0LTg3NgogICAgLy8gc2VsZi50cmFuc2Zlcl9sb2NrZWRfYW1vdW50KAogICAgLy8gICAgIHJlY2VpdmVyPXJlZ19hcHAuYWRkcmVzcywKICAgIC8vICkKICAgIGNhbGxzdWIgdHJhbnNmZXJfbG9ja2VkX2Ftb3VudAogICAgcmV0c3ViCgpyZXZpZXdfZWxzZV9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODc5CiAgICAvLyBzZWxmLnN0YXR1cy52YWx1ZSA9IFVJbnQ2NChlbm0uU1RBVFVTX1JFVklFV0VEKQogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgcHVzaGludCA0NSAvLyA0NQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5mdW5kKCkgLT4gYnl0ZXM6CmZ1bmQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6ODgxLTg4MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBmdW5kKHNlbGYpIC0+IHR5cC5FcnJvcjoKICAgIHByb3RvIDAgMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNjIKICAgIC8vIGFzc2VydCBzZWxmLmlzX3JlZ2lzdHJ5X2NhbGwoKSwgZXJyLlVOQVVUSE9SSVpFRAogICAgY2FsbHN1YiBpc19yZWdpc3RyeV9jYWxsCiAgICBhc3NlcnQgLy8gVW5hdXRob3JpemVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTYzCiAgICAvLyBpZiBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX1JFVklFV0VEOgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gMHg3Mzc0NjE3NDc1NzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zdGF0dXMgZXhpc3RzCiAgICBwdXNoaW50IDQ1IC8vIDQ1CiAgICAhPQogICAgYnogZnVuZF9hZnRlcl9pZl9lbHNlQDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNjQKICAgIC8vIHJldHVybiB0eXAuRXJyb3IoZXJyLkFSQ182NV9QUkVGSVggKyBlcnIuV1JPTkdfUFJPUE9TQUxfU1RBVFVTKQogICAgYnl0ZWMgMjIgLy8gMHgwMDJiNDU1MjUyM2E1NzcyNmY2ZTY3MjA1MDcyNmY3MDZmNzM2MTZjMjA1Mzc0NjE3NDc1NzMyMDZmNzIyMDQ0NjU2MzZmNmQ2ZDY5NzM3MzY5NmY2ZTY1NjQKICAgIGZyYW1lX2J1cnkgMAoKZnVuZF9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5mdW5kX2NoZWNrX2F1dGhvcml6YXRpb25ANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4OTEKICAgIC8vIGlmIGVycm9yICE9IHR5cC5FcnJvcigiIik6CiAgICBmcmFtZV9kaWcgMAogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgICE9CiAgICBieiBmdW5kX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojg5MgogICAgLy8gcmV0dXJuIGVycm9yCiAgICBmcmFtZV9kaWcgMAogICAgc3dhcAogICAgcmV0c3ViCgpmdW5kX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4OTQKICAgIC8vIHNlbGYuc3RhdHVzLnZhbHVlID0gVUludDY0KGVubS5TVEFUVVNfRlVOREVEKQogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgcHVzaGludCA1MCAvLyA1MAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4OTgKICAgIC8vIHJlY2VpdmVyPXNlbGYucHJvcG9zZXIudmFsdWUsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAweDcwNzI2ZjcwNmY3MzY1NzIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wcm9wb3NlciBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4OTYtODk5CiAgICAvLyAjIHJlZnVuZCB0aGUgbG9ja2VkIGFtb3VudCB0byB0aGUgcHJvcG9zZXIKICAgIC8vIHNlbGYudHJhbnNmZXJfbG9ja2VkX2Ftb3VudCgKICAgIC8vICAgICByZWNlaXZlcj1zZWxmLnByb3Bvc2VyLnZhbHVlLAogICAgLy8gKQogICAgY2FsbHN1YiB0cmFuc2Zlcl9sb2NrZWRfYW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTAxCiAgICAvLyByZXR1cm4gdHlwLkVycm9yKCIiKQogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgIHN3YXAKICAgIHJldHN1YgoKZnVuZF9hZnRlcl9pZl9lbHNlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTY2CiAgICAvLyByZXR1cm4gdHlwLkVycm9yKCIiKQogICAgYnl0ZWNfMCAvLyAweDAwMDAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojg5MAogICAgLy8gZXJyb3IgPSBzZWxmLmZ1bmRfY2hlY2tfYXV0aG9yaXphdGlvbigpCiAgICBiIGZ1bmRfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuZnVuZF9jaGVja19hdXRob3JpemF0aW9uQDYKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwudW5hc3NpZ25fdm90ZXJzKHZvdGVyczogYnl0ZXMpIC0+IHZvaWQ6CnVuYXNzaWduX3ZvdGVyczoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5MDMtOTA0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIHVuYXNzaWduX3ZvdGVycyhzZWxmLCB2b3RlcnM6IGFyYzQuRHluYW1pY0FycmF5W2FyYzQuQWRkcmVzc10pIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICIiCiAgICBkdXBuIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNzAKICAgIC8vIGFzc2VydCBzZWxmLmlzX3hnb3ZfZGFlbW9uKCksIGVyci5VTkFVVEhPUklaRUQKICAgIGNhbGxzdWIgaXNfeGdvdl9kYWVtb24KICAgIGFzc2VydCAvLyBVbmF1dGhvcml6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNzIKICAgIC8vIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfRlVOREVECiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN0YXR1cyBleGlzdHMKICAgIHB1c2hpbnQgNTAgLy8gNTAKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTcyLTE3NQogICAgLy8gc2VsZi5zdGF0dXMudmFsdWUgPT0gZW5tLlNUQVRVU19GVU5ERUQKICAgIC8vIG9yIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfQkxPQ0tFRAogICAgLy8gb3Igc2VsZi5zdGF0dXMudmFsdWUgPT0gZW5tLlNUQVRVU19SRUpFQ1RFRAogICAgLy8gb3Igc2VsZi5zdGF0dXMudmFsdWUgPT0gZW5tLlNUQVRVU19GSU5BTAogICAgYm56IHVuYXNzaWduX3ZvdGVyc19hbmRfY29udGRAMTgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNzMKICAgIC8vIG9yIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfQkxPQ0tFRAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gMHg3Mzc0NjE3NDc1NzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zdGF0dXMgZXhpc3RzCiAgICBwdXNoaW50IDYwIC8vIDYwCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE3Mi0xNzUKICAgIC8vIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfRlVOREVECiAgICAvLyBvciBzZWxmLnN0YXR1cy52YWx1ZSA9PSBlbm0uU1RBVFVTX0JMT0NLRUQKICAgIC8vIG9yIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfUkVKRUNURUQKICAgIC8vIG9yIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfRklOQUwKICAgIGJueiB1bmFzc2lnbl92b3RlcnNfYW5kX2NvbnRkQDE4CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTc0CiAgICAvLyBvciBzZWxmLnN0YXR1cy52YWx1ZSA9PSBlbm0uU1RBVFVTX1JFSkVDVEVECiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN0YXR1cyBleGlzdHMKICAgIHB1c2hpbnQgNDAgLy8gNDAKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTcyLTE3NQogICAgLy8gc2VsZi5zdGF0dXMudmFsdWUgPT0gZW5tLlNUQVRVU19GVU5ERUQKICAgIC8vIG9yIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfQkxPQ0tFRAogICAgLy8gb3Igc2VsZi5zdGF0dXMudmFsdWUgPT0gZW5tLlNUQVRVU19SRUpFQ1RFRAogICAgLy8gb3Igc2VsZi5zdGF0dXMudmFsdWUgPT0gZW5tLlNUQVRVU19GSU5BTAogICAgYm56IHVuYXNzaWduX3ZvdGVyc19hbmRfY29udGRAMTgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNzUKICAgIC8vIG9yIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfRklOQUwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vIDB4NzM3NDYxNzQ3NTczCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3RhdHVzIGV4aXN0cwogICAgaW50Y18zIC8vIDIwCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE3Mi0xNzUKICAgIC8vIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfRlVOREVECiAgICAvLyBvciBzZWxmLnN0YXR1cy52YWx1ZSA9PSBlbm0uU1RBVFVTX0JMT0NLRUQKICAgIC8vIG9yIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfUkVKRUNURUQKICAgIC8vIG9yIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfRklOQUwKICAgIGJ6IHVuYXNzaWduX3ZvdGVyc19ib29sX2ZhbHNlQDIwCgp1bmFzc2lnbl92b3RlcnNfYW5kX2NvbnRkQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE3NgogICAgLy8gKSBhbmQgbm90IHNlbGYuZGVjb21taXNzaW9uZWQudmFsdWUsIGVyci5XUk9OR19QUk9QT1NBTF9TVEFUVVMKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vIDB4NjQ2NTYzNmY2ZDZkNjk3MzczNjk2ZjZlNjU2NAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRlY29tbWlzc2lvbmVkIGV4aXN0cwogICAgYm56IHVuYXNzaWduX3ZvdGVyc19ib29sX2ZhbHNlQDIwCiAgICBpbnRjXzEgLy8gMQoKdW5hc3NpZ25fdm90ZXJzX2Jvb2xfbWVyZ2VAMjE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTcxLTE3NgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBzZWxmLnN0YXR1cy52YWx1ZSA9PSBlbm0uU1RBVFVTX0ZVTkRFRAogICAgLy8gICAgIG9yIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfQkxPQ0tFRAogICAgLy8gICAgIG9yIHNlbGYuc3RhdHVzLnZhbHVlID09IGVubS5TVEFUVVNfUkVKRUNURUQKICAgIC8vICAgICBvciBzZWxmLnN0YXR1cy52YWx1ZSA9PSBlbm0uU1RBVFVTX0ZJTkFMCiAgICAvLyApIGFuZCBub3Qgc2VsZi5kZWNvbW1pc3Npb25lZC52YWx1ZSwgZXJyLldST05HX1BST1BPU0FMX1NUQVRVUwogICAgYXNzZXJ0IC8vIFdyb25nIFByb3Bvc2FsIFN0YXR1cyBvciBEZWNvbW1pc3Npb25lZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjkxOQogICAgLy8gaWYgVHhuLmdyb3VwX2luZGV4ID09IDA6CiAgICB0eG4gR3JvdXBJbmRleAogICAgYm56IHVuYXNzaWduX3ZvdGVyc19lbHNlX2JvZHlANgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjkyMC05MjEKICAgIC8vICMgQ2hlY2sgdGhhdCB0aGUgZW50aXJlIGdyb3VwIGNhbGxzIHRoZSBzYW1lIGFwcCBhbmQgbWV0aG9kCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMSwgR2xvYmFsLmdyb3VwX3NpemUpOgogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgZnJhbWVfYnVyeSA0CiAgICBpbnRjXzEgLy8gMQogICAgZnJhbWVfYnVyeSAyCgp1bmFzc2lnbl92b3RlcnNfZm9yX2hlYWRlckAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjkyMC05MjEKICAgIC8vICMgQ2hlY2sgdGhhdCB0aGUgZW50aXJlIGdyb3VwIGNhbGxzIHRoZSBzYW1lIGFwcCBhbmQgbWV0aG9kCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMSwgR2xvYmFsLmdyb3VwX3NpemUpOgogICAgZnJhbWVfZGlnIDIKICAgIGZyYW1lX2RpZyA0CiAgICA8CiAgICBieiB1bmFzc2lnbl92b3RlcnNfYWZ0ZXJfaWZfZWxzZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTIyCiAgICAvLyBzZWxmLmFzc2VydF9zYW1lX2FwcF9hbmRfbWV0aG9kKGkpCiAgICBmcmFtZV9kaWcgMgogICAgZHVwCiAgICBjYWxsc3ViIGFzc2VydF9zYW1lX2FwcF9hbmRfbWV0aG9kCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTIwLTkyMQogICAgLy8gIyBDaGVjayB0aGF0IHRoZSBlbnRpcmUgZ3JvdXAgY2FsbHMgdGhlIHNhbWUgYXBwIGFuZCBtZXRob2QKICAgIC8vIGZvciBpIGluIHVyYW5nZSgxLCBHbG9iYWwuZ3JvdXBfc2l6ZSk6CiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAyCiAgICBiIHVuYXNzaWduX3ZvdGVyc19mb3JfaGVhZGVyQDIKCnVuYXNzaWduX3ZvdGVyc19hZnRlcl9pZl9lbHNlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTI3LTkyOAogICAgLy8gIyByZW1vdmUgdm90ZXJzCiAgICAvLyBmb3Igdm90ZXIgaW4gdm90ZXJzOgogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2J1cnkgMQogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgMwoKdW5hc3NpZ25fdm90ZXJzX2Zvcl9oZWFkZXJAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5MjctOTI4CiAgICAvLyAjIHJlbW92ZSB2b3RlcnMKICAgIC8vIGZvciB2b3RlciBpbiB2b3RlcnM6CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIDEKICAgIDwKICAgIGJ6IHVuYXNzaWduX3ZvdGVyc19hZnRlcl9mb3JAMTMKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAyIDAKICAgIGZyYW1lX2RpZyAzCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICAqCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5MjkKICAgIC8vIGlmIHZvdGVyLm5hdGl2ZSBpbiBzZWxmLnZvdGVyczoKICAgIGJ5dGVjIDI4IC8vICJWIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiB1bmFzc2lnbl92b3RlcnNfYWZ0ZXJfaWZfZWxzZUAxMQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjkzMAogICAgLy8gc2VsZi52b3RlcnNfY291bnQgLT0gMQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDkgLy8gInZvdGVyc19jb3VudCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi52b3RlcnNfY291bnQgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgYnl0ZWMgOSAvLyAidm90ZXJzX2NvdW50IgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5MzEKICAgIC8vIHNlbGYuYXNzaWduZWRfdm90ZXMgLT0gc2VsZi52b3RlcnNbdm90ZXIubmF0aXZlXS52b3Rlcy5uYXRpdmUKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxNCAvLyAiYXNzaWduZWRfdm90ZXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYXNzaWduZWRfdm90ZXMgZXhpc3RzCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi52b3RlcnMgZW50cnkgZXhpc3RzCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIC0KICAgIGJ5dGVjIDE0IC8vICJhc3NpZ25lZF92b3RlcyIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTMyCiAgICAvLyBkZWwgc2VsZi52b3RlcnNbdm90ZXIubmF0aXZlXQogICAgYm94X2RlbAogICAgcG9wCgp1bmFzc2lnbl92b3RlcnNfYWZ0ZXJfaWZfZWxzZUAxMToKICAgIGZyYW1lX2RpZyAzCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAzCiAgICBiIHVuYXNzaWduX3ZvdGVyc19mb3JfaGVhZGVyQDgKCnVuYXNzaWduX3ZvdGVyc19hZnRlcl9mb3JAMTM6CiAgICByZXRzdWIKCnVuYXNzaWduX3ZvdGVyc19lbHNlX2JvZHlANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5MjQtOTI1CiAgICAvLyAjIENoZWNrIHRoYXQgdGhlIGZpcnN0IHRyYW5zYWN0aW9uIGluIHRoZSBncm91cCBjYWxscyB0aGUgc2FtZSBhcHAgYW5kIG1ldGhvZAogICAgLy8gc2VsZi5hc3NlcnRfc2FtZV9hcHBfYW5kX21ldGhvZChVSW50NjQoMCkpCiAgICBpbnRjXzAgLy8gMAogICAgY2FsbHN1YiBhc3NlcnRfc2FtZV9hcHBfYW5kX21ldGhvZAogICAgYiB1bmFzc2lnbl92b3RlcnNfYWZ0ZXJfaWZfZWxzZUA3Cgp1bmFzc2lnbl92b3RlcnNfYm9vbF9mYWxzZUAyMDoKICAgIGludGNfMCAvLyAwCiAgICBiIHVuYXNzaWduX3ZvdGVyc19ib29sX21lcmdlQDIxCgoKLy8gc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLmRlY29tbWlzc2lvbigpIC0+IGJ5dGVzOgpkZWNvbW1pc3Npb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTM0LTkzNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBkZWNvbW1pc3Npb24oc2VsZikgLT4gdHlwLkVycm9yOgogICAgcHJvdG8gMCAxCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE4MAogICAgLy8gYXNzZXJ0IHNlbGYuaXNfcmVnaXN0cnlfY2FsbCgpLCBlcnIuVU5BVVRIT1JJWkVECiAgICBjYWxsc3ViIGlzX3JlZ2lzdHJ5X2NhbGwKICAgIGFzc2VydCAvLyBVbmF1dGhvcml6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxODIKICAgIC8vIGlmIHNlbGYuZGVjb21taXNzaW9uZWQudmFsdWUgb3IgKAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gMHg2NDY1NjM2ZjZkNmQ2OTczNzM2OTZmNmU2NTY0CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVjb21taXNzaW9uZWQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTgyLTE4OAogICAgLy8gaWYgc2VsZi5kZWNvbW1pc3Npb25lZC52YWx1ZSBvciAoCiAgICAvLyAgICAgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19FTVBUWQogICAgLy8gICAgIGFuZCBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX0RSQUZUCiAgICAvLyAgICAgYW5kIHNlbGYuc3RhdHVzLnZhbHVlICE9IGVubS5TVEFUVVNfRlVOREVECiAgICAvLyAgICAgYW5kIHNlbGYuc3RhdHVzLnZhbHVlICE9IGVubS5TVEFUVVNfQkxPQ0tFRAogICAgLy8gICAgIGFuZCBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX1JFSkVDVEVECiAgICAvLyApOgogICAgYm56IGRlY29tbWlzc2lvbl9pZl9ib2R5QDEzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTgzCiAgICAvLyBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX0VNUFRZCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN0YXR1cyBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxODMtMTg3CiAgICAvLyBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX0VNUFRZCiAgICAvLyBhbmQgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19EUkFGVAogICAgLy8gYW5kIHNlbGYuc3RhdHVzLnZhbHVlICE9IGVubS5TVEFUVVNfRlVOREVECiAgICAvLyBhbmQgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19CTE9DS0VECiAgICAvLyBhbmQgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19SRUpFQ1RFRAogICAgYnogZGVjb21taXNzaW9uX2FmdGVyX2lmX2Vsc2VAMTQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxODQKICAgIC8vIGFuZCBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX0RSQUZUCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAweDczNzQ2MTc0NzU3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN0YXR1cyBleGlzdHMKICAgIGludGNfMiAvLyAxMAogICAgIT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxODMtMTg3CiAgICAvLyBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX0VNUFRZCiAgICAvLyBhbmQgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19EUkFGVAogICAgLy8gYW5kIHNlbGYuc3RhdHVzLnZhbHVlICE9IGVubS5TVEFUVVNfRlVOREVECiAgICAvLyBhbmQgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19CTE9DS0VECiAgICAvLyBhbmQgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19SRUpFQ1RFRAogICAgYnogZGVjb21taXNzaW9uX2FmdGVyX2lmX2Vsc2VAMTQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxODUKICAgIC8vIGFuZCBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX0ZVTkRFRAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gMHg3Mzc0NjE3NDc1NzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zdGF0dXMgZXhpc3RzCiAgICBwdXNoaW50IDUwIC8vIDUwCiAgICAhPQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE4My0xODcKICAgIC8vIHNlbGYuc3RhdHVzLnZhbHVlICE9IGVubS5TVEFUVVNfRU1QVFkKICAgIC8vIGFuZCBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX0RSQUZUCiAgICAvLyBhbmQgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19GVU5ERUQKICAgIC8vIGFuZCBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX0JMT0NLRUQKICAgIC8vIGFuZCBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX1JFSkVDVEVECiAgICBieiBkZWNvbW1pc3Npb25fYWZ0ZXJfaWZfZWxzZUAxNAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE4NgogICAgLy8gYW5kIHNlbGYuc3RhdHVzLnZhbHVlICE9IGVubS5TVEFUVVNfQkxPQ0tFRAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gMHg3Mzc0NjE3NDc1NzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zdGF0dXMgZXhpc3RzCiAgICBwdXNoaW50IDYwIC8vIDYwCiAgICAhPQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE4My0xODcKICAgIC8vIHNlbGYuc3RhdHVzLnZhbHVlICE9IGVubS5TVEFUVVNfRU1QVFkKICAgIC8vIGFuZCBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX0RSQUZUCiAgICAvLyBhbmQgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19GVU5ERUQKICAgIC8vIGFuZCBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX0JMT0NLRUQKICAgIC8vIGFuZCBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX1JFSkVDVEVECiAgICBieiBkZWNvbW1pc3Npb25fYWZ0ZXJfaWZfZWxzZUAxNAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE4NwogICAgLy8gYW5kIHNlbGYuc3RhdHVzLnZhbHVlICE9IGVubS5TVEFUVVNfUkVKRUNURUQKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vIDB4NzM3NDYxNzQ3NTczCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3RhdHVzIGV4aXN0cwogICAgcHVzaGludCA0MCAvLyA0MAogICAgIT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxODMtMTg3CiAgICAvLyBzZWxmLnN0YXR1cy52YWx1ZSAhPSBlbm0uU1RBVFVTX0VNUFRZCiAgICAvLyBhbmQgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19EUkFGVAogICAgLy8gYW5kIHNlbGYuc3RhdHVzLnZhbHVlICE9IGVubS5TVEFUVVNfRlVOREVECiAgICAvLyBhbmQgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19CTE9DS0VECiAgICAvLyBhbmQgc2VsZi5zdGF0dXMudmFsdWUgIT0gZW5tLlNUQVRVU19SRUpFQ1RFRAogICAgYnogZGVjb21taXNzaW9uX2FmdGVyX2lmX2Vsc2VAMTQKCmRlY29tbWlzc2lvbl9pZl9ib2R5QDEzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE4OQogICAgLy8gcmV0dXJuIHR5cC5FcnJvcihlcnIuQVJDXzY1X1BSRUZJWCArIGVyci5XUk9OR19QUk9QT1NBTF9TVEFUVVMpCiAgICBieXRlYyAyMiAvLyAweDAwMmI0NTUyNTIzYTU3NzI2ZjZlNjcyMDUwNzI2ZjcwNmY3MzYxNmMyMDUzNzQ2MTc0NzU3MzIwNmY3MjIwNDQ2NTYzNmY2ZDZkNjk3MzczNjk2ZjZlNjU2NAogICAgZnJhbWVfYnVyeSAwCgpkZWNvbW1pc3Npb25fYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuZGVjb21taXNzaW9uX2NoZWNrX2F1dGhvcml6YXRpb25AMTU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTQ2CiAgICAvLyBpZiBlcnJvciAhPSB0eXAuRXJyb3IoIiIpOgogICAgZnJhbWVfZGlnIDAKICAgIGJ5dGVjXzAgLy8gMHgwMDAwCiAgICAhPQogICAgYnogZGVjb21taXNzaW9uX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk0NwogICAgLy8gcmV0dXJuIGVycm9yCiAgICBmcmFtZV9kaWcgMAogICAgc3dhcAogICAgcmV0c3ViCgpkZWNvbW1pc3Npb25fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk0OS05NTAKICAgIC8vICMgY2hlY2sgbm8gYXNzaWduZWQgdm90ZXJzCiAgICAvLyBpZiBzZWxmLnZvdGVyc19jb3VudCA+IFVJbnQ2NCgwKToKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA5IC8vICJ2b3RlcnNfY291bnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudm90ZXJzX2NvdW50IGV4aXN0cwogICAgYnogZGVjb21taXNzaW9uX2FmdGVyX2lmX2Vsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk1MQogICAgLy8gcmV0dXJuIHR5cC5FcnJvcihlcnIuQVJDXzY1X1BSRUZJWCArIGVyci5WT1RFUlNfQVNTSUdORUQpCiAgICBwdXNoYnl0ZXMgMHgwMDJlNDU1MjUyM2E1NDY4NjU3MjY1MjA2MTcyNjUyMDc2NmY3NDY1NzI3MzIwNjE3MzczNjk2NzZlNjU2NDIwNzQ2ZjIwNzQ2ODY5NzMyMDcwNzI2ZjcwNmY3MzYxNmMKICAgIHN3YXAKICAgIHJldHN1YgoKZGVjb21taXNzaW9uX2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5NTMtOTU0CiAgICAvLyAjIGRlbGV0ZSBtZXRhZGF0YSBib3ggaWYgaXQgZXhpc3RzCiAgICAvLyBzZWxmLm1ldGFkYXRhLmRlbGV0ZSgpCiAgICBieXRlYyA2IC8vICJNIgogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTU2LTk1OQogICAgLy8gIyByZWZ1bmQgdGhlIGxvY2tlZCBhbW91bnQgZm9yIERSQUZUIHByb3Bvc2FscwogICAgLy8gIyBmb3IgUkVKRUNURUQgcHJvcG9zYWxzLCB0aGUgbG9ja2VkIGFtb3VudCBpcyBhbHJlYWR5IHJlZnVuZGVkIGluIHRoZSBzY3J1dGlueSBtZXRob2QKICAgIC8vICMgZm9yIEVNUFRZLCBGVU5ERUQsIG9yIEJMT0NLRUQgcHJvcG9zYWxzLCB0aGUgbG9ja2VkIGFtb3VudCBpcyBub3QgcmVmdW5kYWJsZQogICAgLy8gaWYgc2VsZi5zdGF0dXMudmFsdWUgPT0gZW5tLlNUQVRVU19EUkFGVDoKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vIDB4NzM3NDYxNzQ3NTczCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3RhdHVzIGV4aXN0cwogICAgaW50Y18yIC8vIDEwCiAgICA9PQogICAgYnogZGVjb21taXNzaW9uX2FmdGVyX2lmX2Vsc2VANgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk2MQogICAgLy8gcmVjZWl2ZXI9c2VsZi5wcm9wb3Nlci52YWx1ZSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vIDB4NzA3MjZmNzA2ZjczNjU3MgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnByb3Bvc2VyIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk2MC05NjIKICAgIC8vIHNlbGYudHJhbnNmZXJfbG9ja2VkX2Ftb3VudCgKICAgIC8vICAgICByZWNlaXZlcj1zZWxmLnByb3Bvc2VyLnZhbHVlLAogICAgLy8gKQogICAgY2FsbHN1YiB0cmFuc2Zlcl9sb2NrZWRfYW1vdW50CgpkZWNvbW1pc3Npb25fYWZ0ZXJfaWZfZWxzZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk2MwogICAgLy8gcmVnX2FwcCA9IEFwcGxpY2F0aW9uKHNlbGYucmVnaXN0cnlfYXBwX2lkLnZhbHVlKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gMHg3MjY1Njc2OTczNzQ3Mjc5NWY2MTcwNzA1ZjY5NjQKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5yZWdpc3RyeV9hcHBfaWQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTY1CiAgICAvLyByZWNlaXZlcj1yZWdfYXBwLmFkZHJlc3MsCiAgICBhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCiAgICBhc3NlcnQgLy8gYXBwbGljYXRpb24gZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTY2CiAgICAvLyBhbW91bnQ9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcy5iYWxhbmNlLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTY0LTk2NwogICAgLy8gc2VsZi5wYXkoCiAgICAvLyAgICAgcmVjZWl2ZXI9cmVnX2FwcC5hZGRyZXNzLAogICAgLy8gICAgIGFtb3VudD1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLmJhbGFuY2UsCiAgICAvLyApCiAgICBjYWxsc3ViIHBheQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk2OAogICAgLy8gc2VsZi5kZWNvbW1pc3Npb25lZC52YWx1ZSA9IFRydWUKICAgIGJ5dGVjXzMgLy8gMHg2NDY1NjM2ZjZkNmQ2OTczNzM2OTZmNmU2NTY0CiAgICBpbnRjXzEgLy8gMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5NzAKICAgIC8vIHJldHVybiB0eXAuRXJyb3IoIiIpCiAgICBieXRlY18wIC8vIDB4MDAwMAogICAgc3dhcAogICAgcmV0c3ViCgpkZWNvbW1pc3Npb25fYWZ0ZXJfaWZfZWxzZUAxNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxOTEKICAgIC8vIHJldHVybiB0eXAuRXJyb3IoIiIpCiAgICBieXRlY18wIC8vIDB4MDAwMAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTQ1CiAgICAvLyBlcnJvciA9IHNlbGYuZGVjb21taXNzaW9uX2NoZWNrX2F1dGhvcml6YXRpb24oKQogICAgYiBkZWNvbW1pc3Npb25fYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuZGVjb21taXNzaW9uX2NoZWNrX2F1dGhvcml6YXRpb25AMTUKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuZGVsZXRlKCkgLT4gdm9pZDoKZGVsZXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE5NQogICAgLy8gYXNzZXJ0IHNlbGYuaXNfeGdvdl9kYWVtb24oKSwgZXJyLlVOQVVUSE9SSVpFRAogICAgY2FsbHN1YiBpc194Z292X2RhZW1vbgogICAgYXNzZXJ0IC8vIFVuYXV0aG9yaXplZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE5NgogICAgLy8gYXNzZXJ0IHNlbGYuZGVjb21taXNzaW9uZWQudmFsdWUsIGVyci5XUk9OR19QUk9QT1NBTF9TVEFUVVMKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vIDB4NjQ2NTYzNmY2ZDZkNjk3MzczNjk2ZjZlNjU2NAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRlY29tbWlzc2lvbmVkIGV4aXN0cwogICAgYXNzZXJ0IC8vIFdyb25nIFByb3Bvc2FsIFN0YXR1cyBvciBEZWNvbW1pc3Npb25lZAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLmdldF9zdGF0ZSgpIC0+IGJ5dGVzOgpnZXRfc3RhdGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTkzCiAgICAvLyBwcm9wb3Nlcj1hcmM0LkFkZHJlc3Moc2VsZi5wcm9wb3Nlci52YWx1ZSksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAweDcwNzI2ZjcwNmY3MzY1NzIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wcm9wb3NlciBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5OTQKICAgIC8vIHJlZ2lzdHJ5X2FwcF9pZD1hcmM0LlVJbnQ2NChzZWxmLnJlZ2lzdHJ5X2FwcF9pZC52YWx1ZSksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNyAvLyAweDcyNjU2NzY5NzM3NDcyNzk1ZjYxNzA3MDVmNjk2NAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnJlZ2lzdHJ5X2FwcF9pZCBleGlzdHMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5OTUKICAgIC8vIHRpdGxlPWFyYzQuU3RyaW5nKHNlbGYudGl0bGUudmFsdWUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDIzIC8vIDB4NzQ2OTc0NmM2NQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRpdGxlIGV4aXN0cwogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5OTYKICAgIC8vIHN1Ym1pc3Npb25fdHM9YXJjNC5VSW50NjQoc2VsZi5zdWJtaXNzaW9uX3RzLnZhbHVlKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxOSAvLyAweDczNzU2MjZkNjk3MzczNjk2ZjZlNWY3NDY5NmQ2NTczNzQ2MTZkNzAKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zdWJtaXNzaW9uX3RzIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk5NwogICAgLy8gZmluYWxpemF0aW9uX3RzPWFyYzQuVUludDY0KHNlbGYuZmluYWxpemF0aW9uX3RzLnZhbHVlKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAyNCAvLyAweDY2Njk2ZTYxNmM2OTdhNjE3NDY5NmY2ZTVmNzQ2OTZkNjU3Mzc0NjE2ZDcwCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZmluYWxpemF0aW9uX3RzIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk5OAogICAgLy8gdm90ZV9vcGVuX3RzPWFyYzQuVUludDY0KHNlbGYudm90ZV9vcGVuX3RzLnZhbHVlKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAyMCAvLyAweDc2NmY3NDY1NWY2ZjcwNjU2ZTY5NmU2NzVmNzQ2OTZkNjU3Mzc0NjE2ZDcwCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudm90ZV9vcGVuX3RzIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk5OQogICAgLy8gc3RhdHVzPWFyYzQuVUludDY0KHNlbGYuc3RhdHVzLnZhbHVlKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vIDB4NzM3NDYxNzQ3NTczCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3RhdHVzIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEwMDAKICAgIC8vIGRlY29tbWlzc2lvbmVkPWFyYzQuQm9vbChzZWxmLmRlY29tbWlzc2lvbmVkLnZhbHVlKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vIDB4NjQ2NTYzNmY2ZDZkNjk3MzczNjk2ZjZlNjU2NAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRlY29tbWlzc2lvbmVkIGV4aXN0cwogICAgYnl0ZWMgMTggLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTAwMQogICAgLy8gZnVuZGluZ19jYXRlZ29yeT1hcmM0LlVJbnQ2NChzZWxmLmZ1bmRpbmdfY2F0ZWdvcnkudmFsdWUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDUgLy8gMHg2Njc1NmU2NDY5NmU2NzVmNjM2MTc0NjU2NzZmNzI3OQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRpbmdfY2F0ZWdvcnkgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTAwMgogICAgLy8gZm9jdXM9YXJjNC5VSW50OChzZWxmLmZvY3VzLnZhbHVlKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAyNSAvLyAweDY2NmY2Mzc1NzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mb2N1cyBleGlzdHMKICAgIGl0b2IKICAgIGR1cAogICAgYml0bGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgZXh0cmFjdCA3IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMDAzCiAgICAvLyBmdW5kaW5nX3R5cGU9YXJjNC5VSW50NjQoc2VsZi5mdW5kaW5nX3R5cGUudmFsdWUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDI2IC8vIDB4NjY3NTZlNjQ2OTZlNjc1Zjc0Nzk3MDY1CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGluZ190eXBlIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEwMDQKICAgIC8vIHJlcXVlc3RlZF9hbW91bnQ9YXJjNC5VSW50NjQoc2VsZi5yZXF1ZXN0ZWRfYW1vdW50LnZhbHVlKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAyNyAvLyAweDcyNjU3MTc1NjU3Mzc0NjU2NDVmNjE2ZDZmNzU2ZTc0CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucmVxdWVzdGVkX2Ftb3VudCBleGlzdHMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMDA1CiAgICAvLyBsb2NrZWRfYW1vdW50PWFyYzQuVUludDY0KHNlbGYubG9ja2VkX2Ftb3VudC52YWx1ZSksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTUgLy8gMHg2YzZmNjM2YjY1NjQ1ZjYxNmQ2Zjc1NmU3NAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxvY2tlZF9hbW91bnQgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTAwNgogICAgLy8gY29tbWl0dGVlX2lkPXNlbGYuY29tbWl0dGVlX2lkLnZhbHVlLmNvcHkoKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAyMSAvLyAweDYzNmY2ZDZkNjk3NDc0NjU2NTVmNjk2NAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvbW1pdHRlZV9pZCBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMDA3CiAgICAvLyBjb21taXR0ZWVfbWVtYmVycz1hcmM0LlVJbnQ2NChzZWxmLmNvbW1pdHRlZV9tZW1iZXJzLnZhbHVlKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA4IC8vIDB4NjM2ZjZkNmQ2OTc0NzQ2NTY1NWY2ZDY1NmQ2MjY1NzI3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvbW1pdHRlZV9tZW1iZXJzIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEwMDgKICAgIC8vIGNvbW1pdHRlZV92b3Rlcz1hcmM0LlVJbnQ2NChzZWxmLmNvbW1pdHRlZV92b3Rlcy52YWx1ZSksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTAgLy8gMHg2MzZmNmQ2ZDY5NzQ3NDY1NjU1Zjc2NmY3NDY1NzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jb21taXR0ZWVfdm90ZXMgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTAwOQogICAgLy8gdm90ZWRfbWVtYmVycz1hcmM0LlVJbnQ2NChzZWxmLnZvdGVkX21lbWJlcnMudmFsdWUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDExIC8vIDB4NzY2Zjc0NjU2NDVmNmQ2NTZkNjI2NTcyNzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi52b3RlZF9tZW1iZXJzIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEwMTAKICAgIC8vIGFwcHJvdmFscz1hcmM0LlVJbnQ2NChzZWxmLmFwcHJvdmFscy52YWx1ZSksCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTIgLy8gMHg2MTcwNzA3MjZmNzY2MTZjNzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hcHByb3ZhbHMgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTAxMQogICAgLy8gcmVqZWN0aW9ucz1hcmM0LlVJbnQ2NChzZWxmLnJlamVjdGlvbnMudmFsdWUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEzIC8vIDB4NzI2NTZhNjU2Mzc0Njk2ZjZlNzMKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5yZWplY3Rpb25zIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEwMTIKICAgIC8vIG51bGxzPWFyYzQuVUludDY0KHNlbGYubnVsbHMudmFsdWUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDE2IC8vIDB4NmU3NTZjNmM3MwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm51bGxzIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk5Mi0xMDEzCiAgICAvLyByZXR1cm4gdHlwLlByb3Bvc2FsVHlwZWRHbG9iYWxTdGF0ZSgKICAgIC8vICAgICBwcm9wb3Nlcj1hcmM0LkFkZHJlc3Moc2VsZi5wcm9wb3Nlci52YWx1ZSksCiAgICAvLyAgICAgcmVnaXN0cnlfYXBwX2lkPWFyYzQuVUludDY0KHNlbGYucmVnaXN0cnlfYXBwX2lkLnZhbHVlKSwKICAgIC8vICAgICB0aXRsZT1hcmM0LlN0cmluZyhzZWxmLnRpdGxlLnZhbHVlKSwKICAgIC8vICAgICBzdWJtaXNzaW9uX3RzPWFyYzQuVUludDY0KHNlbGYuc3VibWlzc2lvbl90cy52YWx1ZSksCiAgICAvLyAgICAgZmluYWxpemF0aW9uX3RzPWFyYzQuVUludDY0KHNlbGYuZmluYWxpemF0aW9uX3RzLnZhbHVlKSwKICAgIC8vICAgICB2b3RlX29wZW5fdHM9YXJjNC5VSW50NjQoc2VsZi52b3RlX29wZW5fdHMudmFsdWUpLAogICAgLy8gICAgIHN0YXR1cz1hcmM0LlVJbnQ2NChzZWxmLnN0YXR1cy52YWx1ZSksCiAgICAvLyAgICAgZGVjb21taXNzaW9uZWQ9YXJjNC5Cb29sKHNlbGYuZGVjb21taXNzaW9uZWQudmFsdWUpLAogICAgLy8gICAgIGZ1bmRpbmdfY2F0ZWdvcnk9YXJjNC5VSW50NjQoc2VsZi5mdW5kaW5nX2NhdGVnb3J5LnZhbHVlKSwKICAgIC8vICAgICBmb2N1cz1hcmM0LlVJbnQ4KHNlbGYuZm9jdXMudmFsdWUpLAogICAgLy8gICAgIGZ1bmRpbmdfdHlwZT1hcmM0LlVJbnQ2NChzZWxmLmZ1bmRpbmdfdHlwZS52YWx1ZSksCiAgICAvLyAgICAgcmVxdWVzdGVkX2Ftb3VudD1hcmM0LlVJbnQ2NChzZWxmLnJlcXVlc3RlZF9hbW91bnQudmFsdWUpLAogICAgLy8gICAgIGxvY2tlZF9hbW91bnQ9YXJjNC5VSW50NjQoc2VsZi5sb2NrZWRfYW1vdW50LnZhbHVlKSwKICAgIC8vICAgICBjb21taXR0ZWVfaWQ9c2VsZi5jb21taXR0ZWVfaWQudmFsdWUuY29weSgpLAogICAgLy8gICAgIGNvbW1pdHRlZV9tZW1iZXJzPWFyYzQuVUludDY0KHNlbGYuY29tbWl0dGVlX21lbWJlcnMudmFsdWUpLAogICAgLy8gICAgIGNvbW1pdHRlZV92b3Rlcz1hcmM0LlVJbnQ2NChzZWxmLmNvbW1pdHRlZV92b3Rlcy52YWx1ZSksCiAgICAvLyAgICAgdm90ZWRfbWVtYmVycz1hcmM0LlVJbnQ2NChzZWxmLnZvdGVkX21lbWJlcnMudmFsdWUpLAogICAgLy8gICAgIGFwcHJvdmFscz1hcmM0LlVJbnQ2NChzZWxmLmFwcHJvdmFscy52YWx1ZSksCiAgICAvLyAgICAgcmVqZWN0aW9ucz1hcmM0LlVJbnQ2NChzZWxmLnJlamVjdGlvbnMudmFsdWUpLAogICAgLy8gICAgIG51bGxzPWFyYzQuVUludDY0KHNlbGYubnVsbHMudmFsdWUpLAogICAgLy8gKQogICAgdW5jb3ZlciAxOQogICAgdW5jb3ZlciAxOQogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgMHgwMGJjCiAgICBjb25jYXQKICAgIHVuY292ZXIgMTcKICAgIGNvbmNhdAogICAgdW5jb3ZlciAxNgogICAgY29uY2F0CiAgICB1bmNvdmVyIDE1CiAgICBjb25jYXQKICAgIHVuY292ZXIgMTQKICAgIGNvbmNhdAogICAgdW5jb3ZlciAxMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDEyCiAgICBjb25jYXQKICAgIHVuY292ZXIgMTEKICAgIGNvbmNhdAogICAgdW5jb3ZlciAxMAogICAgY29uY2F0CiAgICB1bmNvdmVyIDkKICAgIGNvbmNhdAogICAgdW5jb3ZlciA4CiAgICBjb25jYXQKICAgIHVuY292ZXIgNwogICAgY29uY2F0CiAgICB1bmNvdmVyIDYKICAgIGNvbmNhdAogICAgdW5jb3ZlciA1CiAgICBjb25jYXQKICAgIHVuY292ZXIgNAogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 19
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "approvals": {
                    "type": "uint64",
                    "key": "approvals"
                },
                "assigned_votes": {
                    "type": "uint64",
                    "key": "assigned_votes"
                },
                "committee_id": {
                    "type": "bytes",
                    "key": "committee_id"
                },
                "committee_members": {
                    "type": "uint64",
                    "key": "committee_members"
                },
                "committee_votes": {
                    "type": "uint64",
                    "key": "committee_votes"
                },
                "decommissioned": {
                    "type": "uint64",
                    "key": "decommissioned"
                },
                "finalization_ts": {
                    "type": "uint64",
                    "key": "finalization_timestamp"
                },
                "focus": {
                    "type": "uint64",
                    "key": "focus"
                },
                "funding_category": {
                    "type": "uint64",
                    "key": "funding_category"
                },
                "funding_type": {
                    "type": "uint64",
                    "key": "funding_type"
                },
                "locked_amount": {
                    "type": "uint64",
                    "key": "locked_amount"
                },
                "nulls": {
                    "type": "uint64",
                    "key": "nulls"
                },
                "proposer": {
                    "type": "bytes",
                    "key": "proposer"
                },
                "registry_app_id": {
                    "type": "uint64",
                    "key": "registry_app_id"
                },
                "rejections": {
                    "type": "uint64",
                    "key": "rejections"
                },
                "requested_amount": {
                    "type": "uint64",
                    "key": "requested_amount"
                },
                "status": {
                    "type": "uint64",
                    "key": "status"
                },
                "submission_ts": {
                    "type": "uint64",
                    "key": "submission_timestamp"
                },
                "title": {
                    "type": "bytes",
                    "key": "title"
                },
                "vote_open_ts": {
                    "type": "uint64",
                    "key": "vote_opening_timestamp"
                },
                "voted_members": {
                    "type": "uint64",
                    "key": "voted_members"
                },
                "voters_count": {
                    "type": "uint64",
                    "key": "voters_count"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Proposal",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "address",
                        "name": "proposer",
                        "desc": "Address of the proposer"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "submit",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "Commitment payment transaction from the proposer to the contract"
                    },
                    {
                        "type": "string",
                        "name": "title",
                        "desc": "Proposal title, max TITLE_MAX_BYTES bytes"
                    },
                    {
                        "type": "uint64",
                        "name": "funding_type",
                        "desc": "Funding type (Proactive / Retroactive)"
                    },
                    {
                        "type": "uint64",
                        "name": "requested_amount",
                        "desc": "Requested amount in microAlgos"
                    },
                    {
                        "type": "uint8",
                        "name": "focus",
                        "desc": "Proposal focus area"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Submit the first draft of the proposal."
            },
            {
                "name": "upload_metadata",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "payload",
                        "desc": "Metadata payload"
                    },
                    {
                        "type": "bool",
                        "name": "is_first_in_group",
                        "desc": "True if this is the first upload call in a group transaction"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Upload the proposal metadata."
            },
            {
                "name": "drop",
                "args": [],
                "returns": {
                    "type": "string"
                },
                "desc": "Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "finalize",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Finalize the proposal."
            },
            {
                "name": "assign_voters",
                "args": [
                    {
                        "type": "(address,uint64)[]",
                        "name": "voters",
                        "desc": "List of voter addresses with their voting power"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Assign multiple voters to the proposal."
            },
            {
                "name": "vote",
                "args": [
                    {
                        "type": "address",
                        "name": "voter",
                        "desc": "Voter address"
                    },
                    {
                        "type": "uint64",
                        "name": "approvals",
                        "desc": "Number of approvals"
                    },
                    {
                        "type": "uint64",
                        "name": "rejections",
                        "desc": "Number of rejections"
                    }
                ],
                "returns": {
                    "type": "string"
                },
                "desc": "Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "scrutiny",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Scrutinize the proposal."
            },
            {
                "name": "review",
                "args": [
                    {
                        "type": "bool",
                        "name": "block",
                        "desc": "Whether to block the proposal or not"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Review the proposal."
            },
            {
                "name": "fund",
                "args": [],
                "returns": {
                    "type": "string"
                },
                "desc": "Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "unassign_voters",
                "args": [
                    {
                        "type": "address[]",
                        "name": "voters",
                        "desc": "List of voters to be unassigned"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Unassign voters from the proposal."
            },
            {
                "name": "decommission",
                "args": [],
                "returns": {
                    "type": "string"
                },
                "desc": "Decommission the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Delete the proposal."
            },
            {
                "name": "get_state",
                "args": [],
                "returns": {
                    "type": "(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)",
                    "desc": "The proposal state"
                },
                "desc": "Get the proposal state."
            },
            {
                "name": "op_up",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


@dataclasses.dataclass(kw_only=True)
class Deploy(algokit_utils.DeployCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class SubmitArgs(_ArgsBase[None]):
    """Submit the first draft of the proposal."""

    payment: TransactionWithSigner
    """Commitment payment transaction from the proposer to the contract"""
    title: str
    """Proposal title, max TITLE_MAX_BYTES bytes"""
    funding_type: int
    """Funding type (Proactive / Retroactive)"""
    requested_amount: int
    """Requested amount in microAlgos"""
    focus: int
    """Proposal focus area"""

    @staticmethod
    def method() -> str:
        return "submit(pay,string,uint64,uint64,uint8)void"


@dataclasses.dataclass(kw_only=True)
class UploadMetadataArgs(_ArgsBase[None]):
    """Upload the proposal metadata."""

    payload: bytes | bytearray
    """Metadata payload"""
    is_first_in_group: bool
    """True if this is the first upload call in a group transaction"""

    @staticmethod
    def method() -> str:
        return "upload_metadata(byte[],bool)void"


@dataclasses.dataclass(kw_only=True)
class DropArgs(_ArgsBase[str]):
    """Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."""

    @staticmethod
    def method() -> str:
        return "drop()string"


@dataclasses.dataclass(kw_only=True)
class FinalizeArgs(_ArgsBase[None]):
    """Finalize the proposal."""

    @staticmethod
    def method() -> str:
        return "finalize()void"


@dataclasses.dataclass(kw_only=True)
class AssignVotersArgs(_ArgsBase[None]):
    """Assign multiple voters to the proposal."""

    voters: list[tuple[str, int]]
    """List of voter addresses with their voting power"""

    @staticmethod
    def method() -> str:
        return "assign_voters((address,uint64)[])void"


@dataclasses.dataclass(kw_only=True)
class VoteArgs(_ArgsBase[str]):
    """Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."""

    voter: str
    """Voter address"""
    approvals: int
    """Number of approvals"""
    rejections: int
    """Number of rejections"""

    @staticmethod
    def method() -> str:
        return "vote(address,uint64,uint64)string"


@dataclasses.dataclass(kw_only=True)
class ScrutinyArgs(_ArgsBase[None]):
    """Scrutinize the proposal."""

    @staticmethod
    def method() -> str:
        return "scrutiny()void"


@dataclasses.dataclass(kw_only=True)
class ReviewArgs(_ArgsBase[None]):
    """Review the proposal."""

    block: bool
    """Whether to block the proposal or not"""

    @staticmethod
    def method() -> str:
        return "review(bool)void"


@dataclasses.dataclass(kw_only=True)
class FundArgs(_ArgsBase[str]):
    """Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."""

    @staticmethod
    def method() -> str:
        return "fund()string"


@dataclasses.dataclass(kw_only=True)
class UnassignVotersArgs(_ArgsBase[None]):
    """Unassign voters from the proposal."""

    voters: list[str]
    """List of voters to be unassigned"""

    @staticmethod
    def method() -> str:
        return "unassign_voters(address[])void"


@dataclasses.dataclass(kw_only=True)
class DecommissionArgs(_ArgsBase[str]):
    """Decommission the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."""

    @staticmethod
    def method() -> str:
        return "decommission()string"


@dataclasses.dataclass(kw_only=True)
class ProposalTypedGlobalState:
    proposer: str
    registry_app_id: int
    title: str
    submission_ts: int
    finalization_ts: int
    vote_open_ts: int
    status: int
    decommissioned: bool
    funding_category: int
    focus: int
    funding_type: int
    requested_amount: int
    locked_amount: int
    committee_id: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    committee_members: int
    committee_votes: int
    voted_members: int
    approvals: int
    rejections: int
    nulls: int


@dataclasses.dataclass(kw_only=True)
class GetStateArgs(_ArgsBase[ProposalTypedGlobalState]):
    """Get the proposal state."""

    @staticmethod
    def method() -> str:
        return "get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class OpUpArgs(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "op_up()void"


@dataclasses.dataclass(kw_only=True)
class CreateArgs(_ArgsBase[None]):
    """Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."""

    proposer: str
    """Address of the proposer"""

    @staticmethod
    def method() -> str:
        return "create(address)void"


@dataclasses.dataclass(kw_only=True)
class DeleteArgs(_ArgsBase[None]):
    """Delete the proposal."""

    @staticmethod
    def method() -> str:
        return "delete()void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.approvals = typing.cast(int, data.get(b"approvals"))
        self.assigned_votes = typing.cast(int, data.get(b"assigned_votes"))
        self.committee_id = ByteReader(typing.cast(bytes, data.get(b"committee_id")))
        self.committee_members = typing.cast(int, data.get(b"committee_members"))
        self.committee_votes = typing.cast(int, data.get(b"committee_votes"))
        self.decommissioned = typing.cast(int, data.get(b"decommissioned"))
        self.finalization_ts = typing.cast(int, data.get(b"finalization_timestamp"))
        self.focus = typing.cast(int, data.get(b"focus"))
        self.funding_category = typing.cast(int, data.get(b"funding_category"))
        self.funding_type = typing.cast(int, data.get(b"funding_type"))
        self.locked_amount = typing.cast(int, data.get(b"locked_amount"))
        self.nulls = typing.cast(int, data.get(b"nulls"))
        self.proposer = ByteReader(typing.cast(bytes, data.get(b"proposer")))
        self.registry_app_id = typing.cast(int, data.get(b"registry_app_id"))
        self.rejections = typing.cast(int, data.get(b"rejections"))
        self.requested_amount = typing.cast(int, data.get(b"requested_amount"))
        self.status = typing.cast(int, data.get(b"status"))
        self.submission_ts = typing.cast(int, data.get(b"submission_timestamp"))
        self.title = ByteReader(typing.cast(bytes, data.get(b"title")))
        self.vote_open_ts = typing.cast(int, data.get(b"vote_opening_timestamp"))
        self.voted_members = typing.cast(int, data.get(b"voted_members"))
        self.voters_count = typing.cast(int, data.get(b"voters_count"))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def submit(
        self,
        *,
        payment: TransactionWithSigner,
        title: str,
        funding_type: int,
        requested_amount: int,
        focus: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Submit the first draft of the proposal.
        
        Adds a call to `submit(pay,string,uint64,uint64,uint8)void` ABI method
        
        :param TransactionWithSigner payment: Commitment payment transaction from the proposer to the contract
        :param str title: Proposal title, max TITLE_MAX_BYTES bytes
        :param int funding_type: Funding type (Proactive / Retroactive)
        :param int requested_amount: Requested amount in microAlgos
        :param int focus: Proposal focus area
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SubmitArgs(
            payment=payment,
            title=title,
            funding_type=funding_type,
            requested_amount=requested_amount,
            focus=focus,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def upload_metadata(
        self,
        *,
        payload: bytes | bytearray,
        is_first_in_group: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Upload the proposal metadata.
        
        Adds a call to `upload_metadata(byte[],bool)void` ABI method
        
        :param bytes | bytearray payload: Metadata payload
        :param bool is_first_in_group: True if this is the first upload call in a group transaction
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UploadMetadataArgs(
            payload=payload,
            is_first_in_group=is_first_in_group,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def drop(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Adds a call to `drop()string` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DropArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def finalize(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Finalize the proposal.
        
        Adds a call to `finalize()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = FinalizeArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def assign_voters(
        self,
        *,
        voters: list[tuple[str, int]],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Assign multiple voters to the proposal.
        
        Adds a call to `assign_voters((address,uint64)[])void` ABI method
        
        :param list[tuple[str, int]] voters: List of voter addresses with their voting power
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AssignVotersArgs(
            voters=voters,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def vote(
        self,
        *,
        voter: str,
        approvals: int,
        rejections: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Adds a call to `vote(address,uint64,uint64)string` ABI method
        
        :param str voter: Voter address
        :param int approvals: Number of approvals
        :param int rejections: Number of rejections
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = VoteArgs(
            voter=voter,
            approvals=approvals,
            rejections=rejections,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def scrutiny(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Scrutinize the proposal.
        
        Adds a call to `scrutiny()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ScrutinyArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def review(
        self,
        *,
        block: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Review the proposal.
        
        Adds a call to `review(bool)void` ABI method
        
        :param bool block: Whether to block the proposal or not
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ReviewArgs(
            block=block,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def fund(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Adds a call to `fund()string` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = FundArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def unassign_voters(
        self,
        *,
        voters: list[str],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Unassign voters from the proposal.
        
        Adds a call to `unassign_voters(address[])void` ABI method
        
        :param list[str] voters: List of voters to be unassigned
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UnassignVotersArgs(
            voters=voters,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def decommission(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Decommission the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Adds a call to `decommission()string` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DecommissionArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_state(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get the proposal state.
        
        Adds a call to `get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetStateArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def op_up(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `op_up()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = OpUpArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_create(
        self,
        *,
        proposer: str,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Adds a call to `create(address)void` ABI method
        
        :param str proposer: Address of the proposer
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArgs(
            proposer=proposer,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def delete_delete(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Delete the proposal.
        
        Adds a call to `delete()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DeleteArgs()
        self.app_client.compose_delete(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class ProposalClient:
    """A class for interacting with the Proposal app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        ProposalClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def submit(
        self,
        *,
        payment: TransactionWithSigner,
        title: str,
        funding_type: int,
        requested_amount: int,
        focus: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Submit the first draft of the proposal.
        
        Calls `submit(pay,string,uint64,uint64,uint8)void` ABI method
        
        :param TransactionWithSigner payment: Commitment payment transaction from the proposer to the contract
        :param str title: Proposal title, max TITLE_MAX_BYTES bytes
        :param int funding_type: Funding type (Proactive / Retroactive)
        :param int requested_amount: Requested amount in microAlgos
        :param int focus: Proposal focus area
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SubmitArgs(
            payment=payment,
            title=title,
            funding_type=funding_type,
            requested_amount=requested_amount,
            focus=focus,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def upload_metadata(
        self,
        *,
        payload: bytes | bytearray,
        is_first_in_group: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Upload the proposal metadata.
        
        Calls `upload_metadata(byte[],bool)void` ABI method
        
        :param bytes | bytearray payload: Metadata payload
        :param bool is_first_in_group: True if this is the first upload call in a group transaction
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UploadMetadataArgs(
            payload=payload,
            is_first_in_group=is_first_in_group,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def drop(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Calls `drop()string` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = DropArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def finalize(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Finalize the proposal.
        
        Calls `finalize()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = FinalizeArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def assign_voters(
        self,
        *,
        voters: list[tuple[str, int]],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Assign multiple voters to the proposal.
        
        Calls `assign_voters((address,uint64)[])void` ABI method
        
        :param list[tuple[str, int]] voters: List of voter addresses with their voting power
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AssignVotersArgs(
            voters=voters,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def vote(
        self,
        *,
        voter: str,
        approvals: int,
        rejections: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Calls `vote(address,uint64,uint64)string` ABI method
        
        :param str voter: Voter address
        :param int approvals: Number of approvals
        :param int rejections: Number of rejections
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = VoteArgs(
            voter=voter,
            approvals=approvals,
            rejections=rejections,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def scrutiny(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Scrutinize the proposal.
        
        Calls `scrutiny()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ScrutinyArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def review(
        self,
        *,
        block: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Review the proposal.
        
        Calls `review(bool)void` ABI method
        
        :param bool block: Whether to block the proposal or not
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ReviewArgs(
            block=block,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def fund(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Calls `fund()string` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = FundArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def unassign_voters(
        self,
        *,
        voters: list[str],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Unassign voters from the proposal.
        
        Calls `unassign_voters(address[])void` ABI method
        
        :param list[str] voters: List of voters to be unassigned
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UnassignVotersArgs(
            voters=voters,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def decommission(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Decommission the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Calls `decommission()string` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = DecommissionArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_state(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ProposalTypedGlobalState]:
        """Get the proposal state.
        
        Calls `get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ProposalTypedGlobalState]: The proposal state"""

        args = GetStateArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ProposalTypedGlobalState(**result_dict)
        return result

    def op_up(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `op_up()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = OpUpArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_create(
        self,
        *,
        proposer: str,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Calls `create(address)void` ABI method
        
        :param str proposer: Address of the proposer
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CreateArgs(
            proposer=proposer,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def delete_delete(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Delete the proposal.
        
        Calls `delete()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DeleteArgs()
        result = self.app_client.delete(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[CreateArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: Deploy[DeleteArgs],
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[CreateArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param Deploy[DeleteArgs] delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
