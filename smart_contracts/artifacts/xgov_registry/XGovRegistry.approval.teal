#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 8 32 19300
    bytecblock 0x7061757365645f7265676973747279 0x78 0x151f7c75 0x70 0x78676f7673 0x6f75747374616e64696e675f66756e6473 0x78676f765f6d616e61676572 0x70656e64696e675f70726f706f73616c73 0x7061 0x00 0x7061757365645f70726f706f73616c73 0x6f70656e5f70726f706f73616c5f666565 0x726571756573745f6964 "ERR:" 0x78676f765f73756273637269626572 0x78676f765f7061796f72 0x6b79635f70726f7669646572 0x636f6d6d69747465655f6d616e61676572 0x78676f765f6461656d6f6e 0x78676f765f666565 0x70726f706f7365725f666565 0x72 0x7275 "Wrong Proposal Status or finalized" 0x78676f765f636f756e63696c 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073 0x70726f706f73616c5f636f6d6d69746d656e745f627073 0x6d696e5f7265717565737465645f616d6f756e74 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d 0x6d61785f7265717565737465645f616d6f756e745f6c61726765 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d 0x64697363757373696f6e5f6475726174696f6e5f6c61726765 0x64697363757373696f6e5f6475726174696f6e5f786c61726765 0x766f74696e675f6475726174696f6e5f736d616c6c 0x766f74696e675f6475726174696f6e5f6d656469756d 0x766f74696e675f6475726174696f6e5f6c61726765 0x766f74696e675f6475726174696f6e5f786c61726765 0x71756f72756d5f736d616c6c 0x71756f72756d5f6d656469756d 0x71756f72756d5f6c61726765 0x77656967687465645f71756f72756d5f736d616c6c 0x77656967687465645f71756f72756d5f6d656469756d 0x77656967687465645f71756f72756d5f6c61726765 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573 0x6d61785f636f6d6d69747465655f73697a65 "Missing Config" 0x636f6d6d69747465655f6964 TMPL_entropy
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/xgov_registry/contract.py:55-56
    // # Preconditions
    // assert Txn.global_num_byte_slice == cfg.GLOBAL_BYTES, err.WRONG_GLOBAL_BYTES
    txn GlobalNumByteSlice
    pushint 28 // 28
    ==
    assert // Wrong Global Bytes allocation
    // smart_contracts/xgov_registry/contract.py:57
    // assert Txn.global_num_uint == cfg.GLOBAL_UINTS, err.WRONG_GLOBAL_UINTS
    txn GlobalNumUint
    pushint 36 // 36
    ==
    assert // Wrong Global UInts allocation
    // smart_contracts/xgov_registry/contract.py:58
    // assert Txn.local_num_byte_slice == cfg.LOCAL_BYTES, err.WRONG_LOCAL_BYTES
    txn LocalNumByteSlice
    !
    assert // Wrong Local Bytes allocation
    // smart_contracts/xgov_registry/contract.py:59
    // assert Txn.local_num_uint == cfg.LOCAL_UINTS, err.WRONG_LOCAL_UINTS
    txn LocalNumUint
    !
    assert // Wrong Local UInts allocation
    // smart_contracts/xgov_registry/contract.py:61-62
    // # Initialize global state variables
    // self.paused_registry = GlobalState(UInt64(), key=cfg.GS_KEY_PAUSED_REGISTRY)
    bytec_0 // 0x7061757365645f7265676973747279
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:63
    // self.paused_proposals = GlobalState(UInt64(), key=cfg.GS_KEY_PAUSED_PROPOSALS)
    bytec 10 // 0x7061757365645f70726f706f73616c73
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:65
    // self.xgov_manager = GlobalState(arc4.Address(), key=cfg.GS_KEY_XGOV_MANAGER)
    bytec 6 // 0x78676f765f6d616e61676572
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:67
    // arc4.Address(), key=cfg.GS_KEY_XGOV_SUBSCRIBER
    bytec 14 // 0x78676f765f73756273637269626572
    global ZeroAddress
    // smart_contracts/xgov_registry/contract.py:66-68
    // self.xgov_subscriber = GlobalState(
    //     arc4.Address(), key=cfg.GS_KEY_XGOV_SUBSCRIBER
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:69
    // self.xgov_payor = GlobalState(arc4.Address(), key=cfg.GS_KEY_XGOV_PAYOR)
    bytec 15 // 0x78676f765f7061796f72
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:70
    // self.xgov_council = GlobalState(arc4.Address(), key=cfg.GS_KEY_XGOV_COUNCIL)
    bytec 24 // 0x78676f765f636f756e63696c
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:72
    // self.kyc_provider = GlobalState(arc4.Address(), key=cfg.GS_KEY_KYC_PROVIDER)
    bytec 16 // 0x6b79635f70726f7669646572
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:74
    // arc4.Address(), key=cfg.GS_KEY_COMMITTEE_MANAGER
    bytec 17 // 0x636f6d6d69747465655f6d616e61676572
    global ZeroAddress
    // smart_contracts/xgov_registry/contract.py:73-75
    // self.committee_manager = GlobalState(
    //     arc4.Address(), key=cfg.GS_KEY_COMMITTEE_MANAGER
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:76
    // self.xgov_daemon = GlobalState(arc4.Address(), key=cfg.GS_KEY_XGOV_DAEMON)
    bytec 18 // 0x78676f765f6461656d6f6e
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:78
    // self.xgov_fee = GlobalState(UInt64(), key=cfg.GS_KEY_XGOV_FEE)
    bytec 19 // 0x78676f765f666565
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:79
    // self.xgovs = GlobalState(UInt64(), key=cfg.GS_KEY_XGOVS)
    bytec 4 // 0x78676f7673
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:80
    // self.proposer_fee = GlobalState(UInt64(), key=cfg.GS_KEY_PROPOSER_FEE)
    bytec 20 // 0x70726f706f7365725f666565
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:81
    // self.open_proposal_fee = GlobalState(UInt64(), key=cfg.GS_KEY_OPEN_PROPOSAL_FEE)
    bytec 11 // 0x6f70656e5f70726f706f73616c5f666565
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:83
    // UInt64(), key=cfg.GS_KEY_DAEMON_OPS_FUNDING_BPS
    bytec 25 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:82-84
    // self.daemon_ops_funding_bps = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_DAEMON_OPS_FUNDING_BPS
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:86
    // UInt64(), key=cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS
    bytec 26 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:85-87
    // self.proposal_commitment_bps = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:90
    // UInt64(), key=cfg.GS_KEY_MIN_REQUESTED_AMOUNT
    bytec 27 // 0x6d696e5f7265717565737465645f616d6f756e74
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:89-91
    // self.min_requested_amount = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_MIN_REQUESTED_AMOUNT
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:94
    // UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL
    bytec 28 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:93-95
    // self.max_requested_amount_small = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:97
    // UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM
    bytec 29 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:96-98
    // self.max_requested_amount_medium = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:100
    // UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE
    bytec 30 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:99-101
    // self.max_requested_amount_large = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:104
    // UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_SMALL
    bytec 31 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:103-105
    // self.discussion_duration_small = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_SMALL
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:107
    // UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM
    bytec 32 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:106-108
    // self.discussion_duration_medium = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:110
    // UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_LARGE
    bytec 33 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:109-111
    // self.discussion_duration_large = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_LARGE
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:113
    // UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_XLARGE
    bytec 34 // 0x64697363757373696f6e5f6475726174696f6e5f786c61726765
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:112-114
    // self.discussion_duration_xlarge = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_XLARGE
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:117
    // UInt64(), key=cfg.GS_KEY_VOTING_DURATION_SMALL
    bytec 35 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:116-118
    // self.voting_duration_small = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_VOTING_DURATION_SMALL
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:120
    // UInt64(), key=cfg.GS_KEY_VOTING_DURATION_MEDIUM
    bytec 36 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:119-121
    // self.voting_duration_medium = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_VOTING_DURATION_MEDIUM
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:123
    // UInt64(), key=cfg.GS_KEY_VOTING_DURATION_LARGE
    bytec 37 // 0x766f74696e675f6475726174696f6e5f6c61726765
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:122-124
    // self.voting_duration_large = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_VOTING_DURATION_LARGE
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:126
    // UInt64(), key=cfg.GS_KEY_VOTING_DURATION_XLARGE
    bytec 38 // 0x766f74696e675f6475726174696f6e5f786c61726765
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:125-127
    // self.voting_duration_xlarge = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_VOTING_DURATION_XLARGE
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:129
    // self.quorum_small = GlobalState(UInt64(), key=cfg.GS_KEY_QUORUM_SMALL)
    bytec 39 // 0x71756f72756d5f736d616c6c
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:130
    // self.quorum_medium = GlobalState(UInt64(), key=cfg.GS_KEY_QUORUM_MEDIUM)
    bytec 40 // 0x71756f72756d5f6d656469756d
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:131
    // self.quorum_large = GlobalState(UInt64(), key=cfg.GS_KEY_QUORUM_LARGE)
    bytec 41 // 0x71756f72756d5f6c61726765
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:134
    // UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_SMALL
    bytec 42 // 0x77656967687465645f71756f72756d5f736d616c6c
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:133-135
    // self.weighted_quorum_small = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_SMALL
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:137
    // UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM
    bytec 43 // 0x77656967687465645f71756f72756d5f6d656469756d
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:136-138
    // self.weighted_quorum_medium = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:140
    // UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_LARGE
    bytec 44 // 0x77656967687465645f71756f72756d5f6c61726765
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:139-141
    // self.weighted_quorum_large = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_LARGE
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:143
    // self.outstanding_funds = GlobalState(UInt64(), key=cfg.GS_KEY_OUTSTANDING_FUNDS)
    bytec 5 // 0x6f75747374616e64696e675f66756e6473
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:146
    // self.committee_members = GlobalState(UInt64(), key=cfg.GS_KEY_COMMITTEE_MEMBERS)
    bytec 45 // 0x636f6d6d69747465655f6d656d62657273
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:147
    // self.committee_votes = GlobalState(UInt64(), key=cfg.GS_KEY_COMMITTEE_VOTES)
    bytec 46 // 0x636f6d6d69747465655f766f746573
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:149
    // self.pending_proposals = GlobalState(UInt64(), key=cfg.GS_KEY_PENDING_PROPOSALS)
    bytec 7 // 0x70656e64696e675f70726f706f73616c73
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:151
    // self.request_id = GlobalState(UInt64(), key=cfg.GS_KEY_REQUEST_ID)
    bytec 12 // 0x726571756573745f6964
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:154
    // UInt64(), key=cfg.GS_KEY_MAX_COMMITTEE_SIZE
    bytec 47 // 0x6d61785f636f6d6d69747465655f73697a65
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:153-155
    // self.max_committee_size = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_MAX_COMMITTEE_SIZE
    // )
    app_global_put

main_after_if_else@2:
    // smart_contracts/xgov_registry/contract.py:45-53
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    pushbytes 0x4956c1ab // method "update_xgov_registry()void"
    txna ApplicationArgs 0
    match main_update_xgov_registry_route@4

main_switch_case_next@5:
    // smart_contracts/xgov_registry/contract.py:45-53
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@49
    pushbytess 0x959c4762 0x6c1f564d 0xe10a512e 0x86f7e0e6 0x39e26d8a 0x98352e86 0xfa4ed6e2 0xd6c9cc1a 0x5c484055 0x37d6adf1 0xd4216b6e 0xba8520f2 0x1677b30e 0x84b7d268 0x653a0bdb 0xa082cef8 0xdf39fdb9 0x45077390 0x3c31bc02 0x0d2c7891 0x93facdba 0xce8b3a1c 0xfaea081f 0x0da27885 0x7a4fee43 0x52dd10d7 0xd4d37a64 0x34349dcc 0x158f8dd6 0xdb27b9af 0xf5910756 0x65610a9f 0xfdc695c2 0xba90ab54 0xb3b58482 0x00b3cef5 0x6f752007 0x3a8d568f 0x230cc121 0xcb0a2b41 0x26983200 // method "init_proposal_contract(uint64)void", method "load_proposal_contract(uint64,byte[])void", method "delete_proposal_contract_box()void", method "pause_registry()void", method "pause_proposals()void", method "resume_registry()void", method "resume_proposals()void", method "set_xgov_manager(address)void", method "set_payor(address)void", method "set_xgov_council(address)void", method "set_xgov_subscriber(address)void", method "set_kyc_provider(address)void", method "set_committee_manager(address)void", method "set_xgov_daemon(address)void", method "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void", method "subscribe_xgov(address,pay)void", method "unsubscribe_xgov()void", method "request_subscribe_xgov(address,address,uint64,pay)void", method "approve_subscribe_xgov(uint64)void", method "reject_subscribe_xgov(uint64)void", method "request_unsubscribe_xgov(address,address,uint64,pay)void", method "approve_unsubscribe_xgov(uint64)void", method "reject_unsubscribe_xgov(uint64)void", method "set_voting_account(address,address)void", method "subscribe_proposer(pay)void", method "set_proposer_kyc(address,bool,uint64)void", method "declare_committee(byte[32],uint64,uint64)void", method "open_proposal(pay)uint64", method "vote_proposal(uint64,address,uint64,uint64)void", method "pay_grant_proposal(uint64)void", method "finalize_proposal(uint64)void", method "drop_proposal(uint64)void", method "deposit_funds(pay)void", method "withdraw_funds(uint64)void", method "withdraw_balance()void", method "get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)", method "get_xgov_box(address)(address,uint64,uint64,uint64)", method "get_proposer_box(address)(bool,bool,uint64)", method "get_request_box(uint64)(address,address,uint64)", method "get_request_unsubscribe_box(uint64)(address,address,uint64)", method "is_proposal(uint64)void"
    txna ApplicationArgs 0
    match init_proposal_contract load_proposal_contract delete_proposal_contract_box pause_registry pause_proposals resume_registry resume_proposals set_xgov_manager set_payor set_xgov_council set_xgov_subscriber set_kyc_provider set_committee_manager set_xgov_daemon config_xgov_registry subscribe_xgov unsubscribe_xgov request_subscribe_xgov approve_subscribe_xgov reject_subscribe_xgov request_unsubscribe_xgov approve_unsubscribe_xgov reject_unsubscribe_xgov set_voting_account subscribe_proposer set_proposer_kyc declare_committee open_proposal vote_proposal pay_grant_proposal finalize_proposal drop_proposal deposit_funds withdraw_funds withdraw_balance get_state get_xgov_box get_proposer_box get_request_box get_request_unsubscribe_box is_proposal
    err

main_create_NoOp@49:
    // smart_contracts/xgov_registry/contract.py:45-53
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    pushbytes 0x4c5c61ba // method "create()void"
    txna ApplicationArgs 0
    match create
    err

main_update_xgov_registry_route@4:
    // smart_contracts/xgov_registry/contract.py:664
    // @arc4.abimethod(allow_actions=["UpdateApplication"])
    txn OnCompletion
    pushint 4 // UpdateApplication
    ==
    txn ApplicationID
    &&
    assert // OnCompletion must be UpdateApplication && can only call when not creating
    b update_xgov_registry


// smart_contracts.xgov_registry.contract.XGovRegistry.create[routing]() -> void:
create:
    // smart_contracts/xgov_registry/contract.py:371
    // self.xgov_manager.value = arc4.Address(Txn.sender)
    bytec 6 // 0x78676f765f6d616e61676572
    txn Sender
    app_global_put
    // smart_contracts/xgov_registry/contract.py:190
    // return TemplateVar[Bytes]("entropy")  # trick to allow fresh deployment
    bytec 50 // TMPL_entropy
    // smart_contracts/xgov_registry/contract.py:372
    // assert self.entropy() == TemplateVar[Bytes]("entropy")
    dup
    ==
    // smart_contracts/xgov_registry/contract.py:365
    // @arc4.abimethod(create="require")
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.init_proposal_contract[routing]() -> void:
init_proposal_contract:
    // smart_contracts/xgov_registry/contract.py:374
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:386
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:388
    // _box, exist = self.proposal_approval_program.maybe()
    bytec 8 // 0x7061
    box_len
    bury 1
    // smart_contracts/xgov_registry/contract.py:389
    // if exist:
    bz init_proposal_contract_else_body@3
    // smart_contracts/xgov_registry/contract.py:390
    // self.proposal_approval_program.resize(size.as_uint64())
    btoi
    bytec 8 // 0x7061
    swap
    box_resize

init_proposal_contract_after_if_else@4:
    // smart_contracts/xgov_registry/contract.py:374
    // @arc4.abimethod()
    intc_1 // 1
    return

init_proposal_contract_else_body@3:
    // smart_contracts/xgov_registry/contract.py:392-393
    // # Initialize the Proposal Approval Program contract
    // self.proposal_approval_program.create(size=size.as_uint64())
    btoi
    bytec 8 // 0x7061
    swap
    box_create
    pop
    b init_proposal_contract_after_if_else@4


// smart_contracts.xgov_registry.contract.XGovRegistry.load_proposal_contract[routing]() -> void:
load_proposal_contract:
    // smart_contracts/xgov_registry/contract.py:395
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 2
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // smart_contracts/xgov_registry/contract.py:408
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:412
    // start_index=offset.as_uint64(), value=data
    swap
    btoi
    // smart_contracts/xgov_registry/contract.py:410-411
    // # Load the Proposal Approval Program contract
    // self.proposal_approval_program.replace(
    bytec 8 // 0x7061
    // smart_contracts/xgov_registry/contract.py:410-413
    // # Load the Proposal Approval Program contract
    // self.proposal_approval_program.replace(
    //     start_index=offset.as_uint64(), value=data
    // )
    swap
    uncover 2
    box_replace
    // smart_contracts/xgov_registry/contract.py:395
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.delete_proposal_contract_box[routing]() -> void:
delete_proposal_contract_box:
    // smart_contracts/xgov_registry/contract.py:424
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:426-427
    // # Delete the Proposal Approval Program contract box
    // self.proposal_approval_program.delete()
    bytec 8 // 0x7061
    box_del
    pop
    // smart_contracts/xgov_registry/contract.py:415
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.pause_registry[routing]() -> void:
pause_registry:
    // smart_contracts/xgov_registry/contract.py:435
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:436
    // self.paused_registry.value = UInt64(1)
    bytec_0 // 0x7061757365645f7265676973747279
    intc_1 // 1
    app_global_put
    // smart_contracts/xgov_registry/contract.py:429
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.pause_proposals[routing]() -> void:
pause_proposals:
    // smart_contracts/xgov_registry/contract.py:444
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:445
    // self.paused_proposals.value = UInt64(1)
    bytec 10 // 0x7061757365645f70726f706f73616c73
    intc_1 // 1
    app_global_put
    // smart_contracts/xgov_registry/contract.py:438
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.resume_registry[routing]() -> void:
resume_registry:
    // smart_contracts/xgov_registry/contract.py:453
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:454
    // self.paused_registry.value = UInt64(0)
    bytec_0 // 0x7061757365645f7265676973747279
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:447
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.resume_proposals[routing]() -> void:
resume_proposals:
    // smart_contracts/xgov_registry/contract.py:462
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:463
    // self.paused_proposals.value = UInt64(0)
    bytec 10 // 0x7061757365645f70726f706f73616c73
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:456
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_manager[routing]() -> void:
set_xgov_manager:
    // smart_contracts/xgov_registry/contract.py:465
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry/contract.py:477
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:478
    // self.xgov_manager.value = manager
    bytec 6 // 0x78676f765f6d616e61676572
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:465
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.set_payor[routing]() -> void:
set_payor:
    // smart_contracts/xgov_registry/contract.py:480
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry/contract.py:492
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:493
    // self.xgov_payor.value = payor
    bytec 15 // 0x78676f765f7061796f72
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:480
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_council[routing]() -> void:
set_xgov_council:
    // smart_contracts/xgov_registry/contract.py:495
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry/contract.py:507
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:508
    // self.xgov_council.value = council
    bytec 24 // 0x78676f765f636f756e63696c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:495
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_subscriber[routing]() -> void:
set_xgov_subscriber:
    // smart_contracts/xgov_registry/contract.py:510
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry/contract.py:522
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:523
    // self.xgov_subscriber.value = subscriber
    bytec 14 // 0x78676f765f73756273637269626572
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:510
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.set_kyc_provider[routing]() -> void:
set_kyc_provider:
    // smart_contracts/xgov_registry/contract.py:525
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry/contract.py:537
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:538
    // self.kyc_provider.value = provider
    bytec 16 // 0x6b79635f70726f7669646572
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:525
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.set_committee_manager[routing]() -> void:
set_committee_manager:
    // smart_contracts/xgov_registry/contract.py:540
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry/contract.py:552
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:553
    // self.committee_manager.value = manager
    bytec 17 // 0x636f6d6d69747465655f6d616e61676572
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:540
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_daemon[routing]() -> void:
set_xgov_daemon:
    // smart_contracts/xgov_registry/contract.py:555
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry/contract.py:567
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:568
    // self.xgov_daemon.value = xgov_daemon
    bytec 18 // 0x78676f765f6461656d6f6e
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:555
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.config_xgov_registry[routing]() -> void:
config_xgov_registry:
    intc_0 // 0
    pushbytes ""
    dupn 3
    // smart_contracts/xgov_registry/contract.py:570
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dupn 2
    len
    pushint 184 // 184
    ==
    assert // invalid number of bytes for smart_contracts.common.abi_types.XGovRegistryConfig
    // smart_contracts/xgov_registry/contract.py:583
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:206
    // return self.pending_proposals.value == 0
    intc_0 // 0
    bytec 7 // 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    !
    // smart_contracts/xgov_registry/contract.py:584
    // assert self.no_pending_proposals(), err.NO_PENDING_PROPOSALS
    assert // Cannot perform operation with pending proposals
    // smart_contracts/xgov_registry/contract.py:605
    // config.xgov_fee.as_uint64() >= xgov_box_mbr
    intc_0 // 0
    extract_uint64
    dup
    // smart_contracts/xgov_registry/contract.py:280-282
    // return (
    //     key_prefix_length + key_type_size + value_type_size
    // ) * PER_BYTE_IN_BOX_MBR + PER_BOX_MBR
    pushint 38100 // 38100
    // smart_contracts/xgov_registry/contract.py:605
    // config.xgov_fee.as_uint64() >= xgov_box_mbr
    >=
    // smart_contracts/xgov_registry/contract.py:605-606
    // config.xgov_fee.as_uint64() >= xgov_box_mbr
    // and config.xgov_fee.as_uint64() >= xgov_request_box_mbr
    bz config_xgov_registry_bool_false@4
    // smart_contracts/xgov_registry/contract.py:606
    // and config.xgov_fee.as_uint64() >= xgov_request_box_mbr
    dup
    // smart_contracts/xgov_registry/contract.py:280-282
    // return (
    //     key_prefix_length + key_type_size + value_type_size
    // ) * PER_BYTE_IN_BOX_MBR + PER_BOX_MBR
    pushint 34900 // 34900
    // smart_contracts/xgov_registry/contract.py:606
    // and config.xgov_fee.as_uint64() >= xgov_request_box_mbr
    >=
    // smart_contracts/xgov_registry/contract.py:605-606
    // config.xgov_fee.as_uint64() >= xgov_box_mbr
    // and config.xgov_fee.as_uint64() >= xgov_request_box_mbr
    bz config_xgov_registry_bool_false@4
    intc_1 // 1

config_xgov_registry_bool_merge@5:
    // smart_contracts/xgov_registry/contract.py:604-607
    // assert (
    //     config.xgov_fee.as_uint64() >= xgov_box_mbr
    //     and config.xgov_fee.as_uint64() >= xgov_request_box_mbr
    // ), err.INVALID_XGOV_FEE
    assert // Invalid xGov fee
    // smart_contracts/xgov_registry/contract.py:610
    // config.proposer_fee.as_uint64() >= proposer_box_mbr
    dig 1
    dup
    intc_2 // 8
    extract_uint64
    dup
    bury 6
    // smart_contracts/xgov_registry/contract.py:280-282
    // return (
    //     key_prefix_length + key_type_size + value_type_size
    // ) * PER_BYTE_IN_BOX_MBR + PER_BOX_MBR
    intc 4 // 19300
    // smart_contracts/xgov_registry/contract.py:610
    // config.proposer_fee.as_uint64() >= proposer_box_mbr
    >=
    // smart_contracts/xgov_registry/contract.py:609-611
    // assert (
    //     config.proposer_fee.as_uint64() >= proposer_box_mbr
    // ), err.INVALID_PROPOSER_FEE
    assert // Invalid proposer fee
    // smart_contracts/xgov_registry/contract.py:614
    // config.min_requested_amount.as_uint64()
    dup
    pushint 40 // 40
    extract_uint64
    dup
    cover 2
    bury 5
    // smart_contracts/xgov_registry/contract.py:615
    // < config.max_requested_amount[0].as_uint64()
    extract 48 24
    dup
    bury 9
    intc_0 // 0
    extract_uint64
    dup
    bury 8
    // smart_contracts/xgov_registry/contract.py:614-615
    // config.min_requested_amount.as_uint64()
    // < config.max_requested_amount[0].as_uint64()
    <
    // smart_contracts/xgov_registry/contract.py:614-616
    // config.min_requested_amount.as_uint64()
    // < config.max_requested_amount[0].as_uint64()
    // < config.max_requested_amount[1].as_uint64()
    bz config_xgov_registry_bool_false@9
    // smart_contracts/xgov_registry/contract.py:616
    // < config.max_requested_amount[1].as_uint64()
    dig 6
    // smart_contracts/xgov_registry/contract.py:615-616
    // < config.max_requested_amount[0].as_uint64()
    // < config.max_requested_amount[1].as_uint64()
    intc_2 // 8
    // smart_contracts/xgov_registry/contract.py:616
    // < config.max_requested_amount[1].as_uint64()
    extract_uint64
    dup
    bury 6
    // smart_contracts/xgov_registry/contract.py:615-616
    // < config.max_requested_amount[0].as_uint64()
    // < config.max_requested_amount[1].as_uint64()
    dig 6
    >
    // smart_contracts/xgov_registry/contract.py:614-616
    // config.min_requested_amount.as_uint64()
    // < config.max_requested_amount[0].as_uint64()
    // < config.max_requested_amount[1].as_uint64()
    bz config_xgov_registry_bool_false@9
    // smart_contracts/xgov_registry/contract.py:617
    // < config.max_requested_amount[2].as_uint64()
    dig 6
    pushint 16 // 16
    extract_uint64
    // smart_contracts/xgov_registry/contract.py:616-617
    // < config.max_requested_amount[1].as_uint64()
    // < config.max_requested_amount[2].as_uint64()
    dig 5
    >
    // smart_contracts/xgov_registry/contract.py:615-617
    // < config.max_requested_amount[0].as_uint64()
    // < config.max_requested_amount[1].as_uint64()
    // < config.max_requested_amount[2].as_uint64()
    bz config_xgov_registry_bool_false@9
    intc_1 // 1

config_xgov_registry_bool_merge@10:
    // smart_contracts/xgov_registry/contract.py:613-618
    // assert (
    //     config.min_requested_amount.as_uint64()
    //     < config.max_requested_amount[0].as_uint64()
    //     < config.max_requested_amount[1].as_uint64()
    //     < config.max_requested_amount[2].as_uint64()
    // ), err.INCOSISTENT_REQUESTED_AMOUNT_CONFIG
    assert // Inconsistent requested amount config
    // smart_contracts/xgov_registry/contract.py:621
    // config.open_proposal_fee.as_uint64(),
    dig 1
    dup
    pushint 16 // 16
    extract_uint64
    // smart_contracts/xgov_registry/contract.py:622
    // config.daemon_ops_funding_bps.as_uint64(),
    dig 1
    pushint 24 // 24
    extract_uint64
    // smart_contracts/xgov_registry/contract.py:263
    // return amount * fraction_in_bps // BPS
    dup2
    *
    pushint 10000 // 10000
    /
    // smart_contracts/xgov_registry/contract.py:301
    // UInt64(MAX_MBR_PER_APP + MAX_MBR_PER_BOX + ACCOUNT_MBR) + daemon_ops_funding
    pushint 16835300 // 16835300
    +
    // smart_contracts/xgov_registry/contract.py:304
    // assert open_proposal_fee > to_substract, err.INVALID_OPEN_PROPOSAL_FEE
    dig 2
    dig 1
    >
    assert // Invalid open proposal fee
    // smart_contracts/xgov_registry/contract.py:306
    // mbr_available_for_committee = open_proposal_fee - to_substract
    dig 2
    swap
    -
    // smart_contracts/xgov_registry/contract.py:280-282
    // return (
    //     key_prefix_length + key_type_size + value_type_size
    // ) * PER_BYTE_IN_BOX_MBR + PER_BOX_MBR
    intc 4 // 19300
    // smart_contracts/xgov_registry/contract.py:312
    // self.max_committee_size.value = mbr_available_for_committee // per_voter_mbr
    /
    bytec 47 // 0x6d61785f636f6d6d69747465655f73697a65
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:625
    // self.xgov_fee.value = config.xgov_fee.as_uint64()
    bytec 19 // 0x78676f765f666565
    dig 4
    app_global_put
    // smart_contracts/xgov_registry/contract.py:626
    // self.proposer_fee.value = config.proposer_fee.as_uint64()
    bytec 20 // 0x70726f706f7365725f666565
    dig 7
    app_global_put
    // smart_contracts/xgov_registry/contract.py:627
    // self.open_proposal_fee.value = config.open_proposal_fee.as_uint64()
    bytec 11 // 0x6f70656e5f70726f706f73616c5f666565
    uncover 2
    app_global_put
    // smart_contracts/xgov_registry/contract.py:628
    // self.daemon_ops_funding_bps.value = config.daemon_ops_funding_bps.as_uint64()
    bytec 25 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:629
    // self.proposal_commitment_bps.value = config.proposal_commitment_bps.as_uint64()
    dup
    intc_3 // 32
    extract_uint64
    bytec 26 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:631
    // self.min_requested_amount.value = config.min_requested_amount.as_uint64()
    bytec 27 // 0x6d696e5f7265717565737465645f616d6f756e74
    dig 4
    app_global_put
    // smart_contracts/xgov_registry/contract.py:632
    // self.max_requested_amount_small.value = config.max_requested_amount[
    bytec 28 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    // smart_contracts/xgov_registry/contract.py:632-634
    // self.max_requested_amount_small.value = config.max_requested_amount[
    //     0
    // ].as_uint64()
    dig 7
    app_global_put
    // smart_contracts/xgov_registry/contract.py:635-637
    // self.max_requested_amount_medium.value = config.max_requested_amount[
    //     1
    // ].as_uint64()
    dig 7
    dup
    intc_2 // 8
    extract_uint64
    // smart_contracts/xgov_registry/contract.py:635
    // self.max_requested_amount_medium.value = config.max_requested_amount[
    bytec 29 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    // smart_contracts/xgov_registry/contract.py:635-637
    // self.max_requested_amount_medium.value = config.max_requested_amount[
    //     1
    // ].as_uint64()
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:638-640
    // self.max_requested_amount_large.value = config.max_requested_amount[
    //     2
    // ].as_uint64()
    pushint 16 // 16
    extract_uint64
    // smart_contracts/xgov_registry/contract.py:638
    // self.max_requested_amount_large.value = config.max_requested_amount[
    bytec 30 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    // smart_contracts/xgov_registry/contract.py:638-640
    // self.max_requested_amount_large.value = config.max_requested_amount[
    //     2
    // ].as_uint64()
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:642
    // self.discussion_duration_small.value = config.discussion_duration[0].as_uint64()
    dup
    extract 72 32
    dup
    intc_0 // 0
    extract_uint64
    bytec 31 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:643-645
    // self.discussion_duration_medium.value = config.discussion_duration[
    //     1
    // ].as_uint64()
    dup
    // smart_contracts/xgov_registry/contract.py:642-645
    // self.discussion_duration_small.value = config.discussion_duration[0].as_uint64()
    // self.discussion_duration_medium.value = config.discussion_duration[
    //     1
    // ].as_uint64()
    intc_2 // 8
    // smart_contracts/xgov_registry/contract.py:643-645
    // self.discussion_duration_medium.value = config.discussion_duration[
    //     1
    // ].as_uint64()
    extract_uint64
    // smart_contracts/xgov_registry/contract.py:643
    // self.discussion_duration_medium.value = config.discussion_duration[
    bytec 32 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    // smart_contracts/xgov_registry/contract.py:643-645
    // self.discussion_duration_medium.value = config.discussion_duration[
    //     1
    // ].as_uint64()
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:646
    // self.discussion_duration_large.value = config.discussion_duration[2].as_uint64()
    dup
    pushint 16 // 16
    extract_uint64
    bytec 33 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:647-649
    // self.discussion_duration_xlarge.value = config.discussion_duration[
    //     3
    // ].as_uint64()
    pushint 24 // 24
    extract_uint64
    // smart_contracts/xgov_registry/contract.py:647
    // self.discussion_duration_xlarge.value = config.discussion_duration[
    bytec 34 // 0x64697363757373696f6e5f6475726174696f6e5f786c61726765
    // smart_contracts/xgov_registry/contract.py:647-649
    // self.discussion_duration_xlarge.value = config.discussion_duration[
    //     3
    // ].as_uint64()
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:651
    // self.voting_duration_small.value = config.voting_duration[0].as_uint64()
    dup
    extract 104 32
    dup
    intc_0 // 0
    extract_uint64
    bytec 35 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:652
    // self.voting_duration_medium.value = config.voting_duration[1].as_uint64()
    dup
    // smart_contracts/xgov_registry/contract.py:651-652
    // self.voting_duration_small.value = config.voting_duration[0].as_uint64()
    // self.voting_duration_medium.value = config.voting_duration[1].as_uint64()
    intc_2 // 8
    // smart_contracts/xgov_registry/contract.py:652
    // self.voting_duration_medium.value = config.voting_duration[1].as_uint64()
    extract_uint64
    bytec 36 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:653
    // self.voting_duration_large.value = config.voting_duration[2].as_uint64()
    dup
    pushint 16 // 16
    extract_uint64
    bytec 37 // 0x766f74696e675f6475726174696f6e5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:654
    // self.voting_duration_xlarge.value = config.voting_duration[3].as_uint64()
    pushint 24 // 24
    extract_uint64
    bytec 38 // 0x766f74696e675f6475726174696f6e5f786c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:656
    // self.quorum_small.value = config.quorum[0].as_uint64()
    dup
    extract 136 24
    dup
    intc_0 // 0
    extract_uint64
    bytec 39 // 0x71756f72756d5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:657
    // self.quorum_medium.value = config.quorum[1].as_uint64()
    dup
    // smart_contracts/xgov_registry/contract.py:656-657
    // self.quorum_small.value = config.quorum[0].as_uint64()
    // self.quorum_medium.value = config.quorum[1].as_uint64()
    intc_2 // 8
    // smart_contracts/xgov_registry/contract.py:657
    // self.quorum_medium.value = config.quorum[1].as_uint64()
    extract_uint64
    bytec 40 // 0x71756f72756d5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:658
    // self.quorum_large.value = config.quorum[2].as_uint64()
    pushint 16 // 16
    extract_uint64
    bytec 41 // 0x71756f72756d5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:660
    // self.weighted_quorum_small.value = config.weighted_quorum[0].as_uint64()
    extract 160 24
    dup
    intc_0 // 0
    extract_uint64
    bytec 42 // 0x77656967687465645f71756f72756d5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:661
    // self.weighted_quorum_medium.value = config.weighted_quorum[1].as_uint64()
    dup
    // smart_contracts/xgov_registry/contract.py:660-661
    // self.weighted_quorum_small.value = config.weighted_quorum[0].as_uint64()
    // self.weighted_quorum_medium.value = config.weighted_quorum[1].as_uint64()
    intc_2 // 8
    // smart_contracts/xgov_registry/contract.py:661
    // self.weighted_quorum_medium.value = config.weighted_quorum[1].as_uint64()
    extract_uint64
    bytec 43 // 0x77656967687465645f71756f72756d5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:662
    // self.weighted_quorum_large.value = config.weighted_quorum[2].as_uint64()
    pushint 16 // 16
    extract_uint64
    bytec 44 // 0x77656967687465645f71756f72756d5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:570
    // @arc4.abimethod()
    intc_1 // 1
    return

config_xgov_registry_bool_false@9:
    intc_0 // 0
    b config_xgov_registry_bool_merge@10

config_xgov_registry_bool_false@4:
    intc_0 // 0
    b config_xgov_registry_bool_merge@5


// smart_contracts.xgov_registry.contract.XGovRegistry.update_xgov_registry[routing]() -> void:
update_xgov_registry:
    // smart_contracts/xgov_registry/contract.py:673
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:664
    // @arc4.abimethod(allow_actions=["UpdateApplication"])
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_xgov[routing]() -> void:
subscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:675
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:691
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:693
    // assert Txn.sender not in self.xgov_box, err.ALREADY_XGOV
    bytec_1 // 0x78
    txn Sender
    concat
    box_len
    bury 1
    !
    assert // Already an xGov
    // smart_contracts/xgov_registry/contract.py:694-695
    // # check payment
    // assert self.valid_xgov_payment(payment), err.INVALID_PAYMENT
    callsub valid_xgov_payment
    assert // Invalid payment
    // smart_contracts/xgov_registry/contract.py:697-698
    // # create box
    // self.xgov_box[Txn.sender] = self.make_xgov_box(voting_address)
    callsub make_xgov_box
    bytec_1 // 0x78
    txn Sender
    concat
    swap
    box_put
    // smart_contracts/xgov_registry/contract.py:699
    // self.xgovs.value += 1
    intc_0 // 0
    bytec 4 // 0x78676f7673
    app_global_get_ex
    assert // check self.xgovs exists
    intc_1 // 1
    +
    bytec 4 // 0x78676f7673
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:675
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.unsubscribe_xgov[routing]() -> void:
unsubscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:710
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:712-713
    // # ensure the sender is an xGov
    // assert Txn.sender in self.xgov_box, err.UNAUTHORIZED
    bytec_1 // 0x78
    txn Sender
    concat
    box_len
    bury 1
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:715-716
    // # delete box
    // del self.xgov_box[Txn.sender]
    bytec_1 // 0x78
    txn Sender
    concat
    box_del
    pop
    // smart_contracts/xgov_registry/contract.py:717
    // self.xgovs.value -= 1
    intc_0 // 0
    bytec 4 // 0x78676f7673
    app_global_get_ex
    assert // check self.xgovs exists
    intc_1 // 1
    -
    bytec 4 // 0x78676f7673
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:701
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.request_subscribe_xgov[routing]() -> void:
request_subscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:719
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 2
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 3
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:742
    // assert Txn.sender == owner_address.native, err.UNAUTHORIZED
    txn Sender
    dig 3
    ==
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:743
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:745-746
    // # ensure the xgov_address is not already an xGov
    // assert xgov_address.native not in self.xgov_box, err.ALREADY_XGOV
    bytec_1 // 0x78
    dig 4
    concat
    box_len
    bury 1
    !
    assert // Already an xGov
    // smart_contracts/xgov_registry/contract.py:748-749
    // # check payment
    // assert self.valid_xgov_payment(payment), err.INVALID_PAYMENT
    callsub valid_xgov_payment
    assert // Invalid payment
    // smart_contracts/xgov_registry/contract.py:751-752
    // # create request box
    // rid = self.request_id.value
    intc_0 // 0
    bytec 12 // 0x726571756573745f6964
    app_global_get_ex
    assert // check self.request_id exists
    // smart_contracts/xgov_registry/contract.py:753-757
    // self.request_box[rid] = typ.XGovSubscribeRequestBoxValue(
    //     xgov_addr=xgov_address,
    //     owner_addr=owner_address,
    //     relation_type=relation_type,
    // )
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    // smart_contracts/xgov_registry/contract.py:753
    // self.request_box[rid] = typ.XGovSubscribeRequestBoxValue(
    dig 1
    itob
    bytec 21 // 0x72
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:753-757
    // self.request_box[rid] = typ.XGovSubscribeRequestBoxValue(
    //     xgov_addr=xgov_address,
    //     owner_addr=owner_address,
    //     relation_type=relation_type,
    // )
    swap
    box_put
    // smart_contracts/xgov_registry/contract.py:759-760
    // # increment request id
    // self.request_id.value += 1
    intc_1 // 1
    +
    bytec 12 // 0x726571756573745f6964
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:719
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.approve_subscribe_xgov[routing]() -> void:
approve_subscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:762
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:774
    // assert self.is_xgov_subscriber(), err.UNAUTHORIZED
    callsub is_xgov_subscriber
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:776-777
    // # get the request
    // request = self.request_box[request_id.as_uint64()].copy()
    btoi
    itob
    bytec 21 // 0x72
    swap
    concat
    dup
    box_get
    assert // check self.request_box entry exists
    // smart_contracts/xgov_registry/contract.py:778-779
    // # create the xGov
    // self.xgov_box[request.xgov_addr.native] = self.make_xgov_box(request.owner_addr)
    dup
    extract 32 32
    callsub make_xgov_box
    swap
    extract 0 32
    bytec_1 // 0x78
    swap
    concat
    swap
    box_put
    // smart_contracts/xgov_registry/contract.py:780
    // self.xgovs.value += 1
    intc_0 // 0
    bytec 4 // 0x78676f7673
    app_global_get_ex
    assert // check self.xgovs exists
    intc_1 // 1
    +
    bytec 4 // 0x78676f7673
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:781-782
    // # delete the request
    // del self.request_box[request_id.as_uint64()]
    box_del
    pop
    // smart_contracts/xgov_registry/contract.py:762
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.reject_subscribe_xgov[routing]() -> void:
reject_subscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:784
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:796
    // assert self.is_xgov_subscriber(), err.UNAUTHORIZED
    callsub is_xgov_subscriber
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:798-799
    // # delete the request
    // del self.request_box[request_id.as_uint64()]
    btoi
    itob
    bytec 21 // 0x72
    swap
    concat
    box_del
    pop
    // smart_contracts/xgov_registry/contract.py:784
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.request_unsubscribe_xgov[routing]() -> void:
request_unsubscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:801
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 2
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 3
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:825
    // assert Txn.sender == owner_address.native, err.UNAUTHORIZED
    txn Sender
    dig 3
    ==
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:826
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:828-829
    // # ensure the xgov_address is already an xGov
    // assert xgov_address.native in self.xgov_box, err.NOT_XGOV
    bytec_1 // 0x78
    dig 4
    concat
    box_len
    bury 1
    assert // Not an xGov
    // smart_contracts/xgov_registry/contract.py:831-832
    // # check payment
    // assert self.valid_xgov_payment(payment), err.INVALID_PAYMENT
    callsub valid_xgov_payment
    assert // Invalid payment
    // smart_contracts/xgov_registry/contract.py:834-835
    // # create unsubscribe request box
    // ruid = self.request_id.value
    intc_0 // 0
    bytec 12 // 0x726571756573745f6964
    app_global_get_ex
    assert // check self.request_id exists
    // smart_contracts/xgov_registry/contract.py:836-840
    // self.request_unsubscribe_box[ruid] = typ.XGovSubscribeRequestBoxValue(
    //     xgov_addr=xgov_address,
    //     owner_addr=owner_address,
    //     relation_type=relation_type,
    // )
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    // smart_contracts/xgov_registry/contract.py:836
    // self.request_unsubscribe_box[ruid] = typ.XGovSubscribeRequestBoxValue(
    dig 1
    itob
    bytec 22 // 0x7275
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:836-840
    // self.request_unsubscribe_box[ruid] = typ.XGovSubscribeRequestBoxValue(
    //     xgov_addr=xgov_address,
    //     owner_addr=owner_address,
    //     relation_type=relation_type,
    // )
    swap
    box_put
    // smart_contracts/xgov_registry/contract.py:842-843
    // # increment request id
    // self.request_id.value += 1
    intc_1 // 1
    +
    bytec 12 // 0x726571756573745f6964
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:801
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.approve_unsubscribe_xgov[routing]() -> void:
approve_unsubscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:845
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:857
    // assert self.is_xgov_subscriber(), err.UNAUTHORIZED
    callsub is_xgov_subscriber
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:859-860
    // # get the request
    // request = self.request_unsubscribe_box[request_id.as_uint64()].copy()
    btoi
    itob
    bytec 22 // 0x7275
    swap
    concat
    dup
    box_get
    assert // check self.request_unsubscribe_box entry exists
    // smart_contracts/xgov_registry/contract.py:862-863
    // # del the xGov
    // del self.xgov_box[request.xgov_addr.native]
    extract 0 32
    bytec_1 // 0x78
    swap
    concat
    box_del
    pop
    // smart_contracts/xgov_registry/contract.py:864
    // self.xgovs.value -= 1
    intc_0 // 0
    bytec 4 // 0x78676f7673
    app_global_get_ex
    assert // check self.xgovs exists
    intc_1 // 1
    -
    bytec 4 // 0x78676f7673
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:866-867
    // # delete the request
    // del self.request_unsubscribe_box[request_id.as_uint64()]
    box_del
    pop
    // smart_contracts/xgov_registry/contract.py:845
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.reject_unsubscribe_xgov[routing]() -> void:
reject_unsubscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:869
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:881
    // assert self.is_xgov_subscriber(), err.UNAUTHORIZED
    callsub is_xgov_subscriber
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:883-884
    // # delete the request
    // del self.request_unsubscribe_box[request_id.as_uint64()]
    btoi
    itob
    bytec 22 // 0x7275
    swap
    concat
    box_del
    pop
    // smart_contracts/xgov_registry/contract.py:869
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.set_voting_account[routing]() -> void:
set_voting_account:
    // smart_contracts/xgov_registry/contract.py:886
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dupn 2
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 2
    dup
    cover 2
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry/contract.py:902
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:904-905
    // # Check if the sender is an xGov member
    // exists = xgov_address.native in self.xgov_box
    bytec_1 // 0x78
    swap
    concat
    dupn 2
    box_len
    bury 1
    // smart_contracts/xgov_registry/contract.py:906
    // assert exists, err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:907
    // xgov_box = self.xgov_box[xgov_address.native].copy()
    box_get
    pop
    // smart_contracts/xgov_registry/contract.py:911
    // Txn.sender == xgov_box.voting_address.native
    txn Sender
    swap
    extract 0 32
    ==
    // smart_contracts/xgov_registry/contract.py:911-912
    // Txn.sender == xgov_box.voting_address.native
    // or Txn.sender == xgov_address.native
    bnz set_voting_account_bool_true@3
    // smart_contracts/xgov_registry/contract.py:912
    // or Txn.sender == xgov_address.native
    txn Sender
    dig 3
    ==
    // smart_contracts/xgov_registry/contract.py:911-912
    // Txn.sender == xgov_box.voting_address.native
    // or Txn.sender == xgov_address.native
    bz set_voting_account_bool_false@4

set_voting_account_bool_true@3:
    intc_1 // 1

set_voting_account_bool_merge@5:
    // smart_contracts/xgov_registry/contract.py:909-913
    // # Check that the sender is either the xGov or the voting address
    // assert (
    //     Txn.sender == xgov_box.voting_address.native
    //     or Txn.sender == xgov_address.native
    // ), err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:915-916
    // # Update the voting account in the xGov box
    // self.xgov_box[xgov_address.native].voting_address = voting_address
    dup
    intc_0 // 0
    dig 3
    box_replace
    // smart_contracts/xgov_registry/contract.py:886
    // @arc4.abimethod()
    intc_1 // 1
    return

set_voting_account_bool_false@4:
    intc_0 // 0
    b set_voting_account_bool_merge@5


// smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_proposer[routing]() -> void:
subscribe_proposer:
    // smart_contracts/xgov_registry/contract.py:918
    // @arc4.abimethod()
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:932
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:934
    // assert Txn.sender not in self.proposer_box, err.ALREADY_PROPOSER
    bytec_3 // 0x70
    txn Sender
    concat
    box_len
    bury 1
    !
    assert // Already a proposer
    // smart_contracts/xgov_registry/contract.py:937
    // payment.receiver == Global.current_application_address
    dup
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/xgov_registry/contract.py:935-938
    // # check fee
    // assert (
    //     payment.receiver == Global.current_application_address
    // ), err.WRONG_RECEIVER
    assert // Wrong Receiver
    // smart_contracts/xgov_registry/contract.py:939
    // assert payment.amount == self.proposer_fee.value, err.WRONG_PAYMENT_AMOUNT
    gtxns Amount
    intc_0 // 0
    bytec 20 // 0x70726f706f7365725f666565
    app_global_get_ex
    assert // check self.proposer_fee exists
    ==
    assert // Wrong payment amount
    // smart_contracts/xgov_registry/contract.py:941
    // self.proposer_box[Txn.sender] = self.make_proposer_box(
    bytec_3 // 0x70
    txn Sender
    concat
    // smart_contracts/xgov_registry/contract.py:359-363
    // return typ.ProposerBoxValue(
    //     active_proposal=active_proposal,
    //     kyc_status=kyc_status,
    //     kyc_expiring=kyc_expiring,
    // )
    pushbytes 0x000000000000000000
    // smart_contracts/xgov_registry/contract.py:941-943
    // self.proposer_box[Txn.sender] = self.make_proposer_box(
    //     arc4.Bool(False), arc4.Bool(False), arc4.UInt64(0)  # noqa: FBT003
    // )
    box_put
    // smart_contracts/xgov_registry/contract.py:918
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.set_proposer_kyc[routing]() -> void:
set_proposer_kyc:
    // smart_contracts/xgov_registry/contract.py:945
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 2
    dup
    len
    intc_1 // 1
    ==
    assert // invalid number of bytes for arc4.bool
    txna ApplicationArgs 3
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:962-963
    // # check if kyc provider
    // assert Txn.sender == self.kyc_provider.value.native, err.UNAUTHORIZED
    txn Sender
    intc_0 // 0
    bytec 16 // 0x6b79635f70726f7669646572
    app_global_get_ex
    assert // check self.kyc_provider exists
    ==
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:964
    // assert proposer.native in self.proposer_box, err.PROPOSER_DOES_NOT_EXIST
    bytec_3 // 0x70
    uncover 3
    concat
    dup
    box_len
    bury 1
    assert // Proposer does not exist
    // smart_contracts/xgov_registry/contract.py:966
    // active_proposal = self.proposer_box[proposer.native].copy().active_proposal
    dup
    box_get
    pop
    intc_0 // 0
    getbit
    bytec 9 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // smart_contracts/xgov_registry/contract.py:359-363
    // return typ.ProposerBoxValue(
    //     active_proposal=active_proposal,
    //     kyc_status=kyc_status,
    //     kyc_expiring=kyc_expiring,
    // )
    uncover 3
    intc_0 // 0
    getbit
    intc_1 // 1
    swap
    setbit
    uncover 2
    concat
    // smart_contracts/xgov_registry/contract.py:968-970
    // self.proposer_box[proposer.native] = self.make_proposer_box(
    //     active_proposal, kyc_status, kyc_expiring
    // )
    box_put
    // smart_contracts/xgov_registry/contract.py:945
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.declare_committee[routing]() -> void:
declare_committee:
    // smart_contracts/xgov_registry/contract.py:972
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 2
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 3
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:202
    // return Txn.sender == self.committee_manager.value.native
    txn Sender
    intc_0 // 0
    bytec 17 // 0x636f6d6d69747465655f6d616e61676572
    app_global_get_ex
    assert // check self.committee_manager exists
    ==
    // smart_contracts/xgov_registry/contract.py:990
    // assert self.is_xgov_committee_manager(), err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:993
    // size.as_uint64() <= self.max_committee_size.value
    swap
    btoi
    intc_0 // 0
    bytec 47 // 0x6d61785f636f6d6d69747465655f73697a65
    app_global_get_ex
    assert // check self.max_committee_size exists
    dig 1
    >=
    // smart_contracts/xgov_registry/contract.py:992-994
    // assert (
    //     size.as_uint64() <= self.max_committee_size.value
    // ), err.COMMITTEE_SIZE_TOO_LARGE
    assert // Committee size is too large
    // smart_contracts/xgov_registry/contract.py:996
    // self.committee_id.value = committee_id.copy()
    bytec 49 // 0x636f6d6d69747465655f6964
    uncover 3
    app_global_put
    // smart_contracts/xgov_registry/contract.py:997
    // self.committee_members.value = size.as_uint64()
    bytec 45 // 0x636f6d6d69747465655f6d656d62657273
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:998
    // self.committee_votes.value = votes.as_uint64()
    btoi
    bytec 46 // 0x636f6d6d69747465655f766f746573
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:972
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.open_proposal[routing]() -> void:
open_proposal:
    // smart_contracts/xgov_registry/contract.py:1000
    // @arc4.abimethod
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:1017
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:1018
    // assert not self.paused_proposals.value, err.PAUSED_PROPOSALS
    intc_0 // 0
    bytec 10 // 0x7061757365645f70726f706f73616c73
    app_global_get_ex
    assert // check self.paused_proposals exists
    !
    assert // Creation of proposals is paused
    // smart_contracts/xgov_registry/contract.py:1020-1021
    // # Check if the caller is a registered proposer
    // assert Txn.sender in self.proposer_box, err.UNAUTHORIZED
    bytec_3 // 0x70
    txn Sender
    concat
    box_len
    bury 1
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:1023-1024
    // # Check if the proposer already has an active proposal
    // assert not self.proposer_box[
    bytec_3 // 0x70
    // smart_contracts/xgov_registry/contract.py:1025
    // Txn.sender
    txn Sender
    // smart_contracts/xgov_registry/contract.py:1023-1026
    // # Check if the proposer already has an active proposal
    // assert not self.proposer_box[
    //     Txn.sender
    // ].active_proposal, err.ALREADY_ACTIVE_PROPOSAL
    concat
    box_get
    assert // check self.proposer_box entry exists
    intc_0 // 0
    getbit
    bytec 9 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec 9 // 0x00
    ==
    assert // Proposer already has an active proposal
    // smart_contracts/xgov_registry/contract.py:1027
    // assert self.valid_kyc(Txn.sender), err.INVALID_KYC
    txn Sender
    callsub valid_kyc
    assert // Invalid KYC
    // smart_contracts/xgov_registry/contract.py:1029
    // assert Txn.fee >= (Global.min_txn_fee * 3), err.INSUFFICIENT_FEE
    txn Fee
    global MinTxnFee
    pushint 3 // 3
    *
    >=
    assert // Insufficient fee
    // smart_contracts/xgov_registry/contract.py:1033
    // payment.receiver == Global.current_application_address
    dup
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/xgov_registry/contract.py:1031-1034
    // # Ensure the transaction has the correct payment
    // assert (
    //     payment.receiver == Global.current_application_address
    // ), err.WRONG_RECEIVER
    assert // Wrong Receiver
    // smart_contracts/xgov_registry/contract.py:1035
    // assert payment.amount == self.open_proposal_fee.value, err.WRONG_PAYMENT_AMOUNT
    gtxns Amount
    intc_0 // 0
    bytec 11 // 0x6f70656e5f70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.open_proposal_fee exists
    ==
    assert // Wrong payment amount
    // smart_contracts/xgov_registry/contract.py:1037
    // mbr_before = Global.current_application_address.balance
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    // smart_contracts/xgov_registry/contract.py:1039
    // proposal_approval, exist = self.proposal_approval_program.maybe()
    bytec 8 // 0x7061
    box_get
    // smart_contracts/xgov_registry/contract.py:1040
    // assert exist, err.MISSING_PROPOSAL_APPROVAL_PROGRAM
    assert // Missing proposal approval program
    // smart_contracts/xgov_registry/contract.py:1049
    // total_size = proposal_approval.length + compiled_clear_state_1.length
    dup
    len
    pushint 4 // 4
    +
    // smart_contracts/xgov_registry/contract.py:1048
    // bytes_per_page = UInt64(BYTES_PER_APP_PAGE)
    pushint 2048 // 2048
    // smart_contracts/xgov_registry/contract.py:1050
    // extra_pages = total_size // bytes_per_page
    /
    // smart_contracts/xgov_registry/contract.py:1052-1060
    // error, tx = arc4.abi_call(
    //     proposal_contract.Proposal.create,
    //     Txn.sender,
    //     approval_program=proposal_approval,
    //     clear_state_program=compiled_clear_state_1,
    //     global_num_uint=pcfg.GLOBAL_UINTS,
    //     global_num_bytes=pcfg.GLOBAL_BYTES,
    //     extra_program_pages=extra_pages,
    // )
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:1054
    // Txn.sender,
    txn Sender
    swap
    itxn_field ExtraProgramPages
    // smart_contracts/xgov_registry/contract.py:1058
    // global_num_bytes=pcfg.GLOBAL_BYTES,
    pushint 3 // 3
    itxn_field GlobalNumByteSlice
    // smart_contracts/xgov_registry/contract.py:1057
    // global_num_uint=pcfg.GLOBAL_UINTS,
    pushint 20 // 20
    itxn_field GlobalNumUint
    // smart_contracts/xgov_registry/contract.py:1042-1046
    // # clear_state_program is a tuple of 2 Bytes elements where each is max 4096 bytes
    // # we only use the first element here as we assume the clear state program is small enough
    // compiled_clear_state_1, _compiled_clear_state_2 = compile_contract(
    //     proposal_contract.Proposal
    // ).clear_state_program
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    swap
    itxn_field ApprovalProgramPages
    // smart_contracts/xgov_registry/contract.py:1052-1060
    // error, tx = arc4.abi_call(
    //     proposal_contract.Proposal.create,
    //     Txn.sender,
    //     approval_program=proposal_approval,
    //     clear_state_program=compiled_clear_state_1,
    //     global_num_uint=pcfg.GLOBAL_UINTS,
    //     global_num_bytes=pcfg.GLOBAL_BYTES,
    //     extra_program_pages=extra_pages,
    // )
    pushbytes 0x216b1e07 // method "create(address)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dupn 2
    extract 4 0
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    dup
    extract 0 4
    bytec_2 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    itxn CreatedApplicationID
    swap
    // smart_contracts/xgov_registry/contract.py:1062
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    pushint 4 // 4
    <
    bz open_proposal_ternary_false@4
    intc_0 // 0

open_proposal_ternary_merge@5:
    // smart_contracts/xgov_registry/contract.py:1062
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz open_proposal_else_body@12
    // smart_contracts/xgov_registry/contract.py:1063
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    pushint 4 // 4
    dig 1
    dup
    cover 2
    >=
    pushint 4 // 4
    dig 2
    uncover 2
    select
    dig 3
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry/contract.py:1065
    // case err.MISSING_CONFIG:
    bytec 48 // "Missing Config"
    // smart_contracts/xgov_registry/contract.py:1067
    // case err.EMPTY_COMMITTEE_ID:
    pushbytess "Empty Committee ID" "Wrong Committee Members" "Wrong Committee Votes" // "Empty Committee ID", "Wrong Committee Members", "Wrong Committee Votes"
    // smart_contracts/xgov_registry/contract.py:1064-1074
    // match error_without_prefix:
    //     case err.MISSING_CONFIG:
    //         assert False, err.MISSING_CONFIG  # noqa
    //     case err.EMPTY_COMMITTEE_ID:
    //         assert False, err.EMPTY_COMMITTEE_ID  # noqa
    //     case err.WRONG_COMMITTEE_MEMBERS:
    //         assert False, err.WRONG_COMMITTEE_MEMBERS  # noqa
    //     case err.WRONG_COMMITTEE_VOTES:
    //         assert False, err.WRONG_COMMITTEE_VOTES  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 4
    match open_proposal_switch_case_0@7 open_proposal_switch_case_1@8 open_proposal_switch_case_2@9 open_proposal_switch_case_3@10
    // smart_contracts/xgov_registry/contract.py:1074
    // assert False, "Unknown error"  # noqa
    err // Unknown error

open_proposal_switch_case_3@10:
    // smart_contracts/xgov_registry/contract.py:1072
    // assert False, err.WRONG_COMMITTEE_VOTES  # noqa
    err // Wrong Committee Votes

open_proposal_switch_case_2@9:
    // smart_contracts/xgov_registry/contract.py:1070
    // assert False, err.WRONG_COMMITTEE_MEMBERS  # noqa
    err // Wrong Committee Members

open_proposal_switch_case_1@8:
    // smart_contracts/xgov_registry/contract.py:1068
    // assert False, err.EMPTY_COMMITTEE_ID  # noqa
    err // Empty Committee ID

open_proposal_switch_case_0@7:
    // smart_contracts/xgov_registry/contract.py:1066
    // assert False, err.MISSING_CONFIG  # noqa
    err // Missing Config

open_proposal_else_body@12:
    // smart_contracts/xgov_registry/contract.py:1076
    // assert error.native == "", "Unknown error"
    dig 1
    pushbytes ""
    ==
    assert // Unknown error
    // smart_contracts/xgov_registry/contract.py:1078
    // mbr_after = Global.current_application_address.balance
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    // smart_contracts/xgov_registry/contract.py:1080-1081
    // # Update proposer state
    // self.proposer_box[Txn.sender].active_proposal = arc4.Bool(True)  # noqa: FBT003
    bytec_3 // 0x70
    txn Sender
    concat
    dup
    intc_0 // 0
    intc_1 // 1
    box_extract
    intc_0 // 0
    intc_1 // 1
    setbit
    intc_0 // 0
    swap
    box_replace
    // smart_contracts/xgov_registry/contract.py:1083-1088
    // # Transfer funds to the new Proposal App, excluding the MBR needed for the Proposal App
    // itxn.Payment(
    //     receiver=tx.created_app.address,
    //     amount=self.open_proposal_fee.value - (mbr_after - mbr_before),
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:1085
    // receiver=tx.created_app.address,
    dig 3
    dup
    cover 2
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/xgov_registry/contract.py:1086
    // amount=self.open_proposal_fee.value - (mbr_after - mbr_before),
    intc_0 // 0
    bytec 11 // 0x6f70656e5f70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.open_proposal_fee exists
    uncover 2
    dig 8
    -
    -
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_registry/contract.py:1083-1084
    // # Transfer funds to the new Proposal App, excluding the MBR needed for the Proposal App
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry/contract.py:1087
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry/contract.py:1083-1088
    // # Transfer funds to the new Proposal App, excluding the MBR needed for the Proposal App
    // itxn.Payment(
    //     receiver=tx.created_app.address,
    //     amount=self.open_proposal_fee.value - (mbr_after - mbr_before),
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/xgov_registry/contract.py:1090-1091
    // # Increment pending proposals
    // self.pending_proposals.value += 1
    intc_0 // 0
    bytec 7 // 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    intc_1 // 1
    +
    bytec 7 // 0x70656e64696e675f70726f706f73616c73
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:1000
    // @arc4.abimethod
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

open_proposal_ternary_false@4:
    // smart_contracts/xgov_registry/contract.py:1062
    // if error.native.startswith(err.ARC_65_PREFIX):
    dig 3
    extract 6 4
    bytec 13 // "ERR:"
    ==
    b open_proposal_ternary_merge@5


// smart_contracts.xgov_registry.contract.XGovRegistry.vote_proposal[routing]() -> void:
vote_proposal:
    // smart_contracts/xgov_registry/contract.py:1095
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 2
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 3
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 4
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:1126
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:1128-1129
    // # verify proposal id is genuine proposal
    // assert self._is_proposal(proposal_id.as_uint64()), err.INVALID_PROPOSAL
    uncover 3
    btoi
    dup
    callsub _is_proposal
    assert // Invalid proposal
    // smart_contracts/xgov_registry/contract.py:1131-1132
    // # make sure they're voting on behalf of an xGov
    // exists = xgov_address.native in self.xgov_box
    bytec_1 // 0x78
    dig 4
    concat
    dup
    box_len
    bury 1
    // smart_contracts/xgov_registry/contract.py:1133
    // assert exists, err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:1134
    // xgov_box = self.xgov_box[xgov_address.native].copy()
    dup
    box_get
    pop
    // smart_contracts/xgov_registry/contract.py:1136
    // xgov_box.voted_proposals.as_uint64() + UInt64(1)
    dup
    intc_3 // 32
    extract_uint64
    intc_1 // 1
    +
    // smart_contracts/xgov_registry/contract.py:1135-1137
    // self.xgov_box[xgov_address.native].voted_proposals = arc4.UInt64(
    //     xgov_box.voted_proposals.as_uint64() + UInt64(1)
    // )
    itob
    dig 2
    intc_3 // 32
    uncover 2
    box_replace
    // smart_contracts/xgov_registry/contract.py:1139
    // Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/xgov_registry/contract.py:1138-1140
    // self.xgov_box[xgov_address.native].last_vote_timestamp = arc4.UInt64(
    //     Global.latest_timestamp
    // )
    itob
    uncover 2
    pushint 40 // 40
    uncover 2
    box_replace
    // smart_contracts/xgov_registry/contract.py:1142-1143
    // # Verify the caller is using their voting address
    // assert Txn.sender == xgov_box.voting_address.native, err.MUST_BE_VOTING_ADDRESS
    txn Sender
    swap
    extract 0 32
    ==
    assert // Must be voting address
    // smart_contracts/xgov_registry/contract.py:1145-1152
    // # Call the Proposal App to register the vote
    // error, _tx = arc4.abi_call(
    //     proposal_contract.Proposal.vote,
    //     xgov_address,
    //     approval_votes,
    //     rejection_votes,
    //     app_id=proposal_id.as_uint64(),
    // )
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0x1841a0d2 // method "vote(address,uint64,uint64)string"
    itxn_field ApplicationArgs
    uncover 2
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dupn 2
    extract 4 0
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    dup
    extract 0 4
    bytec_2 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry/contract.py:1154
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    pushint 4 // 4
    <
    bz vote_proposal_ternary_false@4
    intc_0 // 0

vote_proposal_ternary_merge@5:
    // smart_contracts/xgov_registry/contract.py:1154
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz vote_proposal_else_body@14
    // smart_contracts/xgov_registry/contract.py:1155
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    pushint 4 // 4
    dig 1
    dup
    cover 2
    >=
    pushint 4 // 4
    dig 2
    uncover 2
    select
    dig 3
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry/contract.py:1157
    // case err.WRONG_PROPOSAL_STATUS:
    bytec 23 // "Wrong Proposal Status or finalized"
    // smart_contracts/xgov_registry/contract.py:1159
    // case err.MISSING_CONFIG:
    bytec 48 // "Missing Config"
    // smart_contracts/xgov_registry/contract.py:1161
    // case err.VOTER_NOT_FOUND:
    pushbytess "Voter not found" "Voter already voted" "Votes exceeded" "Voting Period Expired" // "Voter not found", "Voter already voted", "Votes exceeded", "Voting Period Expired"
    // smart_contracts/xgov_registry/contract.py:1156-1170
    // match error_without_prefix:
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case err.MISSING_CONFIG:
    //         assert False, err.MISSING_CONFIG  # noqa
    //     case err.VOTER_NOT_FOUND:
    //         assert False, err.VOTER_NOT_FOUND  # noqa
    //     case err.VOTER_ALREADY_VOTED:
    //         assert False, err.VOTER_ALREADY_VOTED  # noqa
    //     case err.VOTES_EXCEEDED:
    //         assert False, err.VOTES_EXCEEDED  # noqa
    //     case err.VOTING_PERIOD_EXPIRED:
    //         assert False, err.VOTING_PERIOD_EXPIRED  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 6
    match vote_proposal_switch_case_0@7 vote_proposal_switch_case_1@8 vote_proposal_switch_case_2@9 vote_proposal_switch_case_3@10 vote_proposal_switch_case_4@11 vote_proposal_switch_case_5@12
    // smart_contracts/xgov_registry/contract.py:1170
    // assert False, "Unknown error"  # noqa
    err // Unknown error

vote_proposal_switch_case_5@12:
    // smart_contracts/xgov_registry/contract.py:1168
    // assert False, err.VOTING_PERIOD_EXPIRED  # noqa
    err // Voting Period Expired

vote_proposal_switch_case_4@11:
    // smart_contracts/xgov_registry/contract.py:1166
    // assert False, err.VOTES_EXCEEDED  # noqa
    err // Votes exceeded

vote_proposal_switch_case_3@10:
    // smart_contracts/xgov_registry/contract.py:1164
    // assert False, err.VOTER_ALREADY_VOTED  # noqa
    err // Voter already voted

vote_proposal_switch_case_2@9:
    // smart_contracts/xgov_registry/contract.py:1162
    // assert False, err.VOTER_NOT_FOUND  # noqa
    err // Voter not found

vote_proposal_switch_case_1@8:
    // smart_contracts/xgov_registry/contract.py:1160
    // assert False, err.MISSING_CONFIG  # noqa
    err // Missing Config

vote_proposal_switch_case_0@7:
    // smart_contracts/xgov_registry/contract.py:1158
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status or finalized

vote_proposal_else_body@14:
    // smart_contracts/xgov_registry/contract.py:1172
    // assert error.native == "", "Unknown error"
    dig 1
    pushbytes ""
    ==
    assert // Unknown error
    // smart_contracts/xgov_registry/contract.py:1095
    // @arc4.abimethod()
    intc_1 // 1
    return

vote_proposal_ternary_false@4:
    // smart_contracts/xgov_registry/contract.py:1154
    // if error.native.startswith(err.ARC_65_PREFIX):
    dig 2
    extract 6 4
    bytec 13 // "ERR:"
    ==
    b vote_proposal_ternary_merge@5


// smart_contracts.xgov_registry.contract.XGovRegistry.pay_grant_proposal[routing]() -> void:
pay_grant_proposal:
    // smart_contracts/xgov_registry/contract.py:1174
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:1192-1193
    // # Verify the caller is the xGov Payor
    // assert arc4.Address(Txn.sender) == self.xgov_payor.value, err.UNAUTHORIZED
    txn Sender
    intc_0 // 0
    bytec 15 // 0x78676f765f7061796f72
    app_global_get_ex
    assert // check self.xgov_payor exists
    ==
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:1195-1196
    // # Verify proposal_id is a genuine proposal created by this registry
    // assert self._is_proposal(proposal_id.as_uint64()), err.INVALID_PROPOSAL
    btoi
    dup
    callsub _is_proposal
    assert // Invalid proposal
    // smart_contracts/xgov_registry/contract.py:1198-1199
    // # Read proposal state directly from the Proposal App's global state
    // proposer = self.get_proposal_proposer(proposal_id.as_uint64())
    dup
    callsub get_proposal_proposer
    // smart_contracts/xgov_registry/contract.py:230-232
    // requested_amount, requested_amount_exists = op.AppGlobal.get_ex_uint64(
    //     proposal_id, pcfg.GS_KEY_REQUESTED_AMOUNT
    // )
    dig 1
    // smart_contracts/xgov_registry/contract.py:231
    // proposal_id, pcfg.GS_KEY_REQUESTED_AMOUNT
    pushbytes 0x7265717565737465645f616d6f756e74
    // smart_contracts/xgov_registry/contract.py:230-232
    // requested_amount, requested_amount_exists = op.AppGlobal.get_ex_uint64(
    //     proposal_id, pcfg.GS_KEY_REQUESTED_AMOUNT
    // )
    app_global_get_ex
    // smart_contracts/xgov_registry/contract.py:233
    // assert requested_amount_exists, err.MISSING_KEY
    assert // Missing key in state
    // smart_contracts/xgov_registry/contract.py:1202
    // assert proposer in self.proposer_box, err.WRONG_PROPOSER
    bytec_3 // 0x70
    dig 2
    concat
    box_len
    bury 1
    assert // Wrong proposer
    // smart_contracts/xgov_registry/contract.py:1204
    // assert self.valid_kyc(proposer), err.INVALID_KYC
    dig 1
    callsub valid_kyc
    assert // Invalid KYC
    // smart_contracts/xgov_registry/contract.py:1208
    // self.outstanding_funds.value >= requested_amount
    intc_0 // 0
    bytec 5 // 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    dup
    dig 2
    >=
    // smart_contracts/xgov_registry/contract.py:1206-1209
    // # Verify sufficient funds are available
    // assert (
    //     self.outstanding_funds.value >= requested_amount
    // ), err.INSUFFICIENT_TREASURY_FUNDS
    assert // Insufficient treasury funds
    // smart_contracts/xgov_registry/contract.py:238-239
    // # Transfer the funds to the receiver
    // itxn.Payment(receiver=recipient, amount=amount, fee=0).submit()
    itxn_begin
    dig 1
    itxn_field Amount
    uncover 2
    itxn_field Receiver
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // smart_contracts/xgov_registry/contract.py:241-242
    // # Update the outstanding funds
    // self.outstanding_funds.value -= amount
    swap
    -
    bytec 5 // 0x6f75747374616e64696e675f66756e6473
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:1213-1215
    // error, _tx = arc4.abi_call(
    //     proposal_contract.Proposal.fund, app_id=proposal_id.as_uint64()
    // )
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0x8a5e4c80 // method "fund()string"
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dupn 2
    extract 4 0
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    dup
    extract 0 4
    bytec_2 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry/contract.py:1217
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    pushint 4 // 4
    <
    bz pay_grant_proposal_ternary_false@4
    intc_0 // 0

pay_grant_proposal_ternary_merge@5:
    // smart_contracts/xgov_registry/contract.py:1217
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz pay_grant_proposal_else_body@9
    // smart_contracts/xgov_registry/contract.py:1218
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    pushint 4 // 4
    dig 1
    dup
    cover 2
    >=
    pushint 4 // 4
    dig 2
    uncover 2
    select
    dig 3
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry/contract.py:1220
    // case err.WRONG_PROPOSAL_STATUS:
    bytec 23 // "Wrong Proposal Status or finalized"
    // smart_contracts/xgov_registry/contract.py:1219-1223
    // match error_without_prefix:
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    swap
    match pay_grant_proposal_switch_case_0@7
    // smart_contracts/xgov_registry/contract.py:1223
    // assert False, "Unknown error"  # noqa
    err // Unknown error

pay_grant_proposal_switch_case_0@7:
    // smart_contracts/xgov_registry/contract.py:1221
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status or finalized

pay_grant_proposal_else_body@9:
    // smart_contracts/xgov_registry/contract.py:1225
    // assert error.native == "", "Unknown error"
    dig 1
    pushbytes ""
    ==
    assert // Unknown error
    // smart_contracts/xgov_registry/contract.py:1174
    // @arc4.abimethod()
    intc_1 // 1
    return

pay_grant_proposal_ternary_false@4:
    // smart_contracts/xgov_registry/contract.py:1217
    // if error.native.startswith(err.ARC_65_PREFIX):
    dig 2
    extract 6 4
    bytec 13 // "ERR:"
    ==
    b pay_grant_proposal_ternary_merge@5


// smart_contracts.xgov_registry.contract.XGovRegistry.finalize_proposal[routing]() -> void:
finalize_proposal:
    intc_0 // 0
    dup
    pushbytes ""
    // smart_contracts/xgov_registry/contract.py:1227
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:1243
    // proposal_status = self.get_proposal_status(proposal_id.as_uint64())
    btoi
    dup
    // smart_contracts/xgov_registry/contract.py:215
    // proposal_id, pcfg.GS_KEY_STATUS
    pushbytes 0x737461747573
    // smart_contracts/xgov_registry/contract.py:214-216
    // status, status_exists = op.AppGlobal.get_ex_uint64(
    //     proposal_id, pcfg.GS_KEY_STATUS
    // )
    app_global_get_ex
    swap
    dup
    uncover 2
    // smart_contracts/xgov_registry/contract.py:217
    // assert status_exists, err.MISSING_KEY
    assert // Missing key in state
    // smart_contracts/xgov_registry/contract.py:1244-1246
    // if proposal_status == UInt64(penm.STATUS_EMPTY) or proposal_status == UInt64(
    //     penm.STATUS_DRAFT
    // ):
    bz finalize_proposal_if_body@3
    dup
    pushint 10 // 10
    ==
    bz finalize_proposal_after_if_else@4

finalize_proposal_if_body@3:
    // smart_contracts/xgov_registry/contract.py:1247
    // assert arc4.Address(Txn.sender) == self.xgov_daemon.value, err.UNAUTHORIZED
    txn Sender
    intc_0 // 0
    bytec 18 // 0x78676f765f6461656d6f6e
    app_global_get_ex
    assert // check self.xgov_daemon exists
    ==
    assert // Unauthorized

finalize_proposal_after_if_else@4:
    // smart_contracts/xgov_registry/contract.py:1249-1250
    // # Verify proposal_id is a genuine proposal created by this registry
    // assert self._is_proposal(proposal_id.as_uint64()), err.INVALID_PROPOSAL
    dig 1
    dup
    callsub _is_proposal
    assert // Invalid proposal
    // smart_contracts/xgov_registry/contract.py:1252-1254
    // error, _tx = arc4.abi_call(
    //     proposal_contract.Proposal.finalize, app_id=proposal_id.as_uint64()
    // )
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0x802069b4 // method "finalize()string"
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    bury 6
    dup
    extract 4 0
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    dup
    extract 0 4
    bytec_2 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry/contract.py:1256
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    bury 5
    len
    dup
    bury 4
    pushint 4 // 4
    <
    bz finalize_proposal_ternary_false@7
    intc_0 // 0

finalize_proposal_ternary_merge@8:
    // smart_contracts/xgov_registry/contract.py:1256
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz finalize_proposal_else_body@14
    // smart_contracts/xgov_registry/contract.py:1257
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    pushint 4 // 4
    dig 3
    dup
    cover 2
    >=
    pushint 4 // 4
    dig 2
    uncover 2
    select
    dig 5
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry/contract.py:1259
    // case err.WRONG_PROPOSAL_STATUS:
    bytec 23 // "Wrong Proposal Status or finalized"
    // smart_contracts/xgov_registry/contract.py:1261
    // case err.MISSING_CONFIG:
    bytec 48 // "Missing Config"
    // smart_contracts/xgov_registry/contract.py:1263
    // case err.VOTERS_ASSIGNED:
    pushbytes "There are voters assigned to this proposal"
    // smart_contracts/xgov_registry/contract.py:1258-1266
    // match error_without_prefix:
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case err.MISSING_CONFIG:
    //         assert False, err.MISSING_CONFIG  # noqa
    //     case err.VOTERS_ASSIGNED:
    //         assert False, err.VOTERS_ASSIGNED  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 3
    match finalize_proposal_switch_case_0@10 finalize_proposal_switch_case_1@11 finalize_proposal_switch_case_2@12
    // smart_contracts/xgov_registry/contract.py:1266
    // assert False, "Unknown error"  # noqa
    err // Unknown error

finalize_proposal_switch_case_2@12:
    // smart_contracts/xgov_registry/contract.py:1264
    // assert False, err.VOTERS_ASSIGNED  # noqa
    err // There are voters assigned to this proposal

finalize_proposal_switch_case_1@11:
    // smart_contracts/xgov_registry/contract.py:1262
    // assert False, err.MISSING_CONFIG  # noqa
    err // Missing Config

finalize_proposal_switch_case_0@10:
    // smart_contracts/xgov_registry/contract.py:1260
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status or finalized

finalize_proposal_else_body@14:
    // smart_contracts/xgov_registry/contract.py:1268
    // assert error.native == "", "Unknown error"
    dig 3
    pushbytes ""
    ==
    assert // Unknown error
    // smart_contracts/xgov_registry/contract.py:1270
    // self.decrement_pending_proposals(proposal_id.as_uint64())
    dig 1
    callsub decrement_pending_proposals
    // smart_contracts/xgov_registry/contract.py:1227
    // @arc4.abimethod()
    intc_1 // 1
    return

finalize_proposal_ternary_false@7:
    // smart_contracts/xgov_registry/contract.py:1256
    // if error.native.startswith(err.ARC_65_PREFIX):
    dig 4
    extract 6 4
    bytec 13 // "ERR:"
    ==
    b finalize_proposal_ternary_merge@8


// smart_contracts.xgov_registry.contract.XGovRegistry.drop_proposal[routing]() -> void:
drop_proposal:
    // smart_contracts/xgov_registry/contract.py:1272
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:1287
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:1289-1290
    // # Verify proposal_id is a genuine proposal created by this registry
    // assert self._is_proposal(proposal_id.as_uint64()), err.INVALID_PROPOSAL
    btoi
    dupn 2
    callsub _is_proposal
    assert // Invalid proposal
    // smart_contracts/xgov_registry/contract.py:1292
    // proposer = self.get_proposal_proposer(proposal_id.as_uint64())
    dup
    callsub get_proposal_proposer
    // smart_contracts/xgov_registry/contract.py:1293
    // assert Txn.sender == proposer, err.UNAUTHORIZED
    txn Sender
    ==
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:1295-1297
    // error, _tx = arc4.abi_call(
    //     proposal_contract.Proposal.drop, app_id=proposal_id.as_uint64()
    // )
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0x7371321a // method "drop()string"
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dupn 2
    extract 4 0
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    dup
    extract 0 4
    bytec_2 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry/contract.py:1299
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    pushint 4 // 4
    <
    bz drop_proposal_ternary_false@4
    intc_0 // 0

drop_proposal_ternary_merge@5:
    // smart_contracts/xgov_registry/contract.py:1299
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz drop_proposal_else_body@9
    // smart_contracts/xgov_registry/contract.py:1300
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    pushint 4 // 4
    dig 1
    dup
    cover 2
    >=
    pushint 4 // 4
    dig 2
    uncover 2
    select
    dig 3
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry/contract.py:1302
    // case err.WRONG_PROPOSAL_STATUS:
    bytec 23 // "Wrong Proposal Status or finalized"
    // smart_contracts/xgov_registry/contract.py:1301-1305
    // match error_without_prefix:
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    swap
    match drop_proposal_switch_case_0@7
    // smart_contracts/xgov_registry/contract.py:1305
    // assert False, "Unknown error"  # noqa
    err // Unknown error

drop_proposal_switch_case_0@7:
    // smart_contracts/xgov_registry/contract.py:1303
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status or finalized

drop_proposal_else_body@9:
    // smart_contracts/xgov_registry/contract.py:1307
    // assert error.native == "", "Unknown error"
    dig 1
    pushbytes ""
    ==
    assert // Unknown error
    // smart_contracts/xgov_registry/contract.py:1309
    // self.decrement_pending_proposals(proposal_id.as_uint64())
    dig 3
    callsub decrement_pending_proposals
    // smart_contracts/xgov_registry/contract.py:1272
    // @arc4.abimethod()
    intc_1 // 1
    return

drop_proposal_ternary_false@4:
    // smart_contracts/xgov_registry/contract.py:1299
    // if error.native.startswith(err.ARC_65_PREFIX):
    dig 2
    extract 6 4
    bytec 13 // "ERR:"
    ==
    b drop_proposal_ternary_merge@5


// smart_contracts.xgov_registry.contract.XGovRegistry.deposit_funds[routing]() -> void:
deposit_funds:
    // smart_contracts/xgov_registry/contract.py:1311
    // @arc4.abimethod()
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:1324
    // payment.receiver == Global.current_application_address
    dup
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/xgov_registry/contract.py:1323-1325
    // assert (
    //     payment.receiver == Global.current_application_address
    // ), err.WRONG_RECEIVER
    assert // Wrong Receiver
    // smart_contracts/xgov_registry/contract.py:1326
    // self.outstanding_funds.value += payment.amount
    intc_0 // 0
    bytec 5 // 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    swap
    gtxns Amount
    +
    bytec 5 // 0x6f75747374616e64696e675f66756e6473
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:1311
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_funds[routing]() -> void:
withdraw_funds:
    // smart_contracts/xgov_registry/contract.py:1328
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:1342
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:1344
    // amount.as_uint64() <= self.outstanding_funds.value
    btoi
    intc_0 // 0
    bytec 5 // 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    dup2
    <=
    // smart_contracts/xgov_registry/contract.py:1343-1345
    // assert (
    //     amount.as_uint64() <= self.outstanding_funds.value
    // ), err.INSUFFICIENT_FUNDS
    assert // Insufficient funds
    // smart_contracts/xgov_registry/contract.py:1346
    // assert Txn.fee >= (Global.min_txn_fee * 2), err.INSUFFICIENT_FEE
    txn Fee
    global MinTxnFee
    pushint 2 // 2
    *
    >=
    assert // Insufficient fee
    // smart_contracts/xgov_registry/contract.py:1347
    // self.outstanding_funds.value -= amount.as_uint64()
    dig 1
    -
    bytec 5 // 0x6f75747374616e64696e675f66756e6473
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:1349-1353
    // itxn.Payment(
    //     receiver=self.xgov_manager.value.native,
    //     amount=amount.as_uint64(),
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:1350
    // receiver=self.xgov_manager.value.native,
    intc_0 // 0
    bytec 6 // 0x78676f765f6d616e61676572
    app_global_get_ex
    assert // check self.xgov_manager exists
    itxn_field Receiver
    itxn_field Amount
    // smart_contracts/xgov_registry/contract.py:1349
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry/contract.py:1352
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry/contract.py:1349-1353
    // itxn.Payment(
    //     receiver=self.xgov_manager.value.native,
    //     amount=amount.as_uint64(),
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/xgov_registry/contract.py:1328
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_balance[routing]() -> void:
withdraw_balance:
    // smart_contracts/xgov_registry/contract.py:1367
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:1368
    // assert Txn.fee >= (Global.min_txn_fee * 2), err.INSUFFICIENT_FEE
    txn Fee
    global MinTxnFee
    pushint 2 // 2
    *
    >=
    assert // Insufficient fee
    // smart_contracts/xgov_registry/contract.py:1372
    // Global.current_application_address.balance
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    // smart_contracts/xgov_registry/contract.py:1373
    // - Global.current_application_address.min_balance
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    // smart_contracts/xgov_registry/contract.py:1372-1373
    // Global.current_application_address.balance
    // - Global.current_application_address.min_balance
    -
    // smart_contracts/xgov_registry/contract.py:1374
    // - self.outstanding_funds.value
    intc_0 // 0
    bytec 5 // 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    // smart_contracts/xgov_registry/contract.py:1372-1374
    // Global.current_application_address.balance
    // - Global.current_application_address.min_balance
    // - self.outstanding_funds.value
    -
    // smart_contracts/xgov_registry/contract.py:1377
    // assert amount > 0, err.INSUFFICIENT_FUNDS
    dup
    assert // Insufficient funds
    // smart_contracts/xgov_registry/contract.py:1378-1382
    // itxn.Payment(
    //     receiver=self.xgov_manager.value.native,
    //     amount=amount,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:1379
    // receiver=self.xgov_manager.value.native,
    intc_0 // 0
    bytec 6 // 0x78676f765f6d616e61676572
    app_global_get_ex
    assert // check self.xgov_manager exists
    itxn_field Receiver
    itxn_field Amount
    // smart_contracts/xgov_registry/contract.py:1378
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry/contract.py:1381
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry/contract.py:1378-1382
    // itxn.Payment(
    //     receiver=self.xgov_manager.value.native,
    //     amount=amount,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/xgov_registry/contract.py:1355
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.get_state[routing]() -> void:
get_state:
    // smart_contracts/xgov_registry/contract.py:1391
    // paused_registry=arc4.Bool(bool(self.paused_registry.value)),
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    intc_0 // 0
    !=
    bytec 9 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // smart_contracts/xgov_registry/contract.py:1392
    // paused_proposals=arc4.Bool(bool(self.paused_proposals.value)),
    intc_0 // 0
    bytec 10 // 0x7061757365645f70726f706f73616c73
    app_global_get_ex
    assert // check self.paused_proposals exists
    intc_0 // 0
    !=
    bytec 9 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // smart_contracts/xgov_registry/contract.py:1393
    // xgov_manager=self.xgov_manager.value,
    intc_0 // 0
    bytec 6 // 0x78676f765f6d616e61676572
    app_global_get_ex
    assert // check self.xgov_manager exists
    // smart_contracts/xgov_registry/contract.py:1394
    // xgov_payor=self.xgov_payor.value,
    intc_0 // 0
    bytec 15 // 0x78676f765f7061796f72
    app_global_get_ex
    assert // check self.xgov_payor exists
    // smart_contracts/xgov_registry/contract.py:1395
    // xgov_council=self.xgov_council.value,
    intc_0 // 0
    bytec 24 // 0x78676f765f636f756e63696c
    app_global_get_ex
    assert // check self.xgov_council exists
    // smart_contracts/xgov_registry/contract.py:1396
    // xgov_subscriber=self.xgov_subscriber.value,
    intc_0 // 0
    bytec 14 // 0x78676f765f73756273637269626572
    app_global_get_ex
    assert // check self.xgov_subscriber exists
    // smart_contracts/xgov_registry/contract.py:1397
    // kyc_provider=self.kyc_provider.value,
    intc_0 // 0
    bytec 16 // 0x6b79635f70726f7669646572
    app_global_get_ex
    assert // check self.kyc_provider exists
    // smart_contracts/xgov_registry/contract.py:1398
    // committee_manager=self.committee_manager.value,
    intc_0 // 0
    bytec 17 // 0x636f6d6d69747465655f6d616e61676572
    app_global_get_ex
    assert // check self.committee_manager exists
    // smart_contracts/xgov_registry/contract.py:1399
    // xgov_daemon=self.xgov_daemon.value,
    intc_0 // 0
    bytec 18 // 0x78676f765f6461656d6f6e
    app_global_get_ex
    assert // check self.xgov_daemon exists
    // smart_contracts/xgov_registry/contract.py:1400
    // xgov_fee=arc4.UInt64(self.xgov_fee.value),
    intc_0 // 0
    bytec 19 // 0x78676f765f666565
    app_global_get_ex
    assert // check self.xgov_fee exists
    itob
    // smart_contracts/xgov_registry/contract.py:1401
    // proposer_fee=arc4.UInt64(self.proposer_fee.value),
    intc_0 // 0
    bytec 20 // 0x70726f706f7365725f666565
    app_global_get_ex
    assert // check self.proposer_fee exists
    itob
    // smart_contracts/xgov_registry/contract.py:1402
    // open_proposal_fee=arc4.UInt64(self.open_proposal_fee.value),
    intc_0 // 0
    bytec 11 // 0x6f70656e5f70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.open_proposal_fee exists
    itob
    // smart_contracts/xgov_registry/contract.py:1403
    // daemon_ops_funding_bps=arc4.UInt64(self.daemon_ops_funding_bps.value),
    intc_0 // 0
    bytec 25 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073
    app_global_get_ex
    assert // check self.daemon_ops_funding_bps exists
    itob
    // smart_contracts/xgov_registry/contract.py:1404
    // proposal_commitment_bps=arc4.UInt64(self.proposal_commitment_bps.value),
    intc_0 // 0
    bytec 26 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    app_global_get_ex
    assert // check self.proposal_commitment_bps exists
    itob
    // smart_contracts/xgov_registry/contract.py:1405
    // min_requested_amount=arc4.UInt64(self.min_requested_amount.value),
    intc_0 // 0
    bytec 27 // 0x6d696e5f7265717565737465645f616d6f756e74
    app_global_get_ex
    assert // check self.min_requested_amount exists
    itob
    // smart_contracts/xgov_registry/contract.py:1407
    // arc4.UInt64(self.max_requested_amount_small.value),
    intc_0 // 0
    bytec 28 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    app_global_get_ex
    assert // check self.max_requested_amount_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:1408
    // arc4.UInt64(self.max_requested_amount_medium.value),
    intc_0 // 0
    bytec 29 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    app_global_get_ex
    assert // check self.max_requested_amount_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:1409
    // arc4.UInt64(self.max_requested_amount_large.value),
    intc_0 // 0
    bytec 30 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    app_global_get_ex
    assert // check self.max_requested_amount_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:1406-1410
    // max_requested_amount=arc4.StaticArray[arc4.UInt64, t.Literal[3]](
    //     arc4.UInt64(self.max_requested_amount_small.value),
    //     arc4.UInt64(self.max_requested_amount_medium.value),
    //     arc4.UInt64(self.max_requested_amount_large.value),
    // ),
    cover 2
    concat
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:1412
    // arc4.UInt64(self.discussion_duration_small.value),
    intc_0 // 0
    bytec 31 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    app_global_get_ex
    assert // check self.discussion_duration_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:1413
    // arc4.UInt64(self.discussion_duration_medium.value),
    intc_0 // 0
    bytec 32 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    app_global_get_ex
    assert // check self.discussion_duration_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:1414
    // arc4.UInt64(self.discussion_duration_large.value),
    intc_0 // 0
    bytec 33 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    app_global_get_ex
    assert // check self.discussion_duration_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:1415
    // arc4.UInt64(self.discussion_duration_xlarge.value),
    intc_0 // 0
    bytec 34 // 0x64697363757373696f6e5f6475726174696f6e5f786c61726765
    app_global_get_ex
    assert // check self.discussion_duration_xlarge exists
    itob
    // smart_contracts/xgov_registry/contract.py:1411-1416
    // discussion_duration=arc4.StaticArray[arc4.UInt64, t.Literal[4]](
    //     arc4.UInt64(self.discussion_duration_small.value),
    //     arc4.UInt64(self.discussion_duration_medium.value),
    //     arc4.UInt64(self.discussion_duration_large.value),
    //     arc4.UInt64(self.discussion_duration_xlarge.value),
    // ),
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:1418
    // arc4.UInt64(self.voting_duration_small.value),
    intc_0 // 0
    bytec 35 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    app_global_get_ex
    assert // check self.voting_duration_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:1419
    // arc4.UInt64(self.voting_duration_medium.value),
    intc_0 // 0
    bytec 36 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    app_global_get_ex
    assert // check self.voting_duration_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:1420
    // arc4.UInt64(self.voting_duration_large.value),
    intc_0 // 0
    bytec 37 // 0x766f74696e675f6475726174696f6e5f6c61726765
    app_global_get_ex
    assert // check self.voting_duration_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:1421
    // arc4.UInt64(self.voting_duration_xlarge.value),
    intc_0 // 0
    bytec 38 // 0x766f74696e675f6475726174696f6e5f786c61726765
    app_global_get_ex
    assert // check self.voting_duration_xlarge exists
    itob
    // smart_contracts/xgov_registry/contract.py:1417-1422
    // voting_duration=arc4.StaticArray[arc4.UInt64, t.Literal[4]](
    //     arc4.UInt64(self.voting_duration_small.value),
    //     arc4.UInt64(self.voting_duration_medium.value),
    //     arc4.UInt64(self.voting_duration_large.value),
    //     arc4.UInt64(self.voting_duration_xlarge.value),
    // ),
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:1424
    // arc4.UInt64(self.quorum_small.value),
    intc_0 // 0
    bytec 39 // 0x71756f72756d5f736d616c6c
    app_global_get_ex
    assert // check self.quorum_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:1425
    // arc4.UInt64(self.quorum_medium.value),
    intc_0 // 0
    bytec 40 // 0x71756f72756d5f6d656469756d
    app_global_get_ex
    assert // check self.quorum_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:1426
    // arc4.UInt64(self.quorum_large.value),
    intc_0 // 0
    bytec 41 // 0x71756f72756d5f6c61726765
    app_global_get_ex
    assert // check self.quorum_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:1423-1427
    // quorum=arc4.StaticArray[arc4.UInt64, t.Literal[3]](
    //     arc4.UInt64(self.quorum_small.value),
    //     arc4.UInt64(self.quorum_medium.value),
    //     arc4.UInt64(self.quorum_large.value),
    // ),
    cover 2
    concat
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:1429
    // arc4.UInt64(self.weighted_quorum_small.value),
    intc_0 // 0
    bytec 42 // 0x77656967687465645f71756f72756d5f736d616c6c
    app_global_get_ex
    assert // check self.weighted_quorum_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:1430
    // arc4.UInt64(self.weighted_quorum_medium.value),
    intc_0 // 0
    bytec 43 // 0x77656967687465645f71756f72756d5f6d656469756d
    app_global_get_ex
    assert // check self.weighted_quorum_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:1431
    // arc4.UInt64(self.weighted_quorum_large.value),
    intc_0 // 0
    bytec 44 // 0x77656967687465645f71756f72756d5f6c61726765
    app_global_get_ex
    assert // check self.weighted_quorum_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:1428-1432
    // weighted_quorum=arc4.StaticArray[arc4.UInt64, t.Literal[3]](
    //     arc4.UInt64(self.weighted_quorum_small.value),
    //     arc4.UInt64(self.weighted_quorum_medium.value),
    //     arc4.UInt64(self.weighted_quorum_large.value),
    // ),
    cover 2
    concat
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:1433
    // outstanding_funds=arc4.UInt64(self.outstanding_funds.value),
    intc_0 // 0
    bytec 5 // 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    itob
    // smart_contracts/xgov_registry/contract.py:1434
    // pending_proposals=arc4.UInt64(self.pending_proposals.value),
    intc_0 // 0
    bytec 7 // 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    itob
    // smart_contracts/xgov_registry/contract.py:1435
    // committee_id=self.committee_id.value.copy(),
    intc_0 // 0
    bytec 49 // 0x636f6d6d69747465655f6964
    app_global_get_ex
    assert // check self.committee_id exists
    // smart_contracts/xgov_registry/contract.py:1436
    // committee_members=arc4.UInt64(self.committee_members.value),
    intc_0 // 0
    bytec 45 // 0x636f6d6d69747465655f6d656d62657273
    app_global_get_ex
    assert // check self.committee_members exists
    itob
    // smart_contracts/xgov_registry/contract.py:1437
    // committee_votes=arc4.UInt64(self.committee_votes.value),
    intc_0 // 0
    bytec 46 // 0x636f6d6d69747465655f766f746573
    app_global_get_ex
    assert // check self.committee_votes exists
    itob
    // smart_contracts/xgov_registry/contract.py:1390-1438
    // return typ.TypedGlobalState(
    //     paused_registry=arc4.Bool(bool(self.paused_registry.value)),
    //     paused_proposals=arc4.Bool(bool(self.paused_proposals.value)),
    //     xgov_manager=self.xgov_manager.value,
    //     xgov_payor=self.xgov_payor.value,
    //     xgov_council=self.xgov_council.value,
    //     xgov_subscriber=self.xgov_subscriber.value,
    //     kyc_provider=self.kyc_provider.value,
    //     committee_manager=self.committee_manager.value,
    //     xgov_daemon=self.xgov_daemon.value,
    //     xgov_fee=arc4.UInt64(self.xgov_fee.value),
    //     proposer_fee=arc4.UInt64(self.proposer_fee.value),
    //     open_proposal_fee=arc4.UInt64(self.open_proposal_fee.value),
    //     daemon_ops_funding_bps=arc4.UInt64(self.daemon_ops_funding_bps.value),
    //     proposal_commitment_bps=arc4.UInt64(self.proposal_commitment_bps.value),
    //     min_requested_amount=arc4.UInt64(self.min_requested_amount.value),
    //     max_requested_amount=arc4.StaticArray[arc4.UInt64, t.Literal[3]](
    //         arc4.UInt64(self.max_requested_amount_small.value),
    //         arc4.UInt64(self.max_requested_amount_medium.value),
    //         arc4.UInt64(self.max_requested_amount_large.value),
    //     ),
    //     discussion_duration=arc4.StaticArray[arc4.UInt64, t.Literal[4]](
    //         arc4.UInt64(self.discussion_duration_small.value),
    //         arc4.UInt64(self.discussion_duration_medium.value),
    //         arc4.UInt64(self.discussion_duration_large.value),
    //         arc4.UInt64(self.discussion_duration_xlarge.value),
    //     ),
    //     voting_duration=arc4.StaticArray[arc4.UInt64, t.Literal[4]](
    //         arc4.UInt64(self.voting_duration_small.value),
    //         arc4.UInt64(self.voting_duration_medium.value),
    //         arc4.UInt64(self.voting_duration_large.value),
    //         arc4.UInt64(self.voting_duration_xlarge.value),
    //     ),
    //     quorum=arc4.StaticArray[arc4.UInt64, t.Literal[3]](
    //         arc4.UInt64(self.quorum_small.value),
    //         arc4.UInt64(self.quorum_medium.value),
    //         arc4.UInt64(self.quorum_large.value),
    //     ),
    //     weighted_quorum=arc4.StaticArray[arc4.UInt64, t.Literal[3]](
    //         arc4.UInt64(self.weighted_quorum_small.value),
    //         arc4.UInt64(self.weighted_quorum_medium.value),
    //         arc4.UInt64(self.weighted_quorum_large.value),
    //     ),
    //     outstanding_funds=arc4.UInt64(self.outstanding_funds.value),
    //     pending_proposals=arc4.UInt64(self.pending_proposals.value),
    //     committee_id=self.committee_id.value.copy(),
    //     committee_members=arc4.UInt64(self.committee_members.value),
    //     committee_votes=arc4.UInt64(self.committee_votes.value),
    // )
    uncover 23
    intc_0 // 0
    getbit
    uncover 24
    intc_1 // 1
    uncover 2
    setbit
    uncover 23
    concat
    uncover 22
    concat
    uncover 21
    concat
    uncover 20
    concat
    uncover 19
    concat
    uncover 18
    concat
    uncover 17
    concat
    uncover 16
    concat
    uncover 15
    concat
    uncover 14
    concat
    uncover 13
    concat
    uncover 12
    concat
    uncover 11
    concat
    uncover 10
    concat
    uncover 9
    concat
    uncover 8
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:1384
    // @arc4.abimethod(readonly=True)
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.get_xgov_box[routing]() -> void:
get_xgov_box:
    // smart_contracts/xgov_registry/contract.py:1440
    // @arc4.abimethod(readonly=True)
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry/contract.py:1451
    // return self.xgov_box[xgov_address.native].copy()
    bytec_1 // 0x78
    swap
    concat
    box_get
    assert // check self.xgov_box entry exists
    // smart_contracts/xgov_registry/contract.py:1440
    // @arc4.abimethod(readonly=True)
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.get_proposer_box[routing]() -> void:
get_proposer_box:
    // smart_contracts/xgov_registry/contract.py:1453
    // @arc4.abimethod(readonly=True)
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_registry/contract.py:1464
    // return self.proposer_box[proposer_address.native].copy()
    bytec_3 // 0x70
    swap
    concat
    box_get
    assert // check self.proposer_box entry exists
    // smart_contracts/xgov_registry/contract.py:1453
    // @arc4.abimethod(readonly=True)
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.get_request_box[routing]() -> void:
get_request_box:
    // smart_contracts/xgov_registry/contract.py:1466
    // @arc4.abimethod(readonly=True)
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:1479
    // return self.request_box[request_id.as_uint64()].copy()
    btoi
    itob
    bytec 21 // 0x72
    swap
    concat
    box_get
    assert // check self.request_box entry exists
    // smart_contracts/xgov_registry/contract.py:1466
    // @arc4.abimethod(readonly=True)
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.get_request_unsubscribe_box[routing]() -> void:
get_request_unsubscribe_box:
    // smart_contracts/xgov_registry/contract.py:1481
    // @arc4.abimethod(readonly=True)
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:1494
    // return self.request_unsubscribe_box[request_id.as_uint64()].copy()
    btoi
    itob
    bytec 22 // 0x7275
    swap
    concat
    box_get
    assert // check self.request_unsubscribe_box entry exists
    // smart_contracts/xgov_registry/contract.py:1481
    // @arc4.abimethod(readonly=True)
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.is_proposal[routing]() -> void:
is_proposal:
    // smart_contracts/xgov_registry/contract.py:1496
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // smart_contracts/xgov_registry/contract.py:1498
    // assert self._is_proposal(proposal_id.as_uint64()), err.INVALID_PROPOSAL
    btoi
    callsub _is_proposal
    assert // Invalid proposal
    // smart_contracts/xgov_registry/contract.py:1496
    // @arc4.abimethod()
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager() -> uint64:
is_xgov_manager:
    // smart_contracts/xgov_registry/contract.py:194
    // return Txn.sender == self.xgov_manager.value.native
    txn Sender
    intc_0 // 0
    bytec 6 // 0x78676f765f6d616e61676572
    app_global_get_ex
    assert // check self.xgov_manager exists
    ==
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_subscriber() -> uint64:
is_xgov_subscriber:
    // smart_contracts/xgov_registry/contract.py:198
    // return Txn.sender == self.xgov_subscriber.value.native
    txn Sender
    intc_0 // 0
    bytec 14 // 0x78676f765f73756273637269626572
    app_global_get_ex
    assert // check self.xgov_subscriber exists
    ==
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal(proposal_id: uint64) -> uint64:
_is_proposal:
    // smart_contracts/xgov_registry/contract.py:208-209
    // @subroutine
    // def _is_proposal(self, proposal_id: UInt64) -> bool:
    proto 1 1
    // smart_contracts/xgov_registry/contract.py:210
    // return Application(proposal_id).creator == Global.current_application_address
    frame_dig -1
    app_params_get AppCreator
    assert // application exists
    global CurrentApplicationAddress
    ==
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.get_proposal_proposer(proposal_id: uint64) -> bytes:
get_proposal_proposer:
    // smart_contracts/xgov_registry/contract.py:220-221
    // @subroutine
    // def get_proposal_proposer(self, proposal_id: UInt64) -> Account:
    proto 1 1
    // smart_contracts/xgov_registry/contract.py:222-224
    // proposer_bytes, proposer_exists = op.AppGlobal.get_ex_bytes(
    //     proposal_id, pcfg.GS_KEY_PROPOSER
    // )
    frame_dig -1
    // smart_contracts/xgov_registry/contract.py:223
    // proposal_id, pcfg.GS_KEY_PROPOSER
    pushbytes 0x70726f706f736572
    // smart_contracts/xgov_registry/contract.py:222-224
    // proposer_bytes, proposer_exists = op.AppGlobal.get_ex_bytes(
    //     proposal_id, pcfg.GS_KEY_PROPOSER
    // )
    app_global_get_ex
    // smart_contracts/xgov_registry/contract.py:225
    // assert proposer_exists, err.MISSING_KEY
    assert // Missing key in state
    // smart_contracts/xgov_registry/contract.py:226
    // return Account(proposer_bytes)
    dup
    len
    intc_3 // 32
    ==
    assert // Address length is 32 bytes
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.valid_xgov_payment(payment: uint64) -> uint64:
valid_xgov_payment:
    // smart_contracts/xgov_registry/contract.py:244-245
    // @subroutine
    // def valid_xgov_payment(self, payment: gtxn.PaymentTransaction) -> bool:
    proto 1 1
    // smart_contracts/xgov_registry/contract.py:247
    // payment.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/xgov_registry/contract.py:247-248
    // payment.receiver == Global.current_application_address
    // and payment.amount == self.xgov_fee.value
    bz valid_xgov_payment_bool_false@3
    // smart_contracts/xgov_registry/contract.py:248
    // and payment.amount == self.xgov_fee.value
    frame_dig -1
    gtxns Amount
    intc_0 // 0
    bytec 19 // 0x78676f765f666565
    app_global_get_ex
    assert // check self.xgov_fee exists
    ==
    // smart_contracts/xgov_registry/contract.py:247-248
    // payment.receiver == Global.current_application_address
    // and payment.amount == self.xgov_fee.value
    bz valid_xgov_payment_bool_false@3
    intc_1 // 1
    // smart_contracts/xgov_registry/contract.py:246-249
    // return (
    //     payment.receiver == Global.current_application_address
    //     and payment.amount == self.xgov_fee.value
    // )
    retsub

valid_xgov_payment_bool_false@3:
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:246-249
    // return (
    //     payment.receiver == Global.current_application_address
    //     and payment.amount == self.xgov_fee.value
    // )
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.valid_kyc(address: bytes) -> uint64:
valid_kyc:
    // smart_contracts/xgov_registry/contract.py:251-252
    // @subroutine
    // def valid_kyc(self, address: Account) -> bool:
    proto 1 1
    // smart_contracts/xgov_registry/contract.py:254
    // self.proposer_box[address].kyc_status.native
    bytec_3 // 0x70
    frame_dig -1
    concat
    dup
    box_get
    assert // check self.proposer_box entry exists
    intc_1 // 1
    getbit
    bytec 9 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    // smart_contracts/xgov_registry/contract.py:254-256
    // self.proposer_box[address].kyc_status.native
    // and self.proposer_box[address].kyc_expiring.as_uint64()
    // > Global.latest_timestamp
    bz valid_kyc_bool_false@3
    // smart_contracts/xgov_registry/contract.py:255
    // and self.proposer_box[address].kyc_expiring.as_uint64()
    frame_dig 0
    box_get
    assert // check self.proposer_box entry exists
    intc_1 // 1
    extract_uint64
    // smart_contracts/xgov_registry/contract.py:256
    // > Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/xgov_registry/contract.py:255-256
    // and self.proposer_box[address].kyc_expiring.as_uint64()
    // > Global.latest_timestamp
    >
    // smart_contracts/xgov_registry/contract.py:254-256
    // self.proposer_box[address].kyc_status.native
    // and self.proposer_box[address].kyc_expiring.as_uint64()
    // > Global.latest_timestamp
    bz valid_kyc_bool_false@3
    intc_1 // 1

valid_kyc_bool_merge@4:
    // smart_contracts/xgov_registry/contract.py:253-257
    // return (
    //     self.proposer_box[address].kyc_status.native
    //     and self.proposer_box[address].kyc_expiring.as_uint64()
    //     > Global.latest_timestamp
    // )
    swap
    retsub

valid_kyc_bool_false@3:
    intc_0 // 0
    b valid_kyc_bool_merge@4


// smart_contracts.xgov_registry.contract.XGovRegistry.decrement_pending_proposals(proposal_id: uint64) -> void:
decrement_pending_proposals:
    // smart_contracts/xgov_registry/contract.py:314-315
    // @subroutine
    // def decrement_pending_proposals(self, proposal_id: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:316-317
    // # Decrement pending proposals count
    // self.pending_proposals.value -= 1
    intc_0 // 0
    bytec 7 // 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    intc_1 // 1
    -
    bytec 7 // 0x70656e64696e675f70726f706f73616c73
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:319-320
    // # Update proposer's active proposal status
    // proposer = self.get_proposal_proposer(proposal_id)
    frame_dig -1
    callsub get_proposal_proposer
    // smart_contracts/xgov_registry/contract.py:321
    // self.proposer_box[proposer].active_proposal = arc4.Bool(False)  # noqa: FBT003
    bytec_3 // 0x70
    swap
    concat
    dup
    intc_0 // 0
    intc_1 // 1
    box_extract
    intc_0 // 0
    dup
    setbit
    intc_0 // 0
    swap
    box_replace
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.make_xgov_box(voting_address: bytes) -> bytes:
make_xgov_box:
    // smart_contracts/xgov_registry/contract.py:323-324
    // @subroutine
    // def make_xgov_box(self, voting_address: arc4.Address) -> typ.XGovBoxValue:
    proto 1 1
    // smart_contracts/xgov_registry/contract.py:338
    // subscription_round=arc4.UInt64(Global.round),
    global Round
    itob
    // smart_contracts/xgov_registry/contract.py:334-339
    // return typ.XGovBoxValue(
    //     voting_address=voting_address,
    //     voted_proposals=arc4.UInt64(0),
    //     last_vote_timestamp=arc4.UInt64(0),
    //     subscription_round=arc4.UInt64(Global.round),
    // )
    frame_dig -1
    pushbytes 0x00000000000000000000000000000000
    concat
    swap
    concat
    retsub
