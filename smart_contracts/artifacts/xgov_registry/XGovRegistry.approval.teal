#pragma version 10
#pragma typetrack false

// smart_contracts.xgov_registry.contract.XGovRegistry.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 4 16
    bytecblock 0x7061757365645f7265676973747279 0x6f75747374616e64696e675f66756e6473 0x70 0x70656e64696e675f70726f706f73616c73 0x78676f765f6d616e61676572 0x78676f7673 0x78 0x151f7c75 0x00 0x7061757365645f70726f706f73616c73 0x6f70656e5f70726f706f73616c5f666565 0x78676f765f73756273637269626572 0x78676f765f7061796f72 0x6b79635f70726f7669646572 0x636f6d6d69747465655f6d616e61676572 0x78676f765f6461656d6f6e 0x78676f765f666565 0x70726f706f7365725f666565 0x726571756573745f6964 0x0000000000000000 "Wrong Proposal Status" "ERR:" 0x78676f765f636f756e63696c 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073 0x70726f706f73616c5f636f6d6d69746d656e745f627073 0x6d696e5f7265717565737465645f616d6f756e74 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d 0x6d61785f7265717565737465645f616d6f756e745f6c61726765 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d 0x64697363757373696f6e5f6475726174696f6e5f6c61726765 0x64697363757373696f6e5f6475726174696f6e5f786c61726765 0x766f74696e675f6475726174696f6e5f736d616c6c 0x766f74696e675f6475726174696f6e5f6d656469756d 0x766f74696e675f6475726174696f6e5f6c61726765 0x766f74696e675f6475726174696f6e5f786c61726765 0x71756f72756d5f736d616c6c 0x71756f72756d5f6d656469756d 0x71756f72756d5f6c61726765 0x77656967687465645f71756f72756d5f736d616c6c 0x77656967687465645f71756f72756d5f6d656469756d 0x77656967687465645f71756f72756d5f6c61726765 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573 0x6d61785f636f6d6d69747465655f73697a65 0x72 0x70726f706f736572 0x636f6d6d69747465655f6964 0x737461747573 "Missing Config" TMPL_entropy
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/xgov_registry/contract.py:52-53
    // # Preconditions
    // assert Txn.global_num_byte_slice == cfg.GLOBAL_BYTES, err.WRONG_GLOBAL_BYTES
    txn GlobalNumByteSlice
    pushint 28 // 28
    ==
    assert // Wrong Global Bytes allocation
    // smart_contracts/xgov_registry/contract.py:54
    // assert Txn.global_num_uint == cfg.GLOBAL_UINTS, err.WRONG_GLOBAL_UINTS
    txn GlobalNumUint
    pushint 36 // 36
    ==
    assert // Wrong Global UInts allocation
    // smart_contracts/xgov_registry/contract.py:55
    // assert Txn.local_num_byte_slice == cfg.LOCAL_BYTES, err.WRONG_LOCAL_BYTES
    txn LocalNumByteSlice
    !
    assert // Wrong Local Bytes allocation
    // smart_contracts/xgov_registry/contract.py:56
    // assert Txn.local_num_uint == cfg.LOCAL_UINTS, err.WRONG_LOCAL_UINTS
    txn LocalNumUint
    !
    assert // Wrong Local UInts allocation
    // smart_contracts/xgov_registry/contract.py:58-59
    // # Initialize global state variables
    // self.paused_registry = GlobalState(UInt64(), key=cfg.GS_KEY_PAUSED_REGISTRY)
    bytec_0 // 0x7061757365645f7265676973747279
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:60
    // self.paused_proposals = GlobalState(UInt64(), key=cfg.GS_KEY_PAUSED_PROPOSALS)
    bytec 9 // 0x7061757365645f70726f706f73616c73
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:62
    // self.xgov_manager = GlobalState(arc4.Address(), key=cfg.GS_KEY_XGOV_MANAGER)
    bytec 4 // 0x78676f765f6d616e61676572
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:64
    // arc4.Address(), key=cfg.GS_KEY_XGOV_SUBSCRIBER
    bytec 11 // 0x78676f765f73756273637269626572
    global ZeroAddress
    // smart_contracts/xgov_registry/contract.py:63-65
    // self.xgov_subscriber = GlobalState(
    //     arc4.Address(), key=cfg.GS_KEY_XGOV_SUBSCRIBER
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:66
    // self.xgov_payor = GlobalState(arc4.Address(), key=cfg.GS_KEY_XGOV_PAYOR)
    bytec 12 // 0x78676f765f7061796f72
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:67
    // self.xgov_council = GlobalState(arc4.Address(), key=cfg.GS_KEY_XGOV_COUNCIL)
    bytec 22 // 0x78676f765f636f756e63696c
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:69
    // self.kyc_provider = GlobalState(arc4.Address(), key=cfg.GS_KEY_KYC_PROVIDER)
    bytec 13 // 0x6b79635f70726f7669646572
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:71
    // arc4.Address(), key=cfg.GS_KEY_COMMITTEE_MANAGER
    bytec 14 // 0x636f6d6d69747465655f6d616e61676572
    global ZeroAddress
    // smart_contracts/xgov_registry/contract.py:70-72
    // self.committee_manager = GlobalState(
    //     arc4.Address(), key=cfg.GS_KEY_COMMITTEE_MANAGER
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:73
    // self.xgov_daemon = GlobalState(arc4.Address(), key=cfg.GS_KEY_XGOV_DAEMON)
    bytec 15 // 0x78676f765f6461656d6f6e
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:75
    // self.xgov_fee = GlobalState(UInt64(), key=cfg.GS_KEY_XGOV_FEE)
    bytec 16 // 0x78676f765f666565
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:76
    // self.xgovs = GlobalState(UInt64(), key=cfg.GS_KEY_XGOVS)
    bytec 5 // 0x78676f7673
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:77
    // self.proposer_fee = GlobalState(UInt64(), key=cfg.GS_KEY_PROPOSER_FEE)
    bytec 17 // 0x70726f706f7365725f666565
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:78
    // self.open_proposal_fee = GlobalState(UInt64(), key=cfg.GS_KEY_OPEN_PROPOSAL_FEE)
    bytec 10 // 0x6f70656e5f70726f706f73616c5f666565
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:80
    // UInt64(), key=cfg.GS_KEY_DAEMON_OPS_FUNDING_BPS
    bytec 23 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:79-81
    // self.daemon_ops_funding_bps = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_DAEMON_OPS_FUNDING_BPS
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:83
    // UInt64(), key=cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS
    bytec 24 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:82-84
    // self.proposal_commitment_bps = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:87
    // UInt64(), key=cfg.GS_KEY_MIN_REQUESTED_AMOUNT
    bytec 25 // 0x6d696e5f7265717565737465645f616d6f756e74
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:86-88
    // self.min_requested_amount = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_MIN_REQUESTED_AMOUNT
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:91
    // UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL
    bytec 26 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:90-92
    // self.max_requested_amount_small = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:94
    // UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM
    bytec 27 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:93-95
    // self.max_requested_amount_medium = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:97
    // UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE
    bytec 28 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:96-98
    // self.max_requested_amount_large = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:101
    // UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_SMALL
    bytec 29 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:100-102
    // self.discussion_duration_small = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_SMALL
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:104
    // UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM
    bytec 30 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:103-105
    // self.discussion_duration_medium = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:107
    // UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_LARGE
    bytec 31 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:106-108
    // self.discussion_duration_large = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_LARGE
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:110
    // UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_XLARGE
    bytec 32 // 0x64697363757373696f6e5f6475726174696f6e5f786c61726765
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:109-111
    // self.discussion_duration_xlarge = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_XLARGE
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:114
    // UInt64(), key=cfg.GS_KEY_VOTING_DURATION_SMALL
    bytec 33 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:113-115
    // self.voting_duration_small = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_VOTING_DURATION_SMALL
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:117
    // UInt64(), key=cfg.GS_KEY_VOTING_DURATION_MEDIUM
    bytec 34 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:116-118
    // self.voting_duration_medium = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_VOTING_DURATION_MEDIUM
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:120
    // UInt64(), key=cfg.GS_KEY_VOTING_DURATION_LARGE
    bytec 35 // 0x766f74696e675f6475726174696f6e5f6c61726765
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:119-121
    // self.voting_duration_large = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_VOTING_DURATION_LARGE
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:123
    // UInt64(), key=cfg.GS_KEY_VOTING_DURATION_XLARGE
    bytec 36 // 0x766f74696e675f6475726174696f6e5f786c61726765
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:122-124
    // self.voting_duration_xlarge = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_VOTING_DURATION_XLARGE
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:126
    // self.quorum_small = GlobalState(UInt64(), key=cfg.GS_KEY_QUORUM_SMALL)
    bytec 37 // 0x71756f72756d5f736d616c6c
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:127
    // self.quorum_medium = GlobalState(UInt64(), key=cfg.GS_KEY_QUORUM_MEDIUM)
    bytec 38 // 0x71756f72756d5f6d656469756d
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:128
    // self.quorum_large = GlobalState(UInt64(), key=cfg.GS_KEY_QUORUM_LARGE)
    bytec 39 // 0x71756f72756d5f6c61726765
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:131
    // UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_SMALL
    bytec 40 // 0x77656967687465645f71756f72756d5f736d616c6c
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:130-132
    // self.weighted_quorum_small = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_SMALL
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:134
    // UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM
    bytec 41 // 0x77656967687465645f71756f72756d5f6d656469756d
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:133-135
    // self.weighted_quorum_medium = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:137
    // UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_LARGE
    bytec 42 // 0x77656967687465645f71756f72756d5f6c61726765
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:136-138
    // self.weighted_quorum_large = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_LARGE
    // )
    app_global_put
    // smart_contracts/xgov_registry/contract.py:140
    // self.outstanding_funds = GlobalState(UInt64(), key=cfg.GS_KEY_OUTSTANDING_FUNDS)
    bytec_1 // 0x6f75747374616e64696e675f66756e6473
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:143
    // self.committee_members = GlobalState(UInt64(), key=cfg.GS_KEY_COMMITTEE_MEMBERS)
    bytec 43 // 0x636f6d6d69747465655f6d656d62657273
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:144
    // self.committee_votes = GlobalState(UInt64(), key=cfg.GS_KEY_COMMITTEE_VOTES)
    bytec 44 // 0x636f6d6d69747465655f766f746573
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:146
    // self.pending_proposals = GlobalState(UInt64(), key=cfg.GS_KEY_PENDING_PROPOSALS)
    bytec_3 // 0x70656e64696e675f70726f706f73616c73
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:148
    // self.request_id = GlobalState(UInt64(), key=cfg.GS_KEY_REQUEST_ID)
    bytec 18 // 0x726571756573745f6964
    intc_0 // 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:168
    // UInt64(), key=cfg.GS_KEY_MAX_COMMITTEE_SIZE
    bytec 45 // 0x6d61785f636f6d6d69747465655f73697a65
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:167-169
    // self.max_committee_size = GlobalState(
    //     UInt64(), key=cfg.GS_KEY_MAX_COMMITTEE_SIZE
    // )
    app_global_put

main_after_if_else@2:
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn NumAppArgs
    bz main_after_if_else@38
    pushbytess 0x4c5c61ba 0x86f7e0e6 0x39e26d8a 0x98352e86 0xfa4ed6e2 0xd6c9cc1a 0x5c484055 0x37d6adf1 0xd4216b6e 0xba8520f2 0x1677b30e 0x84b7d268 0x653a0bdb 0x4956c1ab 0xa082cef8 0x76725559 0x45077390 0x3c31bc02 0x0d2c7891 0x0da27885 0x7a4fee43 0x52dd10d7 0xd4d37a64 0x34349dcc 0x158f8dd6 0xdb27b9af 0x913ec7db 0x65610a9f 0xfdc695c2 0xba90ab54 0xb3b58482 0x00b3cef5 0x26983200 // method "create()void", method "pause_registry()void", method "pause_proposals()void", method "resume_registry()void", method "resume_proposals()void", method "set_xgov_manager(address)void", method "set_payor(address)void", method "set_xgov_council(address)void", method "set_xgov_subscriber(address)void", method "set_kyc_provider(address)void", method "set_committee_manager(address)void", method "set_xgov_daemon(address)void", method "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void", method "update_xgov_registry()void", method "subscribe_xgov(address,pay)void", method "unsubscribe_xgov(address)void", method "request_subscribe_xgov(address,address,uint64,pay)void", method "approve_subscribe_xgov(uint64)void", method "reject_subscribe_xgov(uint64)void", method "set_voting_account(address,address)void", method "subscribe_proposer(pay)void", method "set_proposer_kyc(address,bool,uint64)void", method "declare_committee(byte[32],uint64,uint64)void", method "open_proposal(pay)uint64", method "vote_proposal(uint64,address,uint64,uint64)void", method "pay_grant_proposal(uint64)void", method "decommission_proposal(uint64)void", method "drop_proposal(uint64)void", method "deposit_funds(pay)void", method "withdraw_funds(uint64)void", method "withdraw_balance()void", method "get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)", method "is_proposal(uint64)void"
    txna ApplicationArgs 0
    match main_create_route@5 main_pause_registry_route@6 main_pause_proposals_route@7 main_resume_registry_route@8 main_resume_proposals_route@9 main_set_xgov_manager_route@10 main_set_payor_route@11 main_set_xgov_council_route@12 main_set_xgov_subscriber_route@13 main_set_kyc_provider_route@14 main_set_committee_manager_route@15 main_set_xgov_daemon_route@16 main_config_xgov_registry_route@17 main_update_xgov_registry_route@18 main_subscribe_xgov_route@19 main_unsubscribe_xgov_route@20 main_request_subscribe_xgov_route@21 main_approve_subscribe_xgov_route@22 main_reject_subscribe_xgov_route@23 main_set_voting_account_route@24 main_subscribe_proposer_route@25 main_set_proposer_kyc_route@26 main_declare_committee_route@27 main_open_proposal_route@28 main_vote_proposal_route@29 main_pay_grant_proposal_route@30 main_decommission_proposal_route@31 main_drop_proposal_route@32 main_deposit_funds_route@33 main_withdraw_funds_route@34 main_withdraw_balance_route@35 main_get_state_route@36 main_is_proposal_route@37

main_after_if_else@38:
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    intc_0 // 0
    return

main_is_proposal_route@37:
    // smart_contracts/xgov_registry/contract.py:1153
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:1153
    // @arc4.abimethod()
    callsub is_proposal
    intc_1 // 1
    return

main_get_state_route@36:
    // smart_contracts/xgov_registry/contract.py:1097
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_state
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_withdraw_balance_route@35:
    // smart_contracts/xgov_registry/contract.py:1068
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub withdraw_balance
    intc_1 // 1
    return

main_withdraw_funds_route@34:
    // smart_contracts/xgov_registry/contract.py:1043
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry/contract.py:1043
    // @arc4.abimethod()
    callsub withdraw_funds
    intc_1 // 1
    return

main_deposit_funds_route@33:
    // smart_contracts/xgov_registry/contract.py:1026
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:1026
    // @arc4.abimethod()
    callsub deposit_funds
    intc_1 // 1
    return

main_drop_proposal_route@32:
    // smart_contracts/xgov_registry/contract.py:982
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:982
    // @arc4.abimethod()
    callsub drop_proposal
    intc_1 // 1
    return

main_decommission_proposal_route@31:
    // smart_contracts/xgov_registry/contract.py:931
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:931
    // @arc4.abimethod()
    callsub decommission_proposal
    intc_1 // 1
    return

main_pay_grant_proposal_route@30:
    // smart_contracts/xgov_registry/contract.py:870
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:870
    // @arc4.abimethod()
    callsub pay_grant_proposal
    intc_1 // 1
    return

main_vote_proposal_route@29:
    // smart_contracts/xgov_registry/contract.py:787
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/xgov_registry/contract.py:787
    // @arc4.abimethod()
    callsub vote_proposal
    intc_1 // 1
    return

main_open_proposal_route@28:
    // smart_contracts/xgov_registry/contract.py:728
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:728
    // @arc4.abimethod
    callsub open_proposal
    itob
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_declare_committee_route@27:
    // smart_contracts/xgov_registry/contract.py:700
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/xgov_registry/contract.py:700
    // @arc4.abimethod()
    callsub declare_committee
    intc_1 // 1
    return

main_set_proposer_kyc_route@26:
    // smart_contracts/xgov_registry/contract.py:671
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/xgov_registry/contract.py:671
    // @arc4.abimethod()
    callsub set_proposer_kyc
    intc_1 // 1
    return

main_subscribe_proposer_route@25:
    // smart_contracts/xgov_registry/contract.py:642
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:642
    // @arc4.abimethod()
    callsub subscribe_proposer
    intc_1 // 1
    return

main_set_voting_account_route@24:
    // smart_contracts/xgov_registry/contract.py:612
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/xgov_registry/contract.py:612
    // @arc4.abimethod()
    callsub set_voting_account
    intc_1 // 1
    return

main_reject_subscribe_xgov_route@23:
    // smart_contracts/xgov_registry/contract.py:595
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:595
    // @arc4.abimethod()
    callsub reject_subscribe_xgov
    intc_1 // 1
    return

main_approve_subscribe_xgov_route@22:
    // smart_contracts/xgov_registry/contract.py:569
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:569
    // @arc4.abimethod()
    callsub approve_subscribe_xgov
    intc_1 // 1
    return

main_request_subscribe_xgov_route@21:
    // smart_contracts/xgov_registry/contract.py:528
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:528
    // @arc4.abimethod()
    callsub request_subscribe_xgov
    intc_1 // 1
    return

main_unsubscribe_xgov_route@20:
    // smart_contracts/xgov_registry/contract.py:501
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:501
    // @arc4.abimethod()
    callsub unsubscribe_xgov
    intc_1 // 1
    return

main_subscribe_xgov_route@19:
    // smart_contracts/xgov_registry/contract.py:471
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:471
    // @arc4.abimethod()
    callsub subscribe_xgov
    intc_1 // 1
    return

main_update_xgov_registry_route@18:
    // smart_contracts/xgov_registry/contract.py:459
    // @arc4.abimethod(allow_actions=["UpdateApplication"])
    txn OnCompletion
    intc_2 // UpdateApplication
    ==
    assert // OnCompletion is not UpdateApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub update_xgov_registry
    intc_1 // 1
    return

main_config_xgov_registry_route@17:
    // smart_contracts/xgov_registry/contract.py:410
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:410
    // @arc4.abimethod()
    callsub config_xgov_registry
    intc_1 // 1
    return

main_set_xgov_daemon_route@16:
    // smart_contracts/xgov_registry/contract.py:395
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:395
    // @arc4.abimethod()
    callsub set_xgov_daemon
    intc_1 // 1
    return

main_set_committee_manager_route@15:
    // smart_contracts/xgov_registry/contract.py:380
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:380
    // @arc4.abimethod()
    callsub set_committee_manager
    intc_1 // 1
    return

main_set_kyc_provider_route@14:
    // smart_contracts/xgov_registry/contract.py:365
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:365
    // @arc4.abimethod()
    callsub set_kyc_provider
    intc_1 // 1
    return

main_set_xgov_subscriber_route@13:
    // smart_contracts/xgov_registry/contract.py:350
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:350
    // @arc4.abimethod()
    callsub set_xgov_subscriber
    intc_1 // 1
    return

main_set_xgov_council_route@12:
    // smart_contracts/xgov_registry/contract.py:335
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:335
    // @arc4.abimethod()
    callsub set_xgov_council
    intc_1 // 1
    return

main_set_payor_route@11:
    // smart_contracts/xgov_registry/contract.py:320
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:320
    // @arc4.abimethod()
    callsub set_payor
    intc_1 // 1
    return

main_set_xgov_manager_route@10:
    // smart_contracts/xgov_registry/contract.py:305
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry/contract.py:42-50
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:305
    // @arc4.abimethod()
    callsub set_xgov_manager
    intc_1 // 1
    return

main_resume_proposals_route@9:
    // smart_contracts/xgov_registry/contract.py:296
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub resume_proposals
    intc_1 // 1
    return

main_resume_registry_route@8:
    // smart_contracts/xgov_registry/contract.py:287
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub resume_registry
    intc_1 // 1
    return

main_pause_proposals_route@7:
    // smart_contracts/xgov_registry/contract.py:278
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub pause_proposals
    intc_1 // 1
    return

main_pause_registry_route@6:
    // smart_contracts/xgov_registry/contract.py:269
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub pause_registry
    intc_1 // 1
    return

main_create_route@5:
    // smart_contracts/xgov_registry/contract.py:260
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub create
    intc_1 // 1
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager() -> uint64:
is_xgov_manager:
    // smart_contracts/xgov_registry/contract.py:177
    // return Txn.sender == self.xgov_manager.value.native
    txn Sender
    intc_0 // 0
    bytec 4 // 0x78676f765f6d616e61676572
    app_global_get_ex
    assert // check self.xgov_manager exists
    ==
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_subscriber() -> uint64:
is_xgov_subscriber:
    // smart_contracts/xgov_registry/contract.py:181
    // return Txn.sender == self.xgov_subscriber.value.native
    txn Sender
    intc_0 // 0
    bytec 11 // 0x78676f765f73756273637269626572
    app_global_get_ex
    assert // check self.xgov_subscriber exists
    ==
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal(proposal_id: bytes) -> uint64:
_is_proposal:
    // smart_contracts/xgov_registry/contract.py:191-192
    // @subroutine
    // def _is_proposal(self, proposal_id: arc4.UInt64) -> bool:
    proto 1 1
    // smart_contracts/xgov_registry/contract.py:194
    // Application(proposal_id.native).creator
    frame_dig -1
    btoi
    app_params_get AppCreator
    assert // application exists
    // smart_contracts/xgov_registry/contract.py:195
    // == Global.current_application_address
    global CurrentApplicationAddress
    // smart_contracts/xgov_registry/contract.py:194-195
    // Application(proposal_id.native).creator
    // == Global.current_application_address
    ==
    // smart_contracts/xgov_registry/contract.py:193-196
    // return (
    //     Application(proposal_id.native).creator
    //     == Global.current_application_address
    // )
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.valid_xgov_payment(payment: uint64) -> uint64:
valid_xgov_payment:
    // smart_contracts/xgov_registry/contract.py:210-211
    // @subroutine
    // def valid_xgov_payment(self, payment: gtxn.PaymentTransaction) -> bool:
    proto 1 1
    // smart_contracts/xgov_registry/contract.py:213
    // payment.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/xgov_registry/contract.py:213-214
    // payment.receiver == Global.current_application_address
    // and payment.amount == self.xgov_fee.value
    bz valid_xgov_payment_bool_false@3
    // smart_contracts/xgov_registry/contract.py:214
    // and payment.amount == self.xgov_fee.value
    frame_dig -1
    gtxns Amount
    intc_0 // 0
    bytec 16 // 0x78676f765f666565
    app_global_get_ex
    assert // check self.xgov_fee exists
    ==
    // smart_contracts/xgov_registry/contract.py:213-214
    // payment.receiver == Global.current_application_address
    // and payment.amount == self.xgov_fee.value
    bz valid_xgov_payment_bool_false@3
    intc_1 // 1
    // smart_contracts/xgov_registry/contract.py:212-215
    // return (
    //     payment.receiver == Global.current_application_address
    //     and payment.amount == self.xgov_fee.value
    // )
    retsub

valid_xgov_payment_bool_false@3:
    intc_0 // 0
    // smart_contracts/xgov_registry/contract.py:212-215
    // return (
    //     payment.receiver == Global.current_application_address
    //     and payment.amount == self.xgov_fee.value
    // )
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.valid_kyc(address: bytes) -> uint64:
valid_kyc:
    // smart_contracts/xgov_registry/contract.py:217-218
    // @subroutine
    // def valid_kyc(self, address: Account) -> bool:
    proto 1 1
    // smart_contracts/xgov_registry/contract.py:220
    // self.proposer_box[address].kyc_status.native
    bytec_2 // 0x70
    frame_dig -1
    concat
    dup
    box_get
    assert // check self.proposer_box entry exists
    intc_1 // 1
    getbit
    bytec 8 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    // smart_contracts/xgov_registry/contract.py:220-221
    // self.proposer_box[address].kyc_status.native
    // and self.proposer_box[address].kyc_expiring.native > Global.latest_timestamp
    bz valid_kyc_bool_false@3
    // smart_contracts/xgov_registry/contract.py:221
    // and self.proposer_box[address].kyc_expiring.native > Global.latest_timestamp
    frame_dig 0
    box_get
    assert // check self.proposer_box entry exists
    intc_1 // 1
    extract_uint64
    global LatestTimestamp
    >
    // smart_contracts/xgov_registry/contract.py:220-221
    // self.proposer_box[address].kyc_status.native
    // and self.proposer_box[address].kyc_expiring.native > Global.latest_timestamp
    bz valid_kyc_bool_false@3
    intc_1 // 1

valid_kyc_bool_merge@4:
    // smart_contracts/xgov_registry/contract.py:219-222
    // return (
    //     self.proposer_box[address].kyc_status.native
    //     and self.proposer_box[address].kyc_expiring.native > Global.latest_timestamp
    // )
    swap
    retsub

valid_kyc_bool_false@3:
    intc_0 // 0
    b valid_kyc_bool_merge@4


// smart_contracts.xgov_registry.contract.XGovRegistry.create() -> void:
create:
    // smart_contracts/xgov_registry/contract.py:266
    // self.xgov_manager.value = arc4.Address(Txn.sender)
    bytec 4 // 0x78676f765f6d616e61676572
    txn Sender
    app_global_put
    // smart_contracts/xgov_registry/contract.py:173
    // return TemplateVar[Bytes]("entropy")  # trick to allow fresh deployment
    bytec 51 // TMPL_entropy
    // smart_contracts/xgov_registry/contract.py:267
    // assert self.entropy() == TemplateVar[Bytes]("entropy")
    dup
    ==
    assert
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.pause_registry() -> void:
pause_registry:
    // smart_contracts/xgov_registry/contract.py:275
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:276
    // self.paused_registry.value = UInt64(1)
    bytec_0 // 0x7061757365645f7265676973747279
    intc_1 // 1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.pause_proposals() -> void:
pause_proposals:
    // smart_contracts/xgov_registry/contract.py:284
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:285
    // self.paused_proposals.value = UInt64(1)
    bytec 9 // 0x7061757365645f70726f706f73616c73
    intc_1 // 1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.resume_registry() -> void:
resume_registry:
    // smart_contracts/xgov_registry/contract.py:293
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:294
    // self.paused_registry.value = UInt64(0)
    bytec_0 // 0x7061757365645f7265676973747279
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.resume_proposals() -> void:
resume_proposals:
    // smart_contracts/xgov_registry/contract.py:302
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:303
    // self.paused_proposals.value = UInt64(0)
    bytec 9 // 0x7061757365645f70726f706f73616c73
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_manager(manager: bytes) -> void:
set_xgov_manager:
    // smart_contracts/xgov_registry/contract.py:305-306
    // @arc4.abimethod()
    // def set_xgov_manager(self, manager: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:317
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:318
    // self.xgov_manager.value = manager
    bytec 4 // 0x78676f765f6d616e61676572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_payor(payor: bytes) -> void:
set_payor:
    // smart_contracts/xgov_registry/contract.py:320-321
    // @arc4.abimethod()
    // def set_payor(self, payor: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:332
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:333
    // self.xgov_payor.value = payor
    bytec 12 // 0x78676f765f7061796f72
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_council(council: bytes) -> void:
set_xgov_council:
    // smart_contracts/xgov_registry/contract.py:335-336
    // @arc4.abimethod()
    // def set_xgov_council(self, council: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:347
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:348
    // self.xgov_council.value = council
    bytec 22 // 0x78676f765f636f756e63696c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_subscriber(subscriber: bytes) -> void:
set_xgov_subscriber:
    // smart_contracts/xgov_registry/contract.py:350-351
    // @arc4.abimethod()
    // def set_xgov_subscriber(self, subscriber: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:362
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:363
    // self.xgov_subscriber.value = subscriber
    bytec 11 // 0x78676f765f73756273637269626572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_kyc_provider(provider: bytes) -> void:
set_kyc_provider:
    // smart_contracts/xgov_registry/contract.py:365-366
    // @arc4.abimethod()
    // def set_kyc_provider(self, provider: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:377
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:378
    // self.kyc_provider.value = provider
    bytec 13 // 0x6b79635f70726f7669646572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_committee_manager(manager: bytes) -> void:
set_committee_manager:
    // smart_contracts/xgov_registry/contract.py:380-381
    // @arc4.abimethod()
    // def set_committee_manager(self, manager: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:392
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:393
    // self.committee_manager.value = manager
    bytec 14 // 0x636f6d6d69747465655f6d616e61676572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_daemon(xgov_daemon: bytes) -> void:
set_xgov_daemon:
    // smart_contracts/xgov_registry/contract.py:395-396
    // @arc4.abimethod()
    // def set_xgov_daemon(self, xgov_daemon: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:407
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:408
    // self.xgov_daemon.value = xgov_daemon
    bytec 15 // 0x78676f765f6461656d6f6e
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.config_xgov_registry(config: bytes) -> void:
config_xgov_registry:
    // smart_contracts/xgov_registry/contract.py:410-411
    // @arc4.abimethod()
    // def config_xgov_registry(self, config: typ.XGovRegistryConfig) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:423
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:189
    // return self.pending_proposals.value == 0
    intc_0 // 0
    bytec_3 // 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    !
    // smart_contracts/xgov_registry/contract.py:424
    // assert self.no_pending_proposals(), err.NO_PENDING_PROPOSALS
    assert // Cannot perform operation with pending proposals
    // smart_contracts/xgov_registry/contract.py:427
    // config.open_proposal_fee.native, config.daemon_ops_funding_bps.native
    frame_dig -1
    intc_3 // 16
    extract_uint64
    frame_dig -1
    pushint 24 // 24
    extract_uint64
    // smart_contracts/xgov_registry/contract.py:228
    // return amount * fraction_in_bps // BPS
    dup2
    *
    pushint 10000 // 10000
    /
    // smart_contracts/xgov_registry/contract.py:247
    // UInt64(MAX_MBR_PER_APP + MAX_MBR_PER_BOX + ACCOUNT_MBR) + daemon_ops_funding
    pushint 16835300 // 16835300
    +
    // smart_contracts/xgov_registry/contract.py:250
    // assert open_proposal_fee > to_substract, err.INVALID_OPEN_PROPOSAL_FEE
    dig 2
    dig 1
    >
    assert // Invalid open proposal fee
    // smart_contracts/xgov_registry/contract.py:252
    // mbr_available_for_committee = open_proposal_fee - to_substract
    dig 2
    swap
    -
    // smart_contracts/xgov_registry/contract.py:254-256
    // per_voter_mbr = (
    //     UInt64(pcfg.VOTER_BOX_KEY_SIZE + pcfg.VOTER_BOX_VALUE_SIZE)
    // ) * PER_BYTE_IN_BOX_MBR + PER_BOX_MBR
    pushint 19300 // 19300
    // smart_contracts/xgov_registry/contract.py:258
    // self.max_committee_size.value = mbr_available_for_committee // per_voter_mbr
    /
    bytec 45 // 0x6d61785f636f6d6d69747465655f73697a65
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:430
    // self.xgov_fee.value = config.xgov_fee.native
    frame_dig -1
    intc_0 // 0
    extract_uint64
    bytec 16 // 0x78676f765f666565
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:431
    // self.proposer_fee.value = config.proposer_fee.native
    frame_dig -1
    pushint 8 // 8
    extract_uint64
    bytec 17 // 0x70726f706f7365725f666565
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:432
    // self.open_proposal_fee.value = config.open_proposal_fee.native
    bytec 10 // 0x6f70656e5f70726f706f73616c5f666565
    uncover 2
    app_global_put
    // smart_contracts/xgov_registry/contract.py:433
    // self.daemon_ops_funding_bps.value = config.daemon_ops_funding_bps.native
    bytec 23 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:434
    // self.proposal_commitment_bps.value = config.proposal_commitment_bps.native
    frame_dig -1
    pushint 32 // 32
    extract_uint64
    bytec 24 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:436
    // self.min_requested_amount.value = config.min_requested_amount.native
    frame_dig -1
    pushint 40 // 40
    extract_uint64
    bytec 25 // 0x6d696e5f7265717565737465645f616d6f756e74
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:437
    // self.max_requested_amount_small.value = config.max_requested_amount[0].native
    frame_dig -1
    extract 48 24 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    extract_uint64
    bytec 26 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:438
    // self.max_requested_amount_medium.value = config.max_requested_amount[1].native
    dup
    pushint 8 // 8
    extract_uint64
    bytec 27 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:439
    // self.max_requested_amount_large.value = config.max_requested_amount[2].native
    intc_3 // 16
    extract_uint64
    bytec 28 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:441
    // self.discussion_duration_small.value = config.discussion_duration[0].native
    frame_dig -1
    extract 72 32 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    extract_uint64
    bytec 29 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:442
    // self.discussion_duration_medium.value = config.discussion_duration[1].native
    dup
    pushint 8 // 8
    extract_uint64
    bytec 30 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:443
    // self.discussion_duration_large.value = config.discussion_duration[2].native
    dup
    intc_3 // 16
    extract_uint64
    bytec 31 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:444
    // self.discussion_duration_xlarge.value = config.discussion_duration[3].native
    pushint 24 // 24
    extract_uint64
    bytec 32 // 0x64697363757373696f6e5f6475726174696f6e5f786c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:446
    // self.voting_duration_small.value = config.voting_duration[0].native
    frame_dig -1
    extract 104 32 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    extract_uint64
    bytec 33 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:447
    // self.voting_duration_medium.value = config.voting_duration[1].native
    dup
    pushint 8 // 8
    extract_uint64
    bytec 34 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:448
    // self.voting_duration_large.value = config.voting_duration[2].native
    dup
    intc_3 // 16
    extract_uint64
    bytec 35 // 0x766f74696e675f6475726174696f6e5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:449
    // self.voting_duration_xlarge.value = config.voting_duration[3].native
    pushint 24 // 24
    extract_uint64
    bytec 36 // 0x766f74696e675f6475726174696f6e5f786c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:451
    // self.quorum_small.value = config.quorum[0].native
    frame_dig -1
    extract 136 24 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    extract_uint64
    bytec 37 // 0x71756f72756d5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:452
    // self.quorum_medium.value = config.quorum[1].native
    dup
    pushint 8 // 8
    extract_uint64
    bytec 38 // 0x71756f72756d5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:453
    // self.quorum_large.value = config.quorum[2].native
    intc_3 // 16
    extract_uint64
    bytec 39 // 0x71756f72756d5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:455
    // self.weighted_quorum_small.value = config.weighted_quorum[0].native
    frame_dig -1
    extract 160 24 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    extract_uint64
    bytec 40 // 0x77656967687465645f71756f72756d5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:456
    // self.weighted_quorum_medium.value = config.weighted_quorum[1].native
    dup
    pushint 8 // 8
    extract_uint64
    bytec 41 // 0x77656967687465645f71756f72756d5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:457
    // self.weighted_quorum_large.value = config.weighted_quorum[2].native
    intc_3 // 16
    extract_uint64
    bytec 42 // 0x77656967687465645f71756f72756d5f6c61726765
    swap
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.update_xgov_registry() -> void:
update_xgov_registry:
    // smart_contracts/xgov_registry/contract.py:469
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_xgov(voting_address: bytes, payment: uint64) -> void:
subscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:471-474
    // @arc4.abimethod()
    // def subscribe_xgov(
    //     self, voting_address: arc4.Address, payment: gtxn.PaymentTransaction
    // ) -> None:
    proto 2 0
    // smart_contracts/xgov_registry/contract.py:487
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:489
    // assert Txn.sender not in self.xgov_box, err.ALREADY_XGOV
    bytec 6 // 0x78
    txn Sender
    concat
    box_len
    bury 1
    !
    assert // Already an xGov
    // smart_contracts/xgov_registry/contract.py:490-491
    // # check payment
    // assert self.valid_xgov_payment(payment), err.INVALID_PAYMENT
    frame_dig -1
    callsub valid_xgov_payment
    assert // Invalid payment
    // smart_contracts/xgov_registry/contract.py:493-498
    // # create box
    // self.xgov_box[Txn.sender] = typ.XGovBoxValue(
    //     voting_address=voting_address,
    //     voted_proposals=arc4.UInt64(0),
    //     last_vote_timestamp=arc4.UInt64(0),
    // )
    frame_dig -2
    // smart_contracts/xgov_registry/contract.py:496
    // voted_proposals=arc4.UInt64(0),
    bytec 19 // 0x0000000000000000
    // smart_contracts/xgov_registry/contract.py:493-498
    // # create box
    // self.xgov_box[Txn.sender] = typ.XGovBoxValue(
    //     voting_address=voting_address,
    //     voted_proposals=arc4.UInt64(0),
    //     last_vote_timestamp=arc4.UInt64(0),
    // )
    concat
    // smart_contracts/xgov_registry/contract.py:497
    // last_vote_timestamp=arc4.UInt64(0),
    bytec 19 // 0x0000000000000000
    // smart_contracts/xgov_registry/contract.py:493-498
    // # create box
    // self.xgov_box[Txn.sender] = typ.XGovBoxValue(
    //     voting_address=voting_address,
    //     voted_proposals=arc4.UInt64(0),
    //     last_vote_timestamp=arc4.UInt64(0),
    // )
    concat
    // smart_contracts/xgov_registry/contract.py:493-494
    // # create box
    // self.xgov_box[Txn.sender] = typ.XGovBoxValue(
    bytec 6 // 0x78
    txn Sender
    concat
    // smart_contracts/xgov_registry/contract.py:493-498
    // # create box
    // self.xgov_box[Txn.sender] = typ.XGovBoxValue(
    //     voting_address=voting_address,
    //     voted_proposals=arc4.UInt64(0),
    //     last_vote_timestamp=arc4.UInt64(0),
    // )
    swap
    box_put
    // smart_contracts/xgov_registry/contract.py:499
    // self.xgovs.value += 1
    intc_0 // 0
    bytec 5 // 0x78676f7673
    app_global_get_ex
    assert // check self.xgovs exists
    intc_1 // 1
    +
    bytec 5 // 0x78676f7673
    swap
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.unsubscribe_xgov(xgov_address: bytes) -> void:
unsubscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:501-502
    // @arc4.abimethod()
    // def unsubscribe_xgov(self, xgov_address: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:513
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:515-516
    // # ensure the provided address is an xGov
    // assert xgov_address.native in self.xgov_box, err.UNAUTHORIZED
    bytec 6 // 0x78
    frame_dig -1
    concat
    dupn 2
    box_len
    bury 1
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:517-518
    // # get the voting address
    // voting_address = self.xgov_box[xgov_address.native].voting_address.native
    box_get
    assert // check self.xgov_box entry exists
    extract 0 32 // on error: Index access is out of bounds
    // smart_contracts/xgov_registry/contract.py:521
    // xgov_address.native == Txn.sender or voting_address == Txn.sender
    frame_dig -1
    txn Sender
    ==
    bnz unsubscribe_xgov_bool_true@2
    frame_dig 1
    txn Sender
    ==
    bz unsubscribe_xgov_bool_false@3

unsubscribe_xgov_bool_true@2:
    intc_1 // 1

unsubscribe_xgov_bool_merge@4:
    // smart_contracts/xgov_registry/contract.py:519-522
    // # ensure the sender is the xGov or the voting address
    // assert (
    //     xgov_address.native == Txn.sender or voting_address == Txn.sender
    // ), err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:524-525
    // # delete box
    // del self.xgov_box[xgov_address.native]
    frame_dig 0
    box_del
    pop
    // smart_contracts/xgov_registry/contract.py:526
    // self.xgovs.value -= 1
    intc_0 // 0
    bytec 5 // 0x78676f7673
    app_global_get_ex
    assert // check self.xgovs exists
    intc_1 // 1
    -
    bytec 5 // 0x78676f7673
    swap
    app_global_put
    retsub

unsubscribe_xgov_bool_false@3:
    intc_0 // 0
    b unsubscribe_xgov_bool_merge@4


// smart_contracts.xgov_registry.contract.XGovRegistry.request_subscribe_xgov(xgov_address: bytes, owner_address: bytes, relation_type: bytes, payment: uint64) -> void:
request_subscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:528-535
    // @arc4.abimethod()
    // def request_subscribe_xgov(
    //     self,
    //     xgov_address: arc4.Address,
    //     owner_address: arc4.Address,
    //     relation_type: arc4.UInt64,
    //     payment: gtxn.PaymentTransaction,
    // ) -> None:
    proto 4 0
    // smart_contracts/xgov_registry/contract.py:550
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:552-553
    // # ensure the xgov_address is not already an xGov
    // assert xgov_address.native not in self.xgov_box, err.ALREADY_XGOV
    bytec 6 // 0x78
    frame_dig -4
    concat
    box_len
    bury 1
    !
    assert // Already an xGov
    // smart_contracts/xgov_registry/contract.py:555-556
    // # check payment
    // assert self.valid_xgov_payment(payment), err.INVALID_PAYMENT
    frame_dig -1
    callsub valid_xgov_payment
    assert // Invalid payment
    // smart_contracts/xgov_registry/contract.py:558-559
    // # create request box
    // rid = self.request_id.value
    intc_0 // 0
    bytec 18 // 0x726571756573745f6964
    app_global_get_ex
    assert // check self.request_id exists
    // smart_contracts/xgov_registry/contract.py:560-564
    // self.request_box[rid] = typ.XGovSubscribeRequestBoxValue(
    //     xgov_addr=xgov_address,
    //     owner_addr=owner_address,
    //     relation_type=relation_type,
    // )
    frame_dig -4
    frame_dig -3
    concat
    frame_dig -2
    concat
    // smart_contracts/xgov_registry/contract.py:560
    // self.request_box[rid] = typ.XGovSubscribeRequestBoxValue(
    swap
    itob
    bytec 46 // 0x72
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:560-564
    // self.request_box[rid] = typ.XGovSubscribeRequestBoxValue(
    //     xgov_addr=xgov_address,
    //     owner_addr=owner_address,
    //     relation_type=relation_type,
    // )
    swap
    box_put
    // smart_contracts/xgov_registry/contract.py:566-567
    // # increment request id
    // self.request_id.value += 1
    intc_0 // 0
    bytec 18 // 0x726571756573745f6964
    app_global_get_ex
    assert // check self.request_id exists
    intc_1 // 1
    +
    bytec 18 // 0x726571756573745f6964
    swap
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.approve_subscribe_xgov(request_id: bytes) -> void:
approve_subscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:569-570
    // @arc4.abimethod()
    // def approve_subscribe_xgov(self, request_id: arc4.UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:581
    // assert self.is_xgov_subscriber(), err.UNAUTHORIZED
    callsub is_xgov_subscriber
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:583-584
    // # get the request
    // request = self.request_box[request_id.native].copy()
    frame_dig -1
    btoi
    itob
    bytec 46 // 0x72
    swap
    concat
    dup
    box_get
    assert // check self.request_box entry exists
    // smart_contracts/xgov_registry/contract.py:587
    // voting_address=request.owner_addr,
    dup
    extract 32 32 // on error: Index access is out of bounds
    // smart_contracts/xgov_registry/contract.py:588
    // voted_proposals=arc4.UInt64(0),
    bytec 19 // 0x0000000000000000
    // smart_contracts/xgov_registry/contract.py:585-590
    // # create the xGov
    // self.xgov_box[request.xgov_addr.native] = typ.XGovBoxValue(
    //     voting_address=request.owner_addr,
    //     voted_proposals=arc4.UInt64(0),
    //     last_vote_timestamp=arc4.UInt64(0),
    // )
    concat
    // smart_contracts/xgov_registry/contract.py:589
    // last_vote_timestamp=arc4.UInt64(0),
    bytec 19 // 0x0000000000000000
    // smart_contracts/xgov_registry/contract.py:585-590
    // # create the xGov
    // self.xgov_box[request.xgov_addr.native] = typ.XGovBoxValue(
    //     voting_address=request.owner_addr,
    //     voted_proposals=arc4.UInt64(0),
    //     last_vote_timestamp=arc4.UInt64(0),
    // )
    concat
    // smart_contracts/xgov_registry/contract.py:585-586
    // # create the xGov
    // self.xgov_box[request.xgov_addr.native] = typ.XGovBoxValue(
    swap
    extract 0 32 // on error: Index access is out of bounds
    bytec 6 // 0x78
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:585-590
    // # create the xGov
    // self.xgov_box[request.xgov_addr.native] = typ.XGovBoxValue(
    //     voting_address=request.owner_addr,
    //     voted_proposals=arc4.UInt64(0),
    //     last_vote_timestamp=arc4.UInt64(0),
    // )
    swap
    box_put
    // smart_contracts/xgov_registry/contract.py:591
    // self.xgovs.value += 1
    intc_0 // 0
    bytec 5 // 0x78676f7673
    app_global_get_ex
    assert // check self.xgovs exists
    intc_1 // 1
    +
    bytec 5 // 0x78676f7673
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:592-593
    // # delete the request
    // del self.request_box[request_id.native]
    box_del
    pop
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.reject_subscribe_xgov(request_id: bytes) -> void:
reject_subscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:595-596
    // @arc4.abimethod()
    // def reject_subscribe_xgov(self, request_id: arc4.UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:607
    // assert self.is_xgov_subscriber(), err.UNAUTHORIZED
    callsub is_xgov_subscriber
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:609-610
    // # delete the request
    // del self.request_box[request_id.native]
    frame_dig -1
    btoi
    itob
    bytec 46 // 0x72
    swap
    concat
    box_del
    pop
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_voting_account(xgov_address: bytes, voting_address: bytes) -> void:
set_voting_account:
    // smart_contracts/xgov_registry/contract.py:612-615
    // @arc4.abimethod()
    // def set_voting_account(
    //     self, xgov_address: arc4.Address, voting_address: arc4.Address
    // ) -> None:
    proto 2 0
    // smart_contracts/xgov_registry/contract.py:627
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:629-630
    // # Check if the sender is an xGov member
    // exists = xgov_address.native in self.xgov_box
    bytec 6 // 0x78
    frame_dig -2
    concat
    dupn 2
    box_len
    bury 1
    // smart_contracts/xgov_registry/contract.py:631
    // assert exists, err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:632
    // xgov_box = self.xgov_box[xgov_address.native].copy()
    box_get
    assert // check self.xgov_box entry exists
    // smart_contracts/xgov_registry/contract.py:636
    // Txn.sender == xgov_box.voting_address.native or Txn.sender == xgov_address
    txn Sender
    swap
    extract 0 32 // on error: Index access is out of bounds
    ==
    bnz set_voting_account_bool_true@2
    frame_dig -2
    txn Sender
    ==
    bz set_voting_account_bool_false@3

set_voting_account_bool_true@2:
    intc_1 // 1

set_voting_account_bool_merge@4:
    // smart_contracts/xgov_registry/contract.py:634-637
    // # Check that the sender is either the xGov or the voting address
    // assert (
    //     Txn.sender == xgov_box.voting_address.native or Txn.sender == xgov_address
    // ), err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:639-640
    // # Update the voting account in the xGov box
    // self.xgov_box[xgov_address.native].voting_address = voting_address
    frame_dig 0
    dup
    box_get
    assert // check self.xgov_box entry exists
    frame_dig -1
    replace2 0
    box_put
    retsub

set_voting_account_bool_false@3:
    intc_0 // 0
    b set_voting_account_bool_merge@4


// smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_proposer(payment: uint64) -> void:
subscribe_proposer:
    // smart_contracts/xgov_registry/contract.py:642-643
    // @arc4.abimethod()
    // def subscribe_proposer(self, payment: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:656
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:658
    // assert Txn.sender not in self.proposer_box, err.ALREADY_PROPOSER
    bytec_2 // 0x70
    txn Sender
    concat
    box_len
    bury 1
    !
    assert // Already a proposer
    // smart_contracts/xgov_registry/contract.py:661
    // payment.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/xgov_registry/contract.py:659-662
    // # check fee
    // assert (
    //     payment.receiver == Global.current_application_address
    // ), err.WRONG_RECEIVER
    assert // Wrong Receiver
    // smart_contracts/xgov_registry/contract.py:663
    // assert payment.amount == self.proposer_fee.value, err.WRONG_PAYMENT_AMOUNT
    frame_dig -1
    gtxns Amount
    intc_0 // 0
    bytec 17 // 0x70726f706f7365725f666565
    app_global_get_ex
    assert // check self.proposer_fee exists
    ==
    assert // Wrong payment amount
    // smart_contracts/xgov_registry/contract.py:665
    // self.proposer_box[Txn.sender] = typ.ProposerBoxValue(
    bytec_2 // 0x70
    txn Sender
    concat
    // smart_contracts/xgov_registry/contract.py:665-669
    // self.proposer_box[Txn.sender] = typ.ProposerBoxValue(
    //     active_proposal=arc4.Bool(False),  # noqa: FBT003
    //     kyc_status=arc4.Bool(False),  # noqa: FBT003
    //     kyc_expiring=arc4.UInt64(0),
    // )
    pushbytes 0x000000000000000000
    box_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_proposer_kyc(proposer: bytes, kyc_status: bytes, kyc_expiring: bytes) -> void:
set_proposer_kyc:
    // smart_contracts/xgov_registry/contract.py:671-674
    // @arc4.abimethod()
    // def set_proposer_kyc(
    //     self, proposer: arc4.Address, kyc_status: arc4.Bool, kyc_expiring: arc4.UInt64
    // ) -> None:
    proto 3 0
    // smart_contracts/xgov_registry/contract.py:688-689
    // # check if kyc provider
    // assert Txn.sender == self.kyc_provider.value.native, err.UNAUTHORIZED
    txn Sender
    intc_0 // 0
    bytec 13 // 0x6b79635f70726f7669646572
    app_global_get_ex
    assert // check self.kyc_provider exists
    ==
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:690
    // assert proposer.native in self.proposer_box, err.PROPOSER_DOES_NOT_EXIST
    bytec_2 // 0x70
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    assert // Proposer does not exist
    // smart_contracts/xgov_registry/contract.py:692
    // active_proposal = self.proposer_box[proposer.native].copy().active_proposal
    dup
    box_get
    assert // check self.proposer_box entry exists
    intc_0 // 0
    getbit
    bytec 8 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // smart_contracts/xgov_registry/contract.py:694-698
    // self.proposer_box[proposer.native] = typ.ProposerBoxValue(
    //     active_proposal=active_proposal,
    //     kyc_status=kyc_status,
    //     kyc_expiring=kyc_expiring,
    // )
    frame_dig -2
    intc_0 // 0
    getbit
    intc_1 // 1
    swap
    setbit
    frame_dig -1
    concat
    box_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.declare_committee(committee_id: bytes, size: bytes, votes: bytes) -> void:
declare_committee:
    // smart_contracts/xgov_registry/contract.py:700-703
    // @arc4.abimethod()
    // def declare_committee(
    //     self, committee_id: ctyp.Bytes32, size: arc4.UInt64, votes: arc4.UInt64
    // ) -> None:
    proto 3 0
    // smart_contracts/xgov_registry/contract.py:185
    // return Txn.sender == self.committee_manager.value.native
    txn Sender
    intc_0 // 0
    bytec 14 // 0x636f6d6d69747465655f6d616e61676572
    app_global_get_ex
    assert // check self.committee_manager exists
    ==
    // smart_contracts/xgov_registry/contract.py:718
    // assert self.is_xgov_committee_manager(), err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:721
    // size.native <= self.max_committee_size.value
    frame_dig -2
    btoi
    intc_0 // 0
    bytec 45 // 0x6d61785f636f6d6d69747465655f73697a65
    app_global_get_ex
    assert // check self.max_committee_size exists
    dig 1
    >=
    // smart_contracts/xgov_registry/contract.py:720-722
    // assert (
    //     size.native <= self.max_committee_size.value
    // ), err.COMMITTEE_SIZE_TOO_LARGE
    assert // Committee size is too large
    // smart_contracts/xgov_registry/contract.py:724
    // self.committee_id.value = committee_id.copy()
    bytec 48 // 0x636f6d6d69747465655f6964
    frame_dig -3
    app_global_put
    // smart_contracts/xgov_registry/contract.py:725
    // self.committee_members.value = size.native
    bytec 43 // 0x636f6d6d69747465655f6d656d62657273
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:726
    // self.committee_votes.value = votes.native
    frame_dig -1
    btoi
    bytec 44 // 0x636f6d6d69747465655f766f746573
    swap
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.open_proposal(payment: uint64) -> uint64:
open_proposal:
    // smart_contracts/xgov_registry/contract.py:728-729
    // @arc4.abimethod
    // def open_proposal(self, payment: gtxn.PaymentTransaction) -> UInt64:
    proto 1 1
    // smart_contracts/xgov_registry/contract.py:745
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:746
    // assert not self.paused_proposals.value, err.PAUSED_PROPOSALS
    intc_0 // 0
    bytec 9 // 0x7061757365645f70726f706f73616c73
    app_global_get_ex
    assert // check self.paused_proposals exists
    !
    assert // Creation of proposals is paused
    // smart_contracts/xgov_registry/contract.py:748-749
    // # Check if the caller is a registered proposer
    // assert Txn.sender in self.proposer_box, err.UNAUTHORIZED
    bytec_2 // 0x70
    txn Sender
    concat
    box_len
    bury 1
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:751-752
    // # Check if the proposer already has an active proposal
    // assert not self.proposer_box[
    bytec_2 // 0x70
    // smart_contracts/xgov_registry/contract.py:753
    // Txn.sender
    txn Sender
    // smart_contracts/xgov_registry/contract.py:751-754
    // # Check if the proposer already has an active proposal
    // assert not self.proposer_box[
    //     Txn.sender
    // ].active_proposal, err.ALREADY_ACTIVE_PROPOSAL
    concat
    box_get
    assert // check self.proposer_box entry exists
    intc_0 // 0
    getbit
    bytec 8 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec 8 // 0x00
    ==
    assert // Proposer already has an active proposal
    // smart_contracts/xgov_registry/contract.py:755
    // assert self.valid_kyc(Txn.sender), err.INVALID_KYC
    txn Sender
    callsub valid_kyc
    assert // Invalid KYC
    // smart_contracts/xgov_registry/contract.py:757
    // assert Txn.fee >= (Global.min_txn_fee * 3), err.INSUFFICIENT_FEE
    txn Fee
    global MinTxnFee
    pushint 3 // 3
    *
    >=
    assert // Insufficient fee
    // smart_contracts/xgov_registry/contract.py:761
    // payment.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/xgov_registry/contract.py:759-762
    // # Ensure the transaction has the correct payment
    // assert (
    //     payment.receiver == Global.current_application_address
    // ), err.WRONG_RECEIVER
    assert // Wrong Receiver
    // smart_contracts/xgov_registry/contract.py:763
    // assert payment.amount == self.open_proposal_fee.value, err.WRONG_PAYMENT_AMOUNT
    frame_dig -1
    gtxns Amount
    intc_0 // 0
    bytec 10 // 0x6f70656e5f70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.open_proposal_fee exists
    ==
    assert // Wrong payment amount
    // smart_contracts/xgov_registry/contract.py:765
    // mbr_before = Global.current_application_address.balance
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    // smart_contracts/xgov_registry/contract.py:767-768
    // # Create the Proposal App
    // res = arc4.arc4_create(proposal_contract.Proposal, Txn.sender)
    itxn_begin
    txn Sender
    pushint 18 // 18
    itxn_field GlobalNumUint
    pushint 3 // 3
    itxn_field GlobalNumByteSlice
    intc_1 // 1
    itxn_field ExtraProgramPages
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiAFAAEKFJBOJh0CAAAGc3RhdHVzAAhwcm9wb3NlchBmdW5kaW5nX2NhdGVnb3J5AU0PcmVnaXN0cnlfYXBwX2lkEWNvbW1pdHRlZV9tZW1iZXJzDHZvdGVyc19jb3VudA9jb21taXR0ZWVfdm90ZXMNdm90ZWRfbWVtYmVycwlhcHByb3ZhbHMKcmVqZWN0aW9ucw5hc3NpZ25lZF92b3Rlcw1sb2NrZWRfYW1vdW50BW51bGxzBBUffHUUc3VibWlzc2lvbl90aW1lc3RhbXAWdm90ZV9vcGVuaW5nX3RpbWVzdGFtcAxjb21taXR0ZWVfaWQBABsAGUVSUjpXcm9uZyBQcm9wb3NhbCBTdGF0dXMFdGl0bGUWZmluYWxpemF0aW9uX3RpbWVzdGFtcAVmb2N1cwxmdW5kaW5nX3R5cGUQcmVxdWVzdGVkX2Ftb3VudAFWC3hnb3ZfZGFlbW9uMRhAAGcxNYEDEkQxNIESEkQxNxREMTYURCsyA2cnBiJnJxYqZycRImcnFyJnJxIiZykiZycEImcnGCJnJxkiZycaImcnDiJnJxMqZycHImcnCSJnJwoiZycLImcnDCJnJw8iZycIImcnDSJnMRtBAHCCDwTMaU6qBB7DhT8EcUOZTwRzcTIaBCPYt84EDZqw1wQYQaDSBHNNvswEIS2fBwSKXkyABCrBmwUEaez0ogQkN408BJpwZ/oE29g92TYaAI4PAPIA0AC+AK0AoQCSAHgAbABbAEoAOwAqABwACwACIkMxGRREMRhEI0MxGRREMRhEiAqdJxBMULAjQzEZgQUSRDEYRIgKfSNDMRkURDEYRIgJvycQTFCwI0MxGRREMRhENhoBiAj2I0MxGRREMRhEiAi1JxBMULAjQzEZFEQxGEQ2GgEiU4gIXyNDMRkURDEYRIgG9iNDMRkURDEYRDYaATYaAjYaA4gFkCcQTFCwI0MxGRREMRhENhoBiATGI0MxGRREMRhEiAPEI0MxGRREMRhEiAOAJxBMULAjQzEZFEQxGEQ2GgE2GgKIAyojQzEZFEQxGEQxFiMJSTgQIxJENhoBNhoCNhoDNhoEiAHUI0MxGRREMRgURDYaAYgBiSNDigACIioyByInEmVECSInBGVMSU8CRCQSQQA4gBV2b3RpbmdfZHVyYXRpb25fc21hbGyIAJ2MAIwBiwAoE0EACCKLAIwBjACJiwKLAQ4ojAGMAImLAyUSQQAigBZ2b3RpbmdfZHVyYXRpb25fbWVkaXVtiABdjACMAUL/vYAVdm90aW5nX2R1cmF0aW9uX2xhcmdliAA8jACMAUL/nIgAikQiKWVEJBJEiYoBAYAXcHJvcG9zYWxfY29tbWl0bWVudF9icHOIAAooEkSL/wshBAqJigECIicGZUSL/2UoTEAAGIAUABJFUlI6TWlzc2luZyBDb25maWeMAYsAiwFPA08DiYoBASInBmVEi/9lRImAD3BhdXNlZF9yZWdpc3RyeYj/rigSRBREiTEAIitlRBKJMQAnHIj/ykkVgSASRBKJMg0iJwZlRBKJigIAsYv/sgiL/rIHI7IQIrIBs4mKAQAiJw5lRIv/TIj/3icOImeJigEAi/84GDIIEkSL/zkaADYaABJEiYoBADINRCuL/2cnBjINZycTiP9oSSoTRCcHiP8uKBJESUQnCYj/JCgSRElEJxNPA2cnB08CZycJTGeJigUAKoj/R4j/XkQiKWVEFESL/FcCAIz8i/0XSYv+F0yL/BWBew5Ei/wqE0QkEkAAB4sBJRJBAPgjRIAUbWluX3JlcXVlc3RlZF9hbW91bnSI/r0oEkSAGm1heF9yZXF1ZXN0ZWRfYW1vdW50X2xhcmdliP6bKBJEiwJJTwMPRElPAg5ESYj+X4v7OAAiK2VEEkSL+zgHMgoSRIv7OAgSRCcWi/xngBptYXhfcmVxdWVzdGVkX2Ftb3VudF9zbWFsbIj+TCgSRIAbbWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVtiP4pTIwAKBJEDkEAKCcEJGcnGYsBZycaiwJJTgJni/8XJxhMZ4j92ycOTGcnETIHZykkZ4mLAosADkEABycEJWdC/80nBIEhZ0L/xSJC/wWKAgCI/hSI/Z6L/iJZSUSL/ycUE0EADicFvEiL/lcCACcFTL+JJwW9RCcFvUSLAAgnBUzTi/5XAgAnBU4Cu4mKAAEiiP4FRCIpZUQkE0EAIScVjACLACgTQQAEiwBMiSIrZUSI/gInBbxIKYFGZyhMiSiMAEL/3YoAACKI/ZyI/SYyByInEWVECSInBGVMSU8CRCQSQQCIgBlkaXNjdXNzaW9uX2R1cmF0aW9uX3NtYWxsiP0njACLACgSRIsBDkQpJWcnFzIHZ4ARb3Blbl9wcm9wb3NhbF9mZWWI/P4oEkQnBb1ERIAcZGFlbW9uX29wZXJhdGlvbl9mdW5kaW5nX2Jwc4j81SgSRCcciPz+SRWBIBJETgILIQQKiP02iYsCJRJBACSAGmRpc2N1c3Npb25fZHVyYXRpb25fbWVkaXVtiPyXjABC/22AGWRpc2N1c3Npb25fZHVyYXRpb25fbGFyZ2WI/HSMAEL/SooBACpHAoj8xkQiKWVEJRJEMRZAAJkyBIwBI4wAiwCLAQxBAA2LAEmI/OMjCIwAQv/ri/8iWYwCIowAiwCLAgxBAGuL/1cCAIsAgSgLgShYSVcAIEyBIFsnG08CUEm9RQEUREsBREsBFicUUL8iJwhlRCMIJwhMZyInDWVECCcNTGciJwhlRCInB2VEEkEAFSInDWVEIicJZUQSRCmBGWcnEjIHZ4sAIwiMAEL/jYkiiPxbQv98igMBIkcCKkcCiPwcRCIpZUSBGRNBAP4nFYwAiwAoE0EAAYmL/heMA4v/F4wFJxuL/VBJjAG9RQFAAHGAFQATRVJSOlZvdGVyIG5vdCBmb3VuZIwAiwAoE0EAAYmLAUm+RElXAAiAAYBQTwJMvyInCmVEIwgnCkxnIluLA0lOAgmLBUlOAwkiJwtlRE8CCCcLTGciJwxlRE8CCCcMTGciJw9lRAgnD0xnKIwAiYsBvkxJTgKMAkSBQFMnFCJPAlQnFBNBACCAGQAXRVJSOlZvdGVyIGFscmVhZHkgdm90ZWSMAEL/b4sCVwAIiwOLBQgWpEEAG4AUABJFUlI6Vm90ZXMgZXhjZWVkZWSMAEL/RSiMAEL/P4j5z0lOAowAjAQoE0D+94sEQAAigBsAGUVSUjpWb3RpbmcgUGVyaW9kIEV4cGlyZWSMAEL+0CiMAEL+yooAACIqRwOI+pwiKWVEgRkSRIj5gSgSREEADiInCmVEIicHZUQSQQEwI0QiJwRlTElOAowBRCQSQQDqgAxxdW9ydW1fc21hbGyI+hyMAIsAKBJEIicHZUQLIQQKjAIiJwRlTElOAowBRCQSQQBxgBV3ZWlnaHRlZF9xdW9ydW1fc21hbGyI+eCMAIsAKBJEIicLZUQiJwxlRAgiJw9lRAiMBCInCWVECyEECowDIicKZUSLAg9BABuLBIsDD0EAEyInC2VEIicMZUQNQQAFKYEeZ4kpgShnIitlRIj6FomLASUSQQAggBZ3ZWlnaHRlZF9xdW9ydW1fbWVkaXVtiPlnjABC/4SAFXdlaWdodGVkX3F1b3J1bV9sYXJnZYj5SIwAQv9liwElEkEAF4ANcXVvcnVtX21lZGl1bYj5KowAQv8LgAxxdW9ydW1fbGFyZ2WI+RSMAEL+9SJC/s2KAQAxAIAMeGdvdl9jb3VuY2lsiPkmSRWBIBJEEkQiKWVEgR4SRIv/QQAQKYE8ZyInBmVEcghEiPldiSmBLWeJigABIoj5M0QiKWVEgS0TQQAdJxWMAIsAKBNBAASLAEyJKYEyZyIrZUSI+SsoTIkojABC/+GKAQAiKkcDiPjsRCIpZUSBMhJAAB0iKWVEgTwSQAATIillRIEoEkAACSIpZUQlEkEAfyNEMRZAAHEyBIwEI4wCiwKLBAxBAA2LAkmI+OcjCIwCQv/ri/8iWYwBIowDiwOLAQxBAEOL/1cCAIsDgSALgSBYJxtMUEmMAL1FAUEAICInCGVEIwknCExnIicNZUSLAElOAr5EIlsJJw1MZ7xIiwMjCIwDQv+1iSKI+IdC/6QiQv9+igABIoj4SUQiKWVEQQCdIillRCQTQQCUIillRIEyE0EAiiIpZUSBPBNBAIAiKWVEgSgTQQB2JxWMAIsAKBNBAASLAEyJIicIZURBADSAMAAuRVJSOlRoZXJlIGFyZSB2b3RlcnMgYXNzaWduZWQgdG8gdGhpcyBwcm9wb3NhbEyJJwW8SCIpZUQkEkEAByIrZUSI99giJwZlRHIIRDIKcwBEiPe0KYFGZyhMiSiMAEL/iIj3jEQiKWVEgUYSRIkiK2VEIicGZUQWIicWZURJFRZXBgJMUCInEWVEFiInF2VEFiInEmVEFiIpZUQWIicEZUQWIicYZUQWSZOBCA5EVwcBIicZZUQWIicaZUQWIicOZUQWIicTZUQiJwdlRBYiJwllRBYiJwplRBYiJwtlRBYiJwxlRBYiJw9lRBZPEk8SUIACALtQTxBQTw9QTw5QTw1QTwxQTwtQTwpQTwlQTwhQTwdQTwZQTwVQTwRQTwNQTwJQTFBMUIk=)
    itxn_field ApprovalProgramPages
    pushbytes 0xcc694eaa // method "create(address)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // smart_contracts/xgov_registry/contract.py:770
    // mbr_after = Global.current_application_address.balance
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    // smart_contracts/xgov_registry/contract.py:772-773
    // # Update proposer state
    // self.proposer_box[Txn.sender].active_proposal = arc4.Bool(True)  # noqa: FBT003
    bytec_2 // 0x70
    txn Sender
    concat
    dup
    box_get
    assert // check self.proposer_box entry exists
    intc_0 // 0
    intc_1 // 1
    setbit
    box_put
    // smart_contracts/xgov_registry/contract.py:775-780
    // # Transfer funds to the new Proposal App, excluding the MBR needed for the Proposal App
    // itxn.Payment(
    //     receiver=res.created_app.address,
    //     amount=self.open_proposal_fee.value - (mbr_after - mbr_before),
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:777
    // receiver=res.created_app.address,
    dig 1
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/xgov_registry/contract.py:778
    // amount=self.open_proposal_fee.value - (mbr_after - mbr_before),
    intc_0 // 0
    bytec 10 // 0x6f70656e5f70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.open_proposal_fee exists
    uncover 2
    uncover 4
    -
    -
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_registry/contract.py:775-776
    // # Transfer funds to the new Proposal App, excluding the MBR needed for the Proposal App
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry/contract.py:779
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry/contract.py:775-780
    // # Transfer funds to the new Proposal App, excluding the MBR needed for the Proposal App
    // itxn.Payment(
    //     receiver=res.created_app.address,
    //     amount=self.open_proposal_fee.value - (mbr_after - mbr_before),
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/xgov_registry/contract.py:782-783
    // # Increment pending proposals
    // self.pending_proposals.value += 1
    intc_0 // 0
    bytec_3 // 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    intc_1 // 1
    +
    bytec_3 // 0x70656e64696e675f70726f706f73616c73
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:785
    // return res.created_app.id
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.vote_proposal(proposal_id: bytes, xgov_address: bytes, approval_votes: bytes, rejection_votes: bytes) -> void:
vote_proposal:
    // smart_contracts/xgov_registry/contract.py:787-794
    // @arc4.abimethod()
    // def vote_proposal(
    //     self,
    //     proposal_id: arc4.UInt64,
    //     xgov_address: arc4.Address,
    //     approval_votes: arc4.UInt64,
    //     rejection_votes: arc4.UInt64,
    // ) -> None:
    proto 4 0
    // smart_contracts/xgov_registry/contract.py:818
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:820-821
    // # verify proposal id is genuine proposal
    // assert self._is_proposal(proposal_id), err.INVALID_PROPOSAL
    frame_dig -4
    callsub _is_proposal
    assert // Invalid proposal
    // smart_contracts/xgov_registry/contract.py:825
    // proposal_id.native, pcfg.GS_KEY_STATUS
    frame_dig -4
    btoi
    // smart_contracts/xgov_registry/contract.py:823-826
    // # Verify the proposal is in the voting state
    // status, status_exists = op.AppGlobal.get_ex_uint64(
    //     proposal_id.native, pcfg.GS_KEY_STATUS
    // )
    dup
    // smart_contracts/xgov_registry/contract.py:825
    // proposal_id.native, pcfg.GS_KEY_STATUS
    bytec 49 // 0x737461747573
    // smart_contracts/xgov_registry/contract.py:823-826
    // # Verify the proposal is in the voting state
    // status, status_exists = op.AppGlobal.get_ex_uint64(
    //     proposal_id.native, pcfg.GS_KEY_STATUS
    // )
    app_global_get_ex
    pop
    // smart_contracts/xgov_registry/contract.py:827
    // assert status == UInt64(penm.STATUS_VOTING), err.PROPOSAL_IS_NOT_VOTING
    pushint 25 // 25
    ==
    assert // Proposal is not in voting phase
    // smart_contracts/xgov_registry/contract.py:829-830
    // # make sure they're voting on behalf of an xGov
    // exists = xgov_address.native in self.xgov_box
    bytec 6 // 0x78
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    // smart_contracts/xgov_registry/contract.py:831
    // assert exists, err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:832
    // xgov_box = self.xgov_box[xgov_address.native].copy()
    dup
    box_get
    assert // check self.xgov_box entry exists
    // smart_contracts/xgov_registry/contract.py:834
    // xgov_box.voted_proposals.native + UInt64(1)
    dup
    pushint 32 // 32
    extract_uint64
    intc_1 // 1
    +
    // smart_contracts/xgov_registry/contract.py:833-835
    // self.xgov_box[xgov_address.native].voted_proposals = arc4.UInt64(
    //     xgov_box.voted_proposals.native + UInt64(1)
    // )
    itob
    // smart_contracts/xgov_registry/contract.py:833
    // self.xgov_box[xgov_address.native].voted_proposals = arc4.UInt64(
    dig 2
    box_get
    assert // check self.xgov_box entry exists
    // smart_contracts/xgov_registry/contract.py:833-835
    // self.xgov_box[xgov_address.native].voted_proposals = arc4.UInt64(
    //     xgov_box.voted_proposals.native + UInt64(1)
    // )
    swap
    replace2 32
    dig 2
    swap
    box_put
    // smart_contracts/xgov_registry/contract.py:837
    // Global.latest_timestamp
    global LatestTimestamp
    // smart_contracts/xgov_registry/contract.py:836-838
    // self.xgov_box[xgov_address.native].last_vote_timestamp = arc4.UInt64(
    //     Global.latest_timestamp
    // )
    itob
    // smart_contracts/xgov_registry/contract.py:836
    // self.xgov_box[xgov_address.native].last_vote_timestamp = arc4.UInt64(
    dig 2
    box_get
    assert // check self.xgov_box entry exists
    // smart_contracts/xgov_registry/contract.py:836-838
    // self.xgov_box[xgov_address.native].last_vote_timestamp = arc4.UInt64(
    //     Global.latest_timestamp
    // )
    swap
    replace2 40
    uncover 2
    swap
    box_put
    // smart_contracts/xgov_registry/contract.py:840-841
    // # Verify the caller is using their voting address
    // assert Txn.sender == xgov_box.voting_address.native, err.MUST_BE_VOTING_ADDRESS
    txn Sender
    swap
    extract 0 32 // on error: Index access is out of bounds
    ==
    assert // Must be voting address
    // smart_contracts/xgov_registry/contract.py:843-850
    // # Call the Proposal App to register the vote
    // error, tx = arc4.abi_call(
    //     proposal_contract.Proposal.vote,
    //     xgov_address,
    //     approval_votes,
    //     rejection_votes,
    //     app_id=proposal_id.native,
    // )
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0x1841a0d2 // method "vote(address,uint64,uint64)string"
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dupn 2
    extract 0 4
    bytec 7 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry/contract.py:852
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    intc_2 // 4
    <
    bz vote_proposal_ternary_false@3
    intc_0 // 0

vote_proposal_ternary_merge@4:
    // smart_contracts/xgov_registry/contract.py:852
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz vote_proposal_after_if_else@13
    // smart_contracts/xgov_registry/contract.py:853
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_2 // 4
    frame_dig 2
    dup
    cover 2
    >=
    intc_2 // 4
    dig 2
    uncover 2
    select
    frame_dig 1
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry/contract.py:855
    // case err.WRONG_PROPOSAL_STATUS:
    bytec 20 // "Wrong Proposal Status"
    // smart_contracts/xgov_registry/contract.py:857
    // case err.MISSING_CONFIG:
    bytec 50 // "Missing Config"
    // smart_contracts/xgov_registry/contract.py:859
    // case err.VOTER_NOT_FOUND:
    pushbytess "Voter not found" "Voter already voted" "Votes exceeded" "Voting Period Expired" // "Voter not found", "Voter already voted", "Votes exceeded", "Voting Period Expired"
    // smart_contracts/xgov_registry/contract.py:854-868
    // match error_without_prefix:
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case err.MISSING_CONFIG:
    //         assert False, err.MISSING_CONFIG  # noqa
    //     case err.VOTER_NOT_FOUND:
    //         assert False, err.VOTER_NOT_FOUND  # noqa
    //     case err.VOTER_ALREADY_VOTED:
    //         assert False, err.VOTER_ALREADY_VOTED  # noqa
    //     case err.VOTES_EXCEEDED:
    //         assert False, err.VOTES_EXCEEDED  # noqa
    //     case err.VOTING_PERIOD_EXPIRED:
    //         assert False, err.VOTING_PERIOD_EXPIRED  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 6
    match vote_proposal_switch_case_0@6 vote_proposal_switch_case_1@7 vote_proposal_switch_case_2@8 vote_proposal_switch_case_3@9 vote_proposal_switch_case_4@10 vote_proposal_switch_case_5@11
    // smart_contracts/xgov_registry/contract.py:868
    // assert False, "Unknown error"  # noqa
    err // Unknown error

vote_proposal_switch_case_5@11:
    // smart_contracts/xgov_registry/contract.py:866
    // assert False, err.VOTING_PERIOD_EXPIRED  # noqa
    err // Voting Period Expired

vote_proposal_switch_case_4@10:
    // smart_contracts/xgov_registry/contract.py:864
    // assert False, err.VOTES_EXCEEDED  # noqa
    err // Votes exceeded

vote_proposal_switch_case_3@9:
    // smart_contracts/xgov_registry/contract.py:862
    // assert False, err.VOTER_ALREADY_VOTED  # noqa
    err // Voter already voted

vote_proposal_switch_case_2@8:
    // smart_contracts/xgov_registry/contract.py:860
    // assert False, err.VOTER_NOT_FOUND  # noqa
    err // Voter not found

vote_proposal_switch_case_1@7:
    // smart_contracts/xgov_registry/contract.py:858
    // assert False, err.MISSING_CONFIG  # noqa
    err // Missing Config

vote_proposal_switch_case_0@6:
    // smart_contracts/xgov_registry/contract.py:856
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status

vote_proposal_after_if_else@13:
    retsub

vote_proposal_ternary_false@3:
    // smart_contracts/xgov_registry/contract.py:852
    // if error.native.startswith(err.ARC_65_PREFIX):
    frame_dig 0
    extract 6 4
    bytec 21 // "ERR:"
    ==
    b vote_proposal_ternary_merge@4


// smart_contracts.xgov_registry.contract.XGovRegistry.pay_grant_proposal(proposal_id: bytes) -> void:
pay_grant_proposal:
    // smart_contracts/xgov_registry/contract.py:870-871
    // @arc4.abimethod()
    // def pay_grant_proposal(self, proposal_id: arc4.UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:888-889
    // # Verify the caller is the xGov Payor
    // assert arc4.Address(Txn.sender) == self.xgov_payor.value, err.UNAUTHORIZED
    txn Sender
    intc_0 // 0
    bytec 12 // 0x78676f765f7061796f72
    app_global_get_ex
    assert // check self.xgov_payor exists
    ==
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:891-892
    // # Verify proposal_id is a genuine proposal created by this registry
    // assert self._is_proposal(proposal_id), err.INVALID_PROPOSAL
    frame_dig -1
    callsub _is_proposal
    assert // Invalid proposal
    // smart_contracts/xgov_registry/contract.py:896
    // proposal_id.native, pcfg.GS_KEY_STATUS
    frame_dig -1
    btoi
    // smart_contracts/xgov_registry/contract.py:894-897
    // # Read proposal state directly from the Proposal App's global state
    // status, status_exists = op.AppGlobal.get_ex_uint64(
    //     proposal_id.native, pcfg.GS_KEY_STATUS
    // )
    dup
    // smart_contracts/xgov_registry/contract.py:896
    // proposal_id.native, pcfg.GS_KEY_STATUS
    bytec 49 // 0x737461747573
    // smart_contracts/xgov_registry/contract.py:894-897
    // # Read proposal state directly from the Proposal App's global state
    // status, status_exists = op.AppGlobal.get_ex_uint64(
    //     proposal_id.native, pcfg.GS_KEY_STATUS
    // )
    app_global_get_ex
    pop
    swap
    // smart_contracts/xgov_registry/contract.py:898-900
    // proposer_bytes, proposer_exists = op.AppGlobal.get_ex_bytes(
    //     proposal_id.native, pcfg.GS_KEY_PROPOSER
    // )
    dup
    // smart_contracts/xgov_registry/contract.py:899
    // proposal_id.native, pcfg.GS_KEY_PROPOSER
    bytec 47 // 0x70726f706f736572
    // smart_contracts/xgov_registry/contract.py:898-900
    // proposer_bytes, proposer_exists = op.AppGlobal.get_ex_bytes(
    //     proposal_id.native, pcfg.GS_KEY_PROPOSER
    // )
    app_global_get_ex
    pop
    // smart_contracts/xgov_registry/contract.py:901
    // proposer = arc4.Address(proposer_bytes)
    dup
    len
    pushint 32 // 32
    ==
    assert // Address length is 32 bytes
    // smart_contracts/xgov_registry/contract.py:902-904
    // requested_amount, requested_amount_exists = op.AppGlobal.get_ex_uint64(
    //     proposal_id.native, pcfg.GS_KEY_REQUESTED_AMOUNT
    // )
    dig 1
    // smart_contracts/xgov_registry/contract.py:903
    // proposal_id.native, pcfg.GS_KEY_REQUESTED_AMOUNT
    pushbytes 0x7265717565737465645f616d6f756e74
    // smart_contracts/xgov_registry/contract.py:902-904
    // requested_amount, requested_amount_exists = op.AppGlobal.get_ex_uint64(
    //     proposal_id.native, pcfg.GS_KEY_REQUESTED_AMOUNT
    // )
    app_global_get_ex
    pop
    cover 2
    // smart_contracts/xgov_registry/contract.py:905-906
    // # Verify the proposal is in the reviewed state
    // assert status == UInt64(penm.STATUS_REVIEWED), err.PROPOSAL_WAS_NOT_REVIEWED
    uncover 3
    pushint 45 // 45
    ==
    assert // Proposal was not reviewed
    // smart_contracts/xgov_registry/contract.py:908
    // assert proposer.native in self.proposer_box, err.WRONG_PROPOSER
    bytec_2 // 0x70
    dig 1
    concat
    box_len
    bury 1
    assert // Wrong proposer
    // smart_contracts/xgov_registry/contract.py:910
    // assert self.valid_kyc(proposer.native), err.INVALID_KYC
    dup
    callsub valid_kyc
    assert // Invalid KYC
    // smart_contracts/xgov_registry/contract.py:914
    // self.outstanding_funds.value >= requested_amount
    intc_0 // 0
    bytec_1 // 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    dig 3
    >=
    // smart_contracts/xgov_registry/contract.py:912-915
    // # Verify sufficient funds are available
    // assert (
    //     self.outstanding_funds.value >= requested_amount
    // ), err.INSUFFICIENT_TREASURY_FUNDS
    assert // Insufficient treasury funds
    // smart_contracts/xgov_registry/contract.py:200-205
    // # Transfer the funds to the receiver
    // itxn.Payment(
    //     receiver=Account(recipient.bytes),
    //     amount=amount,
    //     fee=0,
    // ).submit()
    itxn_begin
    dig 2
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_registry/contract.py:200-201
    // # Transfer the funds to the receiver
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry/contract.py:204
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry/contract.py:200-205
    // # Transfer the funds to the receiver
    // itxn.Payment(
    //     receiver=Account(recipient.bytes),
    //     amount=amount,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/xgov_registry/contract.py:207-208
    // # Update the outstanding funds
    // self.outstanding_funds.value -= amount
    intc_0 // 0
    bytec_1 // 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    uncover 2
    -
    bytec_1 // 0x6f75747374616e64696e675f66756e6473
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:919-921
    // error, tx = arc4.abi_call(
    //     proposal_contract.Proposal.fund, app_id=proposal_id.native
    // )
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0x8a5e4c80 // method "fund()string"
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dupn 2
    extract 0 4
    bytec 7 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry/contract.py:923
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    intc_2 // 4
    <
    bz pay_grant_proposal_ternary_false@3
    intc_0 // 0

pay_grant_proposal_ternary_merge@4:
    // smart_contracts/xgov_registry/contract.py:923
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz pay_grant_proposal_after_if_else@8
    // smart_contracts/xgov_registry/contract.py:924
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_2 // 4
    frame_dig 2
    dup
    cover 2
    >=
    intc_2 // 4
    dig 2
    uncover 2
    select
    frame_dig 1
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry/contract.py:926
    // case err.WRONG_PROPOSAL_STATUS:
    bytec 20 // "Wrong Proposal Status"
    // smart_contracts/xgov_registry/contract.py:925-929
    // match error_without_prefix:
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    swap
    match pay_grant_proposal_switch_case_0@6
    // smart_contracts/xgov_registry/contract.py:929
    // assert False, "Unknown error"  # noqa
    err // Unknown error

pay_grant_proposal_switch_case_0@6:
    // smart_contracts/xgov_registry/contract.py:927
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status

pay_grant_proposal_after_if_else@8:
    retsub

pay_grant_proposal_ternary_false@3:
    // smart_contracts/xgov_registry/contract.py:923
    // if error.native.startswith(err.ARC_65_PREFIX):
    frame_dig 0
    extract 6 4
    bytec 21 // "ERR:"
    ==
    b pay_grant_proposal_ternary_merge@4


// smart_contracts.xgov_registry.contract.XGovRegistry.decommission_proposal(proposal_id: bytes) -> void:
decommission_proposal:
    // smart_contracts/xgov_registry/contract.py:931-932
    // @arc4.abimethod()
    // def decommission_proposal(self, proposal_id: arc4.UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:948
    // assert arc4.Address(Txn.sender) == self.xgov_daemon.value, err.UNAUTHORIZED
    txn Sender
    intc_0 // 0
    bytec 15 // 0x78676f765f6461656d6f6e
    app_global_get_ex
    assert // check self.xgov_daemon exists
    ==
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:950-951
    // # Verify proposal_id is a genuine proposal created by this registry
    // assert self._is_proposal(proposal_id), err.INVALID_PROPOSAL
    frame_dig -1
    callsub _is_proposal
    assert // Invalid proposal
    // smart_contracts/xgov_registry/contract.py:953-955
    // error, tx = arc4.abi_call(
    //     proposal_contract.Proposal.decommission, app_id=proposal_id.native
    // )
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:954
    // proposal_contract.Proposal.decommission, app_id=proposal_id.native
    frame_dig -1
    btoi
    dup
    itxn_field ApplicationID
    // smart_contracts/xgov_registry/contract.py:953-955
    // error, tx = arc4.abi_call(
    //     proposal_contract.Proposal.decommission, app_id=proposal_id.native
    // )
    pushbytes 0x69ecf4a2 // method "decommission()string"
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dupn 2
    extract 0 4
    bytec 7 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry/contract.py:957
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    intc_2 // 4
    <
    bz decommission_proposal_ternary_false@3
    intc_0 // 0

decommission_proposal_ternary_merge@4:
    // smart_contracts/xgov_registry/contract.py:957
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz decommission_proposal_after_if_else@10
    // smart_contracts/xgov_registry/contract.py:958
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_2 // 4
    frame_dig 3
    dup
    cover 2
    >=
    intc_2 // 4
    dig 2
    uncover 2
    select
    frame_dig 2
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry/contract.py:960
    // case err.WRONG_PROPOSAL_STATUS:
    bytec 20 // "Wrong Proposal Status"
    // smart_contracts/xgov_registry/contract.py:962
    // case err.MISSING_CONFIG:
    bytec 50 // "Missing Config"
    // smart_contracts/xgov_registry/contract.py:964
    // case err.VOTERS_ASSIGNED:
    pushbytes "There are voters assigned to this proposal"
    // smart_contracts/xgov_registry/contract.py:959-967
    // match error_without_prefix:
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case err.MISSING_CONFIG:
    //         assert False, err.MISSING_CONFIG  # noqa
    //     case err.VOTERS_ASSIGNED:
    //         assert False, err.VOTERS_ASSIGNED  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 3
    match decommission_proposal_switch_case_0@6 decommission_proposal_switch_case_1@7 decommission_proposal_switch_case_2@8
    // smart_contracts/xgov_registry/contract.py:967
    // assert False, "Unknown error"  # noqa
    err // Unknown error

decommission_proposal_switch_case_2@8:
    // smart_contracts/xgov_registry/contract.py:965
    // assert False, err.VOTERS_ASSIGNED  # noqa
    err // There are voters assigned to this proposal

decommission_proposal_switch_case_1@7:
    // smart_contracts/xgov_registry/contract.py:963
    // assert False, err.MISSING_CONFIG  # noqa
    err // Missing Config

decommission_proposal_switch_case_0@6:
    // smart_contracts/xgov_registry/contract.py:961
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status

decommission_proposal_after_if_else@10:
    // smart_contracts/xgov_registry/contract.py:969-970
    // # Decrement pending proposals count
    // self.pending_proposals.value -= 1
    intc_0 // 0
    bytec_3 // 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    intc_1 // 1
    -
    bytec_3 // 0x70656e64696e675f70726f706f73616c73
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:972-974
    // proposer_bytes, proposer_exists = op.AppGlobal.get_ex_bytes(
    //     proposal_id.native, pcfg.GS_KEY_PROPOSER
    // )
    frame_dig 0
    // smart_contracts/xgov_registry/contract.py:973
    // proposal_id.native, pcfg.GS_KEY_PROPOSER
    bytec 47 // 0x70726f706f736572
    // smart_contracts/xgov_registry/contract.py:972-974
    // proposer_bytes, proposer_exists = op.AppGlobal.get_ex_bytes(
    //     proposal_id.native, pcfg.GS_KEY_PROPOSER
    // )
    app_global_get_ex
    pop
    // smart_contracts/xgov_registry/contract.py:975
    // proposer = arc4.Address(proposer_bytes)
    dup
    len
    pushint 32 // 32
    ==
    assert // Address length is 32 bytes
    // smart_contracts/xgov_registry/contract.py:977-978
    // # Update proposer's active proposal status
    // self.proposer_box[proposer.native].active_proposal = arc4.Bool(
    bytec_2 // 0x70
    swap
    concat
    dup
    box_get
    assert // check self.proposer_box entry exists
    // smart_contracts/xgov_registry/contract.py:977-980
    // # Update proposer's active proposal status
    // self.proposer_box[proposer.native].active_proposal = arc4.Bool(
    //     False  # noqa: FBT003
    // )
    intc_0 // 0
    dup
    setbit
    box_put
    retsub

decommission_proposal_ternary_false@3:
    // smart_contracts/xgov_registry/contract.py:957
    // if error.native.startswith(err.ARC_65_PREFIX):
    frame_dig 1
    extract 6 4
    bytec 21 // "ERR:"
    ==
    b decommission_proposal_ternary_merge@4


// smart_contracts.xgov_registry.contract.XGovRegistry.drop_proposal(proposal_id: bytes) -> void:
drop_proposal:
    // smart_contracts/xgov_registry/contract.py:982-983
    // @arc4.abimethod()
    // def drop_proposal(self, proposal_id: arc4.UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:997
    // assert not self.paused_registry.value, err.PAUSED_REGISTRY
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    !
    assert // Registry's non-admin methods are paused
    // smart_contracts/xgov_registry/contract.py:999-1000
    // # Verify proposal_id is a genuine proposal created by this registry
    // assert self._is_proposal(proposal_id), err.INVALID_PROPOSAL
    frame_dig -1
    callsub _is_proposal
    assert // Invalid proposal
    // smart_contracts/xgov_registry/contract.py:1003
    // proposal_id.native, pcfg.GS_KEY_PROPOSER
    frame_dig -1
    btoi
    // smart_contracts/xgov_registry/contract.py:1002-1004
    // proposer_bytes, proposer_exists = op.AppGlobal.get_ex_bytes(
    //     proposal_id.native, pcfg.GS_KEY_PROPOSER
    // )
    dup
    // smart_contracts/xgov_registry/contract.py:1003
    // proposal_id.native, pcfg.GS_KEY_PROPOSER
    bytec 47 // 0x70726f706f736572
    // smart_contracts/xgov_registry/contract.py:1002-1004
    // proposer_bytes, proposer_exists = op.AppGlobal.get_ex_bytes(
    //     proposal_id.native, pcfg.GS_KEY_PROPOSER
    // )
    app_global_get_ex
    pop
    dup
    cover 2
    // smart_contracts/xgov_registry/contract.py:1005
    // proposer = Account(proposer_bytes)
    dup
    len
    pushint 32 // 32
    ==
    assert // Address length is 32 bytes
    // smart_contracts/xgov_registry/contract.py:1007
    // assert Txn.sender == proposer, err.UNAUTHORIZED
    txn Sender
    ==
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:1009-1011
    // error, tx = arc4.abi_call(
    //     proposal_contract.Proposal.drop, app_id=proposal_id.native
    // )
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0x7371321a // method "drop()string"
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dupn 2
    extract 0 4
    bytec 7 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // smart_contracts/xgov_registry/contract.py:1013
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 6 0
    dup
    len
    dup
    intc_2 // 4
    <
    bz drop_proposal_ternary_false@3
    intc_0 // 0

drop_proposal_ternary_merge@4:
    // smart_contracts/xgov_registry/contract.py:1013
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz drop_proposal_after_if_else@8
    // smart_contracts/xgov_registry/contract.py:1014
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_2 // 4
    frame_dig 3
    dup
    cover 2
    >=
    intc_2 // 4
    dig 2
    uncover 2
    select
    frame_dig 2
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry/contract.py:1016
    // case err.WRONG_PROPOSAL_STATUS:
    bytec 20 // "Wrong Proposal Status"
    // smart_contracts/xgov_registry/contract.py:1015-1019
    // match error_without_prefix:
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    swap
    match drop_proposal_switch_case_0@6
    // smart_contracts/xgov_registry/contract.py:1019
    // assert False, "Unknown error"  # noqa
    err // Unknown error

drop_proposal_switch_case_0@6:
    // smart_contracts/xgov_registry/contract.py:1017
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status

drop_proposal_after_if_else@8:
    // smart_contracts/xgov_registry/contract.py:1021-1022
    // # Decrement pending proposals count
    // self.pending_proposals.value -= 1
    intc_0 // 0
    bytec_3 // 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    intc_1 // 1
    -
    bytec_3 // 0x70656e64696e675f70726f706f73616c73
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:1023-1024
    // # Update proposer's active proposal status
    // self.proposer_box[proposer].active_proposal = arc4.Bool(False)  # noqa: FBT003
    bytec_2 // 0x70
    frame_dig 0
    concat
    dup
    box_get
    assert // check self.proposer_box entry exists
    intc_0 // 0
    dup
    setbit
    box_put
    retsub

drop_proposal_ternary_false@3:
    // smart_contracts/xgov_registry/contract.py:1013
    // if error.native.startswith(err.ARC_65_PREFIX):
    frame_dig 1
    extract 6 4
    bytec 21 // "ERR:"
    ==
    b drop_proposal_ternary_merge@4


// smart_contracts.xgov_registry.contract.XGovRegistry.deposit_funds(payment: uint64) -> void:
deposit_funds:
    // smart_contracts/xgov_registry/contract.py:1026-1027
    // @arc4.abimethod()
    // def deposit_funds(self, payment: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:1039
    // payment.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/xgov_registry/contract.py:1038-1040
    // assert (
    //     payment.receiver == Global.current_application_address
    // ), err.WRONG_RECEIVER
    assert // Wrong Receiver
    // smart_contracts/xgov_registry/contract.py:1041
    // self.outstanding_funds.value += payment.amount
    intc_0 // 0
    bytec_1 // 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    frame_dig -1
    gtxns Amount
    +
    bytec_1 // 0x6f75747374616e64696e675f66756e6473
    swap
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_funds(amount: uint64) -> void:
withdraw_funds:
    // smart_contracts/xgov_registry/contract.py:1043-1044
    // @arc4.abimethod()
    // def withdraw_funds(self, amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:1057
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:1058
    // assert amount <= self.outstanding_funds.value, err.INSUFFICIENT_FUNDS
    intc_0 // 0
    bytec_1 // 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    frame_dig -1
    >=
    assert // Insufficient funds
    // smart_contracts/xgov_registry/contract.py:1059
    // assert Txn.fee >= (Global.min_txn_fee * 2), err.INSUFFICIENT_FEE
    txn Fee
    global MinTxnFee
    pushint 2 // 2
    *
    >=
    assert // Insufficient fee
    // smart_contracts/xgov_registry/contract.py:1060
    // self.outstanding_funds.value -= amount
    intc_0 // 0
    bytec_1 // 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    frame_dig -1
    -
    bytec_1 // 0x6f75747374616e64696e675f66756e6473
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:1062-1066
    // itxn.Payment(
    //     receiver=self.xgov_manager.value.native,
    //     amount=amount,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:1063
    // receiver=self.xgov_manager.value.native,
    intc_0 // 0
    bytec 4 // 0x78676f765f6d616e61676572
    app_global_get_ex
    assert // check self.xgov_manager exists
    frame_dig -1
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_registry/contract.py:1062
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry/contract.py:1065
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry/contract.py:1062-1066
    // itxn.Payment(
    //     receiver=self.xgov_manager.value.native,
    //     amount=amount,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_balance() -> void:
withdraw_balance:
    // smart_contracts/xgov_registry/contract.py:1080
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:1081
    // assert Txn.fee >= (Global.min_txn_fee * 2), err.INSUFFICIENT_FEE
    txn Fee
    global MinTxnFee
    pushint 2 // 2
    *
    >=
    assert // Insufficient fee
    // smart_contracts/xgov_registry/contract.py:1085
    // Global.current_application_address.balance
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    // smart_contracts/xgov_registry/contract.py:1086
    // - Global.current_application_address.min_balance
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    // smart_contracts/xgov_registry/contract.py:1085-1086
    // Global.current_application_address.balance
    // - Global.current_application_address.min_balance
    -
    // smart_contracts/xgov_registry/contract.py:1087
    // - self.outstanding_funds.value
    intc_0 // 0
    bytec_1 // 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    // smart_contracts/xgov_registry/contract.py:1085-1087
    // Global.current_application_address.balance
    // - Global.current_application_address.min_balance
    // - self.outstanding_funds.value
    -
    // smart_contracts/xgov_registry/contract.py:1090
    // assert amount > 0, err.INSUFFICIENT_FUNDS
    dup
    assert // Insufficient funds
    // smart_contracts/xgov_registry/contract.py:1091-1095
    // itxn.Payment(
    //     receiver=self.xgov_manager.value.native,
    //     amount=amount,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:1092
    // receiver=self.xgov_manager.value.native,
    intc_0 // 0
    bytec 4 // 0x78676f765f6d616e61676572
    app_global_get_ex
    assert // check self.xgov_manager exists
    itxn_field Receiver
    itxn_field Amount
    // smart_contracts/xgov_registry/contract.py:1091
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry/contract.py:1094
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry/contract.py:1091-1095
    // itxn.Payment(
    //     receiver=self.xgov_manager.value.native,
    //     amount=amount,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.get_state() -> bytes:
get_state:
    // smart_contracts/xgov_registry/contract.py:1104
    // paused_registry=arc4.Bool(bool(self.paused_registry.value)),
    intc_0 // 0
    bytec_0 // 0x7061757365645f7265676973747279
    app_global_get_ex
    assert // check self.paused_registry exists
    bytec 8 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // smart_contracts/xgov_registry/contract.py:1105
    // paused_proposals=arc4.Bool(bool(self.paused_proposals.value)),
    intc_0 // 0
    bytec 9 // 0x7061757365645f70726f706f73616c73
    app_global_get_ex
    assert // check self.paused_proposals exists
    bytec 8 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // smart_contracts/xgov_registry/contract.py:1106
    // xgov_manager=self.xgov_manager.value,
    intc_0 // 0
    bytec 4 // 0x78676f765f6d616e61676572
    app_global_get_ex
    assert // check self.xgov_manager exists
    // smart_contracts/xgov_registry/contract.py:1107
    // xgov_payor=self.xgov_payor.value,
    intc_0 // 0
    bytec 12 // 0x78676f765f7061796f72
    app_global_get_ex
    assert // check self.xgov_payor exists
    // smart_contracts/xgov_registry/contract.py:1108
    // xgov_council=self.xgov_council.value,
    intc_0 // 0
    bytec 22 // 0x78676f765f636f756e63696c
    app_global_get_ex
    assert // check self.xgov_council exists
    // smart_contracts/xgov_registry/contract.py:1109
    // xgov_subscriber=self.xgov_subscriber.value,
    intc_0 // 0
    bytec 11 // 0x78676f765f73756273637269626572
    app_global_get_ex
    assert // check self.xgov_subscriber exists
    // smart_contracts/xgov_registry/contract.py:1110
    // kyc_provider=self.kyc_provider.value,
    intc_0 // 0
    bytec 13 // 0x6b79635f70726f7669646572
    app_global_get_ex
    assert // check self.kyc_provider exists
    // smart_contracts/xgov_registry/contract.py:1111
    // committee_manager=self.committee_manager.value,
    intc_0 // 0
    bytec 14 // 0x636f6d6d69747465655f6d616e61676572
    app_global_get_ex
    assert // check self.committee_manager exists
    // smart_contracts/xgov_registry/contract.py:1112
    // xgov_daemon=self.xgov_daemon.value,
    intc_0 // 0
    bytec 15 // 0x78676f765f6461656d6f6e
    app_global_get_ex
    assert // check self.xgov_daemon exists
    // smart_contracts/xgov_registry/contract.py:1113
    // xgov_fee=arc4.UInt64(self.xgov_fee.value),
    intc_0 // 0
    bytec 16 // 0x78676f765f666565
    app_global_get_ex
    assert // check self.xgov_fee exists
    itob
    // smart_contracts/xgov_registry/contract.py:1114
    // proposer_fee=arc4.UInt64(self.proposer_fee.value),
    intc_0 // 0
    bytec 17 // 0x70726f706f7365725f666565
    app_global_get_ex
    assert // check self.proposer_fee exists
    itob
    // smart_contracts/xgov_registry/contract.py:1115
    // open_proposal_fee=arc4.UInt64(self.open_proposal_fee.value),
    intc_0 // 0
    bytec 10 // 0x6f70656e5f70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.open_proposal_fee exists
    itob
    // smart_contracts/xgov_registry/contract.py:1116
    // daemon_ops_funding_bps=arc4.UInt64(self.daemon_ops_funding_bps.value),
    intc_0 // 0
    bytec 23 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073
    app_global_get_ex
    assert // check self.daemon_ops_funding_bps exists
    itob
    // smart_contracts/xgov_registry/contract.py:1117
    // proposal_commitment_bps=arc4.UInt64(self.proposal_commitment_bps.value),
    intc_0 // 0
    bytec 24 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    app_global_get_ex
    assert // check self.proposal_commitment_bps exists
    itob
    // smart_contracts/xgov_registry/contract.py:1118
    // min_requested_amount=arc4.UInt64(self.min_requested_amount.value),
    intc_0 // 0
    bytec 25 // 0x6d696e5f7265717565737465645f616d6f756e74
    app_global_get_ex
    assert // check self.min_requested_amount exists
    itob
    // smart_contracts/xgov_registry/contract.py:1120
    // arc4.UInt64(self.max_requested_amount_small.value),
    intc_0 // 0
    bytec 26 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    app_global_get_ex
    assert // check self.max_requested_amount_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:1121
    // arc4.UInt64(self.max_requested_amount_medium.value),
    intc_0 // 0
    bytec 27 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    app_global_get_ex
    assert // check self.max_requested_amount_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:1122
    // arc4.UInt64(self.max_requested_amount_large.value),
    intc_0 // 0
    bytec 28 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    app_global_get_ex
    assert // check self.max_requested_amount_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:1119-1123
    // max_requested_amount=arc4.StaticArray[arc4.UInt64, t.Literal[3]](
    //     arc4.UInt64(self.max_requested_amount_small.value),
    //     arc4.UInt64(self.max_requested_amount_medium.value),
    //     arc4.UInt64(self.max_requested_amount_large.value),
    // ),
    cover 2
    concat
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:1125
    // arc4.UInt64(self.discussion_duration_small.value),
    intc_0 // 0
    bytec 29 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    app_global_get_ex
    assert // check self.discussion_duration_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:1126
    // arc4.UInt64(self.discussion_duration_medium.value),
    intc_0 // 0
    bytec 30 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    app_global_get_ex
    assert // check self.discussion_duration_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:1127
    // arc4.UInt64(self.discussion_duration_large.value),
    intc_0 // 0
    bytec 31 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    app_global_get_ex
    assert // check self.discussion_duration_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:1128
    // arc4.UInt64(self.discussion_duration_xlarge.value),
    intc_0 // 0
    bytec 32 // 0x64697363757373696f6e5f6475726174696f6e5f786c61726765
    app_global_get_ex
    assert // check self.discussion_duration_xlarge exists
    itob
    // smart_contracts/xgov_registry/contract.py:1124-1129
    // discussion_duration=arc4.StaticArray[arc4.UInt64, t.Literal[4]](
    //     arc4.UInt64(self.discussion_duration_small.value),
    //     arc4.UInt64(self.discussion_duration_medium.value),
    //     arc4.UInt64(self.discussion_duration_large.value),
    //     arc4.UInt64(self.discussion_duration_xlarge.value),
    // ),
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:1131
    // arc4.UInt64(self.voting_duration_small.value),
    intc_0 // 0
    bytec 33 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    app_global_get_ex
    assert // check self.voting_duration_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:1132
    // arc4.UInt64(self.voting_duration_medium.value),
    intc_0 // 0
    bytec 34 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    app_global_get_ex
    assert // check self.voting_duration_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:1133
    // arc4.UInt64(self.voting_duration_large.value),
    intc_0 // 0
    bytec 35 // 0x766f74696e675f6475726174696f6e5f6c61726765
    app_global_get_ex
    assert // check self.voting_duration_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:1134
    // arc4.UInt64(self.voting_duration_xlarge.value),
    intc_0 // 0
    bytec 36 // 0x766f74696e675f6475726174696f6e5f786c61726765
    app_global_get_ex
    assert // check self.voting_duration_xlarge exists
    itob
    // smart_contracts/xgov_registry/contract.py:1130-1135
    // voting_duration=arc4.StaticArray[arc4.UInt64, t.Literal[4]](
    //     arc4.UInt64(self.voting_duration_small.value),
    //     arc4.UInt64(self.voting_duration_medium.value),
    //     arc4.UInt64(self.voting_duration_large.value),
    //     arc4.UInt64(self.voting_duration_xlarge.value),
    // ),
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:1137
    // arc4.UInt64(self.quorum_small.value),
    intc_0 // 0
    bytec 37 // 0x71756f72756d5f736d616c6c
    app_global_get_ex
    assert // check self.quorum_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:1138
    // arc4.UInt64(self.quorum_medium.value),
    intc_0 // 0
    bytec 38 // 0x71756f72756d5f6d656469756d
    app_global_get_ex
    assert // check self.quorum_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:1139
    // arc4.UInt64(self.quorum_large.value),
    intc_0 // 0
    bytec 39 // 0x71756f72756d5f6c61726765
    app_global_get_ex
    assert // check self.quorum_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:1136-1140
    // quorum=arc4.StaticArray[arc4.UInt64, t.Literal[3]](
    //     arc4.UInt64(self.quorum_small.value),
    //     arc4.UInt64(self.quorum_medium.value),
    //     arc4.UInt64(self.quorum_large.value),
    // ),
    cover 2
    concat
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:1142
    // arc4.UInt64(self.weighted_quorum_small.value),
    intc_0 // 0
    bytec 40 // 0x77656967687465645f71756f72756d5f736d616c6c
    app_global_get_ex
    assert // check self.weighted_quorum_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:1143
    // arc4.UInt64(self.weighted_quorum_medium.value),
    intc_0 // 0
    bytec 41 // 0x77656967687465645f71756f72756d5f6d656469756d
    app_global_get_ex
    assert // check self.weighted_quorum_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:1144
    // arc4.UInt64(self.weighted_quorum_large.value),
    intc_0 // 0
    bytec 42 // 0x77656967687465645f71756f72756d5f6c61726765
    app_global_get_ex
    assert // check self.weighted_quorum_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:1141-1145
    // weighted_quorum=arc4.StaticArray[arc4.UInt64, t.Literal[3]](
    //     arc4.UInt64(self.weighted_quorum_small.value),
    //     arc4.UInt64(self.weighted_quorum_medium.value),
    //     arc4.UInt64(self.weighted_quorum_large.value),
    // ),
    cover 2
    concat
    swap
    concat
    // smart_contracts/xgov_registry/contract.py:1146
    // outstanding_funds=arc4.UInt64(self.outstanding_funds.value),
    intc_0 // 0
    bytec_1 // 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    itob
    // smart_contracts/xgov_registry/contract.py:1147
    // pending_proposals=arc4.UInt64(self.pending_proposals.value),
    intc_0 // 0
    bytec_3 // 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    itob
    // smart_contracts/xgov_registry/contract.py:1148
    // committee_id=self.committee_id.value.copy(),
    intc_0 // 0
    bytec 48 // 0x636f6d6d69747465655f6964
    app_global_get_ex
    assert // check self.committee_id exists
    // smart_contracts/xgov_registry/contract.py:1149
    // committee_members=arc4.UInt64(self.committee_members.value),
    intc_0 // 0
    bytec 43 // 0x636f6d6d69747465655f6d656d62657273
    app_global_get_ex
    assert // check self.committee_members exists
    itob
    // smart_contracts/xgov_registry/contract.py:1150
    // committee_votes=arc4.UInt64(self.committee_votes.value),
    intc_0 // 0
    bytec 44 // 0x636f6d6d69747465655f766f746573
    app_global_get_ex
    assert // check self.committee_votes exists
    itob
    // smart_contracts/xgov_registry/contract.py:1103-1151
    // return typ.TypedGlobalState(
    //     paused_registry=arc4.Bool(bool(self.paused_registry.value)),
    //     paused_proposals=arc4.Bool(bool(self.paused_proposals.value)),
    //     xgov_manager=self.xgov_manager.value,
    //     xgov_payor=self.xgov_payor.value,
    //     xgov_council=self.xgov_council.value,
    //     xgov_subscriber=self.xgov_subscriber.value,
    //     kyc_provider=self.kyc_provider.value,
    //     committee_manager=self.committee_manager.value,
    //     xgov_daemon=self.xgov_daemon.value,
    //     xgov_fee=arc4.UInt64(self.xgov_fee.value),
    //     proposer_fee=arc4.UInt64(self.proposer_fee.value),
    //     open_proposal_fee=arc4.UInt64(self.open_proposal_fee.value),
    //     daemon_ops_funding_bps=arc4.UInt64(self.daemon_ops_funding_bps.value),
    //     proposal_commitment_bps=arc4.UInt64(self.proposal_commitment_bps.value),
    //     min_requested_amount=arc4.UInt64(self.min_requested_amount.value),
    //     max_requested_amount=arc4.StaticArray[arc4.UInt64, t.Literal[3]](
    //         arc4.UInt64(self.max_requested_amount_small.value),
    //         arc4.UInt64(self.max_requested_amount_medium.value),
    //         arc4.UInt64(self.max_requested_amount_large.value),
    //     ),
    //     discussion_duration=arc4.StaticArray[arc4.UInt64, t.Literal[4]](
    //         arc4.UInt64(self.discussion_duration_small.value),
    //         arc4.UInt64(self.discussion_duration_medium.value),
    //         arc4.UInt64(self.discussion_duration_large.value),
    //         arc4.UInt64(self.discussion_duration_xlarge.value),
    //     ),
    //     voting_duration=arc4.StaticArray[arc4.UInt64, t.Literal[4]](
    //         arc4.UInt64(self.voting_duration_small.value),
    //         arc4.UInt64(self.voting_duration_medium.value),
    //         arc4.UInt64(self.voting_duration_large.value),
    //         arc4.UInt64(self.voting_duration_xlarge.value),
    //     ),
    //     quorum=arc4.StaticArray[arc4.UInt64, t.Literal[3]](
    //         arc4.UInt64(self.quorum_small.value),
    //         arc4.UInt64(self.quorum_medium.value),
    //         arc4.UInt64(self.quorum_large.value),
    //     ),
    //     weighted_quorum=arc4.StaticArray[arc4.UInt64, t.Literal[3]](
    //         arc4.UInt64(self.weighted_quorum_small.value),
    //         arc4.UInt64(self.weighted_quorum_medium.value),
    //         arc4.UInt64(self.weighted_quorum_large.value),
    //     ),
    //     outstanding_funds=arc4.UInt64(self.outstanding_funds.value),
    //     pending_proposals=arc4.UInt64(self.pending_proposals.value),
    //     committee_id=self.committee_id.value.copy(),
    //     committee_members=arc4.UInt64(self.committee_members.value),
    //     committee_votes=arc4.UInt64(self.committee_votes.value),
    // )
    uncover 23
    intc_0 // 0
    getbit
    uncover 24
    intc_1 // 1
    uncover 2
    setbit
    uncover 23
    concat
    uncover 22
    concat
    uncover 21
    concat
    uncover 20
    concat
    uncover 19
    concat
    uncover 18
    concat
    uncover 17
    concat
    uncover 16
    concat
    uncover 15
    concat
    uncover 14
    concat
    uncover 13
    concat
    uncover 12
    concat
    uncover 11
    concat
    uncover 10
    concat
    uncover 9
    concat
    uncover 8
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.is_proposal(proposal_id: bytes) -> void:
is_proposal:
    // smart_contracts/xgov_registry/contract.py:1153-1154
    // @arc4.abimethod()
    // def is_proposal(self, proposal_id: arc4.UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:1155
    // assert self._is_proposal(proposal_id), err.INVALID_PROPOSAL
    frame_dig -1
    callsub _is_proposal
    assert // Invalid proposal
    retsub
