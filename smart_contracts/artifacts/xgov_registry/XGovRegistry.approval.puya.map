{
  "version": 3,
  "sources": [
    "../../xgov_registry/contract.py"
  ],
  "mappings": "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",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "5": {
      "op": "txn GlobalNumByteSlice",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "7": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "28"
      ]
    },
    "9": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "10": {
      "error": "Wrong Global Bytes allocation",
      "op": "assert // Wrong Global Bytes allocation",
      "stack_out": []
    },
    "11": {
      "op": "txn GlobalNumUint",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "13": {
      "op": "pushint 36 // 36",
      "defined_out": [
        "36",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "36"
      ]
    },
    "15": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "16": {
      "error": "Wrong Global UInts allocation",
      "op": "assert // Wrong Global UInts allocation",
      "stack_out": []
    },
    "17": {
      "op": "txn LocalNumByteSlice",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "19": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "20": {
      "error": "Wrong Local Bytes allocation",
      "op": "assert // Wrong Local Bytes allocation",
      "stack_out": []
    },
    "21": {
      "op": "txn LocalNumUint",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "23": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "24": {
      "error": "Wrong Local UInts allocation",
      "op": "assert // Wrong Local UInts allocation",
      "stack_out": []
    },
    "25": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "26": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "0"
      ]
    },
    "27": {
      "op": "app_global_put",
      "stack_out": []
    },
    "28": {
      "op": "bytec 9 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "30": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "0"
      ]
    },
    "31": {
      "op": "app_global_put",
      "stack_out": []
    },
    "32": {
      "op": "bytec 4 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0x78676f765f6d616e61676572"
      ],
      "stack_out": [
        "0x78676f765f6d616e61676572"
      ]
    },
    "34": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f6d616e61676572",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "0x78676f765f6d616e61676572",
        "new_state_value%0#0"
      ]
    },
    "36": {
      "op": "app_global_put",
      "stack_out": []
    },
    "37": {
      "op": "bytec 11 // 0x78676f765f73756273637269626572",
      "defined_out": [
        "0x78676f765f73756273637269626572"
      ],
      "stack_out": [
        "0x78676f765f73756273637269626572"
      ]
    },
    "39": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f73756273637269626572",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "0x78676f765f73756273637269626572",
        "new_state_value%1#0"
      ]
    },
    "41": {
      "op": "app_global_put",
      "stack_out": []
    },
    "42": {
      "op": "bytec 12 // 0x78676f765f7061796f72",
      "defined_out": [
        "0x78676f765f7061796f72"
      ],
      "stack_out": [
        "0x78676f765f7061796f72"
      ]
    },
    "44": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f7061796f72",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "0x78676f765f7061796f72",
        "new_state_value%2#0"
      ]
    },
    "46": {
      "op": "app_global_put",
      "stack_out": []
    },
    "47": {
      "op": "bytec 22 // 0x78676f765f636f756e63696c",
      "defined_out": [
        "0x78676f765f636f756e63696c"
      ],
      "stack_out": [
        "0x78676f765f636f756e63696c"
      ]
    },
    "49": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f636f756e63696c",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "0x78676f765f636f756e63696c",
        "new_state_value%3#0"
      ]
    },
    "51": {
      "op": "app_global_put",
      "stack_out": []
    },
    "52": {
      "op": "bytec 13 // 0x6b79635f70726f7669646572",
      "defined_out": [
        "0x6b79635f70726f7669646572"
      ],
      "stack_out": [
        "0x6b79635f70726f7669646572"
      ]
    },
    "54": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x6b79635f70726f7669646572",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "0x6b79635f70726f7669646572",
        "new_state_value%4#0"
      ]
    },
    "56": {
      "op": "app_global_put",
      "stack_out": []
    },
    "57": {
      "op": "bytec 14 // 0x636f6d6d69747465655f6d616e61676572",
      "defined_out": [
        "0x636f6d6d69747465655f6d616e61676572"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d616e61676572"
      ]
    },
    "59": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x636f6d6d69747465655f6d616e61676572",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d616e61676572",
        "new_state_value%5#0"
      ]
    },
    "61": {
      "op": "app_global_put",
      "stack_out": []
    },
    "62": {
      "op": "bytec 15 // 0x78676f765f6461656d6f6e",
      "defined_out": [
        "0x78676f765f6461656d6f6e"
      ],
      "stack_out": [
        "0x78676f765f6461656d6f6e"
      ]
    },
    "64": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f6461656d6f6e",
        "new_state_value%6#0"
      ],
      "stack_out": [
        "0x78676f765f6461656d6f6e",
        "new_state_value%6#0"
      ]
    },
    "66": {
      "op": "app_global_put",
      "stack_out": []
    },
    "67": {
      "op": "bytec 16 // 0x78676f765f666565",
      "defined_out": [
        "0x78676f765f666565"
      ],
      "stack_out": [
        "0x78676f765f666565"
      ]
    },
    "69": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x78676f765f666565",
        "0"
      ]
    },
    "70": {
      "op": "app_global_put",
      "stack_out": []
    },
    "71": {
      "op": "bytec 5 // 0x78676f7673",
      "defined_out": [
        "0x78676f7673"
      ],
      "stack_out": [
        "0x78676f7673"
      ]
    },
    "73": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x78676f7673",
        "0"
      ]
    },
    "74": {
      "op": "app_global_put",
      "stack_out": []
    },
    "75": {
      "op": "bytec 17 // 0x70726f706f7365725f666565",
      "defined_out": [
        "0x70726f706f7365725f666565"
      ],
      "stack_out": [
        "0x70726f706f7365725f666565"
      ]
    },
    "77": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x70726f706f7365725f666565",
        "0"
      ]
    },
    "78": {
      "op": "app_global_put",
      "stack_out": []
    },
    "79": {
      "op": "bytec 10 // 0x6f70656e5f70726f706f73616c5f666565",
      "defined_out": [
        "0x6f70656e5f70726f706f73616c5f666565"
      ],
      "stack_out": [
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "81": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6f70656e5f70726f706f73616c5f666565",
        "0"
      ]
    },
    "82": {
      "op": "app_global_put",
      "stack_out": []
    },
    "83": {
      "op": "bytec 23 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
      "defined_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ],
      "stack_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ]
    },
    "85": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "0"
      ]
    },
    "86": {
      "op": "app_global_put",
      "stack_out": []
    },
    "87": {
      "op": "bytec 24 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ],
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ]
    },
    "89": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "0"
      ]
    },
    "90": {
      "op": "app_global_put",
      "stack_out": []
    },
    "91": {
      "op": "bytec 25 // 0x6d696e5f7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ],
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ]
    },
    "93": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "0"
      ]
    },
    "94": {
      "op": "app_global_put",
      "stack_out": []
    },
    "95": {
      "op": "bytec 26 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ]
    },
    "97": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "0"
      ]
    },
    "98": {
      "op": "app_global_put",
      "stack_out": []
    },
    "99": {
      "op": "bytec 27 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ]
    },
    "101": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "0"
      ]
    },
    "102": {
      "op": "app_global_put",
      "stack_out": []
    },
    "103": {
      "op": "bytec 28 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ]
    },
    "105": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "0"
      ]
    },
    "106": {
      "op": "app_global_put",
      "stack_out": []
    },
    "107": {
      "op": "bytec 29 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ]
    },
    "109": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "0"
      ]
    },
    "110": {
      "op": "app_global_put",
      "stack_out": []
    },
    "111": {
      "op": "bytec 30 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ]
    },
    "113": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "0"
      ]
    },
    "114": {
      "op": "app_global_put",
      "stack_out": []
    },
    "115": {
      "op": "bytec 31 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ]
    },
    "117": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "0"
      ]
    },
    "118": {
      "op": "app_global_put",
      "stack_out": []
    },
    "119": {
      "op": "bytec 32 // 0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765"
      ]
    },
    "121": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
        "0"
      ]
    },
    "122": {
      "op": "app_global_put",
      "stack_out": []
    },
    "123": {
      "op": "bytec 33 // 0x766f74696e675f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ]
    },
    "125": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "0"
      ]
    },
    "126": {
      "op": "app_global_put",
      "stack_out": []
    },
    "127": {
      "op": "bytec 34 // 0x766f74696e675f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ]
    },
    "129": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "0"
      ]
    },
    "130": {
      "op": "app_global_put",
      "stack_out": []
    },
    "131": {
      "op": "bytec 35 // 0x766f74696e675f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ]
    },
    "133": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "0"
      ]
    },
    "134": {
      "op": "app_global_put",
      "stack_out": []
    },
    "135": {
      "op": "bytec 36 // 0x766f74696e675f6475726174696f6e5f786c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f786c61726765"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f786c61726765"
      ]
    },
    "137": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f786c61726765",
        "0"
      ]
    },
    "138": {
      "op": "app_global_put",
      "stack_out": []
    },
    "139": {
      "op": "bytec 37 // 0x71756f72756d5f736d616c6c",
      "defined_out": [
        "0x71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "0x71756f72756d5f736d616c6c"
      ]
    },
    "141": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x71756f72756d5f736d616c6c",
        "0"
      ]
    },
    "142": {
      "op": "app_global_put",
      "stack_out": []
    },
    "143": {
      "op": "bytec 38 // 0x71756f72756d5f6d656469756d",
      "defined_out": [
        "0x71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "0x71756f72756d5f6d656469756d"
      ]
    },
    "145": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x71756f72756d5f6d656469756d",
        "0"
      ]
    },
    "146": {
      "op": "app_global_put",
      "stack_out": []
    },
    "147": {
      "op": "bytec 39 // 0x71756f72756d5f6c61726765",
      "defined_out": [
        "0x71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "0x71756f72756d5f6c61726765"
      ]
    },
    "149": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x71756f72756d5f6c61726765",
        "0"
      ]
    },
    "150": {
      "op": "app_global_put",
      "stack_out": []
    },
    "151": {
      "op": "bytec 40 // 0x77656967687465645f71756f72756d5f736d616c6c",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ]
    },
    "153": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "0"
      ]
    },
    "154": {
      "op": "app_global_put",
      "stack_out": []
    },
    "155": {
      "op": "bytec 41 // 0x77656967687465645f71756f72756d5f6d656469756d",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ]
    },
    "157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "0"
      ]
    },
    "158": {
      "op": "app_global_put",
      "stack_out": []
    },
    "159": {
      "op": "bytec 42 // 0x77656967687465645f71756f72756d5f6c61726765",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ]
    },
    "161": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "0"
      ]
    },
    "162": {
      "op": "app_global_put",
      "stack_out": []
    },
    "163": {
      "op": "bytec_1 // 0x6f75747374616e64696e675f66756e6473",
      "defined_out": [
        "0x6f75747374616e64696e675f66756e6473"
      ],
      "stack_out": [
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "164": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6f75747374616e64696e675f66756e6473",
        "0"
      ]
    },
    "165": {
      "op": "app_global_put",
      "stack_out": []
    },
    "166": {
      "op": "bytec 43 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "168": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "0"
      ]
    },
    "169": {
      "op": "app_global_put",
      "stack_out": []
    },
    "170": {
      "op": "bytec 44 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "172": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "0"
      ]
    },
    "173": {
      "op": "app_global_put",
      "stack_out": []
    },
    "174": {
      "op": "bytec_3 // 0x70656e64696e675f70726f706f73616c73",
      "defined_out": [
        "0x70656e64696e675f70726f706f73616c73"
      ],
      "stack_out": [
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "175": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x70656e64696e675f70726f706f73616c73",
        "0"
      ]
    },
    "176": {
      "op": "app_global_put",
      "stack_out": []
    },
    "177": {
      "op": "bytec 18 // 0x726571756573745f6964",
      "defined_out": [
        "0x726571756573745f6964"
      ],
      "stack_out": [
        "0x726571756573745f6964"
      ]
    },
    "179": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x726571756573745f6964",
        "0"
      ]
    },
    "180": {
      "op": "app_global_put",
      "stack_out": []
    },
    "181": {
      "op": "bytec 45 // 0x6d61785f636f6d6d69747465655f73697a65",
      "defined_out": [
        "0x6d61785f636f6d6d69747465655f73697a65"
      ],
      "stack_out": [
        "0x6d61785f636f6d6d69747465655f73697a65"
      ]
    },
    "183": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6d61785f636f6d6d69747465655f73697a65",
        "0"
      ]
    },
    "184": {
      "op": "app_global_put",
      "stack_out": []
    },
    "185": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "187": {
      "op": "bz main_after_if_else@38",
      "stack_out": []
    },
    "190": {
      "op": "pushbytess 0x4c5c61ba 0x86f7e0e6 0x39e26d8a 0x98352e86 0xfa4ed6e2 0xd6c9cc1a 0x5c484055 0x37d6adf1 0xd4216b6e 0xba8520f2 0x1677b30e 0x84b7d268 0x653a0bdb 0x4956c1ab 0xa082cef8 0x76725559 0x45077390 0x3c31bc02 0x0d2c7891 0x0da27885 0x7a4fee43 0x52dd10d7 0xd4d37a64 0x34349dcc 0x158f8dd6 0xdb27b9af 0x913ec7db 0x65610a9f 0xfdc695c2 0xba90ab54 0xb3b58482 0x00b3cef5 0x26983200 // method \"create()void\", method \"pause_registry()void\", method \"pause_proposals()void\", method \"resume_registry()void\", method \"resume_proposals()void\", method \"set_xgov_manager(address)void\", method \"set_payor(address)void\", method \"set_xgov_council(address)void\", method \"set_xgov_subscriber(address)void\", method \"set_kyc_provider(address)void\", method \"set_committee_manager(address)void\", method \"set_xgov_daemon(address)void\", method \"config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void\", method \"update_xgov_registry()void\", method \"subscribe_xgov(address,pay)void\", method \"unsubscribe_xgov(address)void\", method \"request_subscribe_xgov(address,address,uint64,pay)void\", method \"approve_subscribe_xgov(uint64)void\", method \"reject_subscribe_xgov(uint64)void\", method \"set_voting_account(address,address)void\", method \"subscribe_proposer(pay)void\", method \"set_proposer_kyc(address,bool,uint64)void\", method \"declare_committee(byte[32],uint64,uint64)void\", method \"open_proposal(pay)uint64\", method \"vote_proposal(uint64,address,uint64,uint64)void\", method \"pay_grant_proposal(uint64)void\", method \"decommission_proposal(uint64)void\", method \"drop_proposal(uint64)void\", method \"deposit_funds(pay)void\", method \"withdraw_funds(uint64)void\", method \"withdraw_balance()void\", method \"get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)\", method \"is_proposal(uint64)void\"",
      "defined_out": [
        "Method(approve_subscribe_xgov(uint64)void)",
        "Method(config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void)",
        "Method(create()void)",
        "Method(declare_committee(byte[32],uint64,uint64)void)",
        "Method(decommission_proposal(uint64)void)",
        "Method(deposit_funds(pay)void)",
        "Method(drop_proposal(uint64)void)",
        "Method(get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64))",
        "Method(is_proposal(uint64)void)",
        "Method(open_proposal(pay)uint64)",
        "Method(pause_proposals()void)",
        "Method(pause_registry()void)",
        "Method(pay_grant_proposal(uint64)void)",
        "Method(reject_subscribe_xgov(uint64)void)",
        "Method(request_subscribe_xgov(address,address,uint64,pay)void)",
        "Method(resume_proposals()void)",
        "Method(resume_registry()void)",
        "Method(set_committee_manager(address)void)",
        "Method(set_kyc_provider(address)void)",
        "Method(set_payor(address)void)",
        "Method(set_proposer_kyc(address,bool,uint64)void)",
        "Method(set_voting_account(address,address)void)",
        "Method(set_xgov_council(address)void)",
        "Method(set_xgov_daemon(address)void)",
        "Method(set_xgov_manager(address)void)",
        "Method(set_xgov_subscriber(address)void)",
        "Method(subscribe_proposer(pay)void)",
        "Method(subscribe_xgov(address,pay)void)",
        "Method(unsubscribe_xgov(address)void)",
        "Method(update_xgov_registry()void)",
        "Method(vote_proposal(uint64,address,uint64,uint64)void)",
        "Method(withdraw_balance()void)",
        "Method(withdraw_funds(uint64)void)"
      ],
      "stack_out": [
        "Method(create()void)",
        "Method(pause_registry()void)",
        "Method(pause_proposals()void)",
        "Method(resume_registry()void)",
        "Method(resume_proposals()void)",
        "Method(set_xgov_manager(address)void)",
        "Method(set_payor(address)void)",
        "Method(set_xgov_council(address)void)",
        "Method(set_xgov_subscriber(address)void)",
        "Method(set_kyc_provider(address)void)",
        "Method(set_committee_manager(address)void)",
        "Method(set_xgov_daemon(address)void)",
        "Method(config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void)",
        "Method(update_xgov_registry()void)",
        "Method(subscribe_xgov(address,pay)void)",
        "Method(unsubscribe_xgov(address)void)",
        "Method(request_subscribe_xgov(address,address,uint64,pay)void)",
        "Method(approve_subscribe_xgov(uint64)void)",
        "Method(reject_subscribe_xgov(uint64)void)",
        "Method(set_voting_account(address,address)void)",
        "Method(subscribe_proposer(pay)void)",
        "Method(set_proposer_kyc(address,bool,uint64)void)",
        "Method(declare_committee(byte[32],uint64,uint64)void)",
        "Method(open_proposal(pay)uint64)",
        "Method(vote_proposal(uint64,address,uint64,uint64)void)",
        "Method(pay_grant_proposal(uint64)void)",
        "Method(decommission_proposal(uint64)void)",
        "Method(drop_proposal(uint64)void)",
        "Method(deposit_funds(pay)void)",
        "Method(withdraw_funds(uint64)void)",
        "Method(withdraw_balance()void)",
        "Method(get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64))",
        "Method(is_proposal(uint64)void)"
      ]
    },
    "357": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(approve_subscribe_xgov(uint64)void)",
        "Method(config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void)",
        "Method(create()void)",
        "Method(declare_committee(byte[32],uint64,uint64)void)",
        "Method(decommission_proposal(uint64)void)",
        "Method(deposit_funds(pay)void)",
        "Method(drop_proposal(uint64)void)",
        "Method(get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64))",
        "Method(is_proposal(uint64)void)",
        "Method(open_proposal(pay)uint64)",
        "Method(pause_proposals()void)",
        "Method(pause_registry()void)",
        "Method(pay_grant_proposal(uint64)void)",
        "Method(reject_subscribe_xgov(uint64)void)",
        "Method(request_subscribe_xgov(address,address,uint64,pay)void)",
        "Method(resume_proposals()void)",
        "Method(resume_registry()void)",
        "Method(set_committee_manager(address)void)",
        "Method(set_kyc_provider(address)void)",
        "Method(set_payor(address)void)",
        "Method(set_proposer_kyc(address,bool,uint64)void)",
        "Method(set_voting_account(address,address)void)",
        "Method(set_xgov_council(address)void)",
        "Method(set_xgov_daemon(address)void)",
        "Method(set_xgov_manager(address)void)",
        "Method(set_xgov_subscriber(address)void)",
        "Method(subscribe_proposer(pay)void)",
        "Method(subscribe_xgov(address,pay)void)",
        "Method(unsubscribe_xgov(address)void)",
        "Method(update_xgov_registry()void)",
        "Method(vote_proposal(uint64,address,uint64,uint64)void)",
        "Method(withdraw_balance()void)",
        "Method(withdraw_funds(uint64)void)",
        "tmp%2#1"
      ],
      "stack_out": [
        "Method(create()void)",
        "Method(pause_registry()void)",
        "Method(pause_proposals()void)",
        "Method(resume_registry()void)",
        "Method(resume_proposals()void)",
        "Method(set_xgov_manager(address)void)",
        "Method(set_payor(address)void)",
        "Method(set_xgov_council(address)void)",
        "Method(set_xgov_subscriber(address)void)",
        "Method(set_kyc_provider(address)void)",
        "Method(set_committee_manager(address)void)",
        "Method(set_xgov_daemon(address)void)",
        "Method(config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void)",
        "Method(update_xgov_registry()void)",
        "Method(subscribe_xgov(address,pay)void)",
        "Method(unsubscribe_xgov(address)void)",
        "Method(request_subscribe_xgov(address,address,uint64,pay)void)",
        "Method(approve_subscribe_xgov(uint64)void)",
        "Method(reject_subscribe_xgov(uint64)void)",
        "Method(set_voting_account(address,address)void)",
        "Method(subscribe_proposer(pay)void)",
        "Method(set_proposer_kyc(address,bool,uint64)void)",
        "Method(declare_committee(byte[32],uint64,uint64)void)",
        "Method(open_proposal(pay)uint64)",
        "Method(vote_proposal(uint64,address,uint64,uint64)void)",
        "Method(pay_grant_proposal(uint64)void)",
        "Method(decommission_proposal(uint64)void)",
        "Method(drop_proposal(uint64)void)",
        "Method(deposit_funds(pay)void)",
        "Method(withdraw_funds(uint64)void)",
        "Method(withdraw_balance()void)",
        "Method(get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64))",
        "Method(is_proposal(uint64)void)",
        "tmp%2#1"
      ]
    },
    "360": {
      "op": "match main_create_route@5 main_pause_registry_route@6 main_pause_proposals_route@7 main_resume_registry_route@8 main_resume_proposals_route@9 main_set_xgov_manager_route@10 main_set_payor_route@11 main_set_xgov_council_route@12 main_set_xgov_subscriber_route@13 main_set_kyc_provider_route@14 main_set_committee_manager_route@15 main_set_xgov_daemon_route@16 main_config_xgov_registry_route@17 main_update_xgov_registry_route@18 main_subscribe_xgov_route@19 main_unsubscribe_xgov_route@20 main_request_subscribe_xgov_route@21 main_approve_subscribe_xgov_route@22 main_reject_subscribe_xgov_route@23 main_set_voting_account_route@24 main_subscribe_proposer_route@25 main_set_proposer_kyc_route@26 main_declare_committee_route@27 main_open_proposal_route@28 main_vote_proposal_route@29 main_pay_grant_proposal_route@30 main_decommission_proposal_route@31 main_drop_proposal_route@32 main_deposit_funds_route@33 main_withdraw_funds_route@34 main_withdraw_balance_route@35 main_get_state_route@36 main_is_proposal_route@37",
      "stack_out": []
    },
    "428": {
      "block": "main_after_if_else@38",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "429": {
      "op": "return",
      "stack_out": []
    },
    "430": {
      "block": "main_is_proposal_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "432": {
      "op": "!",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "433": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "434": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "436": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "437": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "440": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_proposal",
      "op": "callsub is_proposal",
      "stack_out": []
    },
    "443": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "444": {
      "op": "return",
      "stack_out": []
    },
    "445": {
      "block": "main_get_state_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "447": {
      "op": "!",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "448": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "449": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "451": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "452": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.get_state",
      "op": "callsub get_state",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "455": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0",
        "0x151f7c75"
      ]
    },
    "457": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%138#0"
      ]
    },
    "458": {
      "op": "concat",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "459": {
      "op": "log",
      "stack_out": []
    },
    "460": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "461": {
      "op": "return",
      "stack_out": []
    },
    "462": {
      "block": "main_withdraw_balance_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "464": {
      "op": "!",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "465": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "466": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "468": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "469": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_balance",
      "op": "callsub withdraw_balance"
    },
    "472": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "473": {
      "op": "return",
      "stack_out": []
    },
    "474": {
      "block": "main_withdraw_funds_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "476": {
      "op": "!",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "477": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "478": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "480": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "481": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "484": {
      "op": "btoi",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "485": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_funds",
      "op": "callsub withdraw_funds",
      "stack_out": []
    },
    "488": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "489": {
      "op": "return",
      "stack_out": []
    },
    "490": {
      "block": "main_deposit_funds_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "492": {
      "op": "!",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "493": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "494": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "496": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "497": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "499": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0",
        "1"
      ]
    },
    "500": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0"
      ]
    },
    "501": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "502": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "504": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "505": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "506": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%4#0"
      ]
    },
    "507": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.deposit_funds",
      "op": "callsub deposit_funds",
      "stack_out": []
    },
    "510": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "511": {
      "op": "return",
      "stack_out": []
    },
    "512": {
      "block": "main_drop_proposal_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "514": {
      "op": "!",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "515": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "516": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "518": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "519": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "522": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.drop_proposal",
      "op": "callsub drop_proposal",
      "stack_out": []
    },
    "525": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "526": {
      "op": "return",
      "stack_out": []
    },
    "527": {
      "block": "main_decommission_proposal_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "529": {
      "op": "!",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "530": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "531": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "533": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "534": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "537": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.decommission_proposal",
      "op": "callsub decommission_proposal",
      "stack_out": []
    },
    "540": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "541": {
      "op": "return",
      "stack_out": []
    },
    "542": {
      "block": "main_pay_grant_proposal_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "544": {
      "op": "!",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "545": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "546": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "548": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "549": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "552": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.pay_grant_proposal",
      "op": "callsub pay_grant_proposal",
      "stack_out": []
    },
    "555": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "556": {
      "op": "return",
      "stack_out": []
    },
    "557": {
      "block": "main_vote_proposal_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "559": {
      "op": "!",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "560": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "561": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "563": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "564": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "567": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[32]%15#0"
      ]
    },
    "570": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "573": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "576": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.vote_proposal",
      "op": "callsub vote_proposal",
      "stack_out": []
    },
    "579": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "580": {
      "op": "return",
      "stack_out": []
    },
    "581": {
      "block": "main_open_proposal_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "583": {
      "op": "!",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "584": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "585": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "587": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "588": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "590": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0",
        "1"
      ]
    },
    "591": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "592": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "593": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "595": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ]
    },
    "596": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "597": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "598": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.open_proposal",
      "op": "callsub open_proposal",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "601": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "602": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "604": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "605": {
      "op": "concat",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "606": {
      "op": "log",
      "stack_out": []
    },
    "607": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "608": {
      "op": "return",
      "stack_out": []
    },
    "609": {
      "block": "main_declare_committee_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "611": {
      "op": "!",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "612": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "613": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "615": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "616": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0"
      ]
    },
    "619": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "622": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "625": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.declare_committee",
      "op": "callsub declare_committee",
      "stack_out": []
    },
    "628": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "629": {
      "op": "return",
      "stack_out": []
    },
    "630": {
      "block": "main_set_proposer_kyc_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "632": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "633": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "634": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "636": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "637": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%13#0"
      ]
    },
    "640": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%13#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "643": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%13#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%13#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "646": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_proposer_kyc",
      "op": "callsub set_proposer_kyc",
      "stack_out": []
    },
    "649": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "650": {
      "op": "return",
      "stack_out": []
    },
    "651": {
      "block": "main_subscribe_proposer_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "653": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "654": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "655": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "657": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "658": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "660": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "1"
      ]
    },
    "661": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "662": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "663": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "665": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "666": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "667": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "668": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_proposer",
      "op": "callsub subscribe_proposer",
      "stack_out": []
    },
    "671": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "672": {
      "op": "return",
      "stack_out": []
    },
    "673": {
      "block": "main_set_voting_account_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "675": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "676": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "677": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "679": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "680": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%11#0"
      ]
    },
    "683": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0"
      ]
    },
    "686": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_voting_account",
      "op": "callsub set_voting_account",
      "stack_out": []
    },
    "689": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "690": {
      "op": "return",
      "stack_out": []
    },
    "691": {
      "block": "main_reject_subscribe_xgov_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "693": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "694": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "695": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "697": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "698": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "701": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.reject_subscribe_xgov",
      "op": "callsub reject_subscribe_xgov",
      "stack_out": []
    },
    "704": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "705": {
      "op": "return",
      "stack_out": []
    },
    "706": {
      "block": "main_approve_subscribe_xgov_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "708": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "709": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "710": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "712": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "713": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "716": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.approve_subscribe_xgov",
      "op": "callsub approve_subscribe_xgov",
      "stack_out": []
    },
    "719": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "720": {
      "op": "return",
      "stack_out": []
    },
    "721": {
      "block": "main_request_subscribe_xgov_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "723": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "724": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "725": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "727": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "728": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0"
      ]
    },
    "731": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0"
      ]
    },
    "734": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "737": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%72#0"
      ]
    },
    "739": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%72#0",
        "1"
      ]
    },
    "740": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[8]%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "741": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[8]%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "742": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[8]%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "744": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[8]%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "745": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[8]%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "746": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[8]%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "747": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.request_subscribe_xgov",
      "op": "callsub request_subscribe_xgov",
      "stack_out": []
    },
    "750": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "751": {
      "op": "return",
      "stack_out": []
    },
    "752": {
      "block": "main_unsubscribe_xgov_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "754": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "755": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "756": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "758": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "759": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0"
      ]
    },
    "762": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.unsubscribe_xgov",
      "op": "callsub unsubscribe_xgov",
      "stack_out": []
    },
    "765": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "766": {
      "op": "return",
      "stack_out": []
    },
    "767": {
      "block": "main_subscribe_xgov_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "769": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "770": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "771": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "773": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "774": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "777": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[32]%7#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "tmp%63#0"
      ]
    },
    "779": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[32]%7#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "tmp%63#0",
        "1"
      ]
    },
    "780": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "gtxn_idx%0#0"
      ]
    },
    "781": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "782": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "784": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "785": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "786": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "gtxn_idx%0#0"
      ]
    },
    "787": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_xgov",
      "op": "callsub subscribe_xgov",
      "stack_out": []
    },
    "790": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "791": {
      "op": "return",
      "stack_out": []
    },
    "792": {
      "block": "main_update_xgov_registry_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "794": {
      "op": "intc_2 // UpdateApplication",
      "defined_out": [
        "UpdateApplication",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "UpdateApplication"
      ]
    },
    "795": {
      "op": "==",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "796": {
      "error": "OnCompletion is not UpdateApplication",
      "op": "assert // OnCompletion is not UpdateApplication",
      "stack_out": []
    },
    "797": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "799": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "800": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.update_xgov_registry",
      "op": "callsub update_xgov_registry"
    },
    "803": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "804": {
      "op": "return",
      "stack_out": []
    },
    "805": {
      "block": "main_config_xgov_registry_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "807": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "808": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "809": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "811": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "812": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[184]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[184]%0#0"
      ]
    },
    "815": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.config_xgov_registry",
      "op": "callsub config_xgov_registry",
      "stack_out": []
    },
    "818": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "819": {
      "op": "return",
      "stack_out": []
    },
    "820": {
      "block": "main_set_xgov_daemon_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "822": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "823": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "824": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "826": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "827": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "830": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_daemon",
      "op": "callsub set_xgov_daemon",
      "stack_out": []
    },
    "833": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "834": {
      "op": "return",
      "stack_out": []
    },
    "835": {
      "block": "main_set_committee_manager_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "837": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "838": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "839": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "841": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "842": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "845": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_committee_manager",
      "op": "callsub set_committee_manager",
      "stack_out": []
    },
    "848": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "849": {
      "op": "return",
      "stack_out": []
    },
    "850": {
      "block": "main_set_kyc_provider_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "852": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "853": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "854": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "856": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "857": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "860": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_kyc_provider",
      "op": "callsub set_kyc_provider",
      "stack_out": []
    },
    "863": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "864": {
      "op": "return",
      "stack_out": []
    },
    "865": {
      "block": "main_set_xgov_subscriber_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "867": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "868": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "869": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "871": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "872": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "875": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_subscriber",
      "op": "callsub set_xgov_subscriber",
      "stack_out": []
    },
    "878": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "879": {
      "op": "return",
      "stack_out": []
    },
    "880": {
      "block": "main_set_xgov_council_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "882": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "883": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "884": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "886": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "887": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "890": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_council",
      "op": "callsub set_xgov_council",
      "stack_out": []
    },
    "893": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "894": {
      "op": "return",
      "stack_out": []
    },
    "895": {
      "block": "main_set_payor_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "897": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "898": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "899": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "901": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "902": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "905": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_payor",
      "op": "callsub set_payor",
      "stack_out": []
    },
    "908": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "909": {
      "op": "return",
      "stack_out": []
    },
    "910": {
      "block": "main_set_xgov_manager_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "912": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "913": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "914": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "916": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "917": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "920": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_manager",
      "op": "callsub set_xgov_manager",
      "stack_out": []
    },
    "923": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "924": {
      "op": "return",
      "stack_out": []
    },
    "925": {
      "block": "main_resume_proposals_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "927": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "928": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "929": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "931": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "932": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.resume_proposals",
      "op": "callsub resume_proposals"
    },
    "935": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "936": {
      "op": "return",
      "stack_out": []
    },
    "937": {
      "block": "main_resume_registry_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "939": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "940": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "941": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "943": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "944": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.resume_registry",
      "op": "callsub resume_registry"
    },
    "947": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "948": {
      "op": "return",
      "stack_out": []
    },
    "949": {
      "block": "main_pause_proposals_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "951": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "952": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "953": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "955": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "956": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.pause_proposals",
      "op": "callsub pause_proposals"
    },
    "959": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "960": {
      "op": "return",
      "stack_out": []
    },
    "961": {
      "block": "main_pause_registry_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#1"
      ],
      "stack_out": [
        "tmp%7#1"
      ]
    },
    "963": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "964": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "965": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "967": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "968": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.pause_registry",
      "op": "callsub pause_registry"
    },
    "971": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "972": {
      "op": "return",
      "stack_out": []
    },
    "973": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "975": {
      "op": "!",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "976": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "977": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%5#1"
      ]
    },
    "979": {
      "op": "!",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%6#1"
      ]
    },
    "980": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "981": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.create",
      "op": "callsub create"
    },
    "984": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "985": {
      "op": "return",
      "stack_out": []
    },
    "986": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "params": {},
      "block": "is_xgov_manager",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "988": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "989": {
      "op": "bytec 4 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0",
        "0x78676f765f6d616e61676572",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x78676f765f6d616e61676572"
      ]
    },
    "991": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "992": {
      "error": "check self.xgov_manager exists",
      "op": "assert // check self.xgov_manager exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "993": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "994": {
      "retsub": true,
      "op": "retsub"
    },
    "995": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_subscriber",
      "params": {},
      "block": "is_xgov_subscriber",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "997": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "998": {
      "op": "bytec 11 // 0x78676f765f73756273637269626572",
      "defined_out": [
        "0",
        "0x78676f765f73756273637269626572",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x78676f765f73756273637269626572"
      ]
    },
    "1000": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1001": {
      "error": "check self.xgov_subscriber exists",
      "op": "assert // check self.xgov_subscriber exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1002": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1003": {
      "retsub": true,
      "op": "retsub"
    },
    "1004": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal",
      "params": {
        "proposal_id#0": "bytes"
      },
      "block": "_is_proposal",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1007": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "1009": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1010": {
      "op": "app_params_get AppCreator",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1012": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1013": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%1#0"
      ]
    },
    "1015": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1016": {
      "retsub": true,
      "op": "retsub"
    },
    "1017": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_xgov_payment",
      "params": {
        "payment#0": "uint64"
      },
      "block": "valid_xgov_payment",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1020": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1022": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1024": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1026": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1027": {
      "op": "bz valid_xgov_payment_bool_false@3",
      "stack_out": []
    },
    "1030": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1032": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1034": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "1035": {
      "op": "bytec 16 // 0x78676f765f666565",
      "defined_out": [
        "0",
        "0x78676f765f666565",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "0x78676f765f666565"
      ]
    },
    "1037": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1038": {
      "error": "check self.xgov_fee exists",
      "op": "assert // check self.xgov_fee exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "1039": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1040": {
      "op": "bz valid_xgov_payment_bool_false@3",
      "stack_out": []
    },
    "1043": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1044": {
      "retsub": true,
      "op": "retsub"
    },
    "1045": {
      "block": "valid_xgov_payment_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1046": {
      "retsub": true,
      "op": "retsub"
    },
    "1047": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_kyc",
      "params": {
        "address#0": "bytes"
      },
      "block": "valid_kyc",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1050": {
      "op": "bytec_2 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "1051": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x70",
        "address#0 (copy)"
      ],
      "stack_out": [
        "0x70",
        "address#0 (copy)"
      ]
    },
    "1053": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1054": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1055": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1056": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1057": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "1058": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "is_true%0#0"
      ]
    },
    "1059": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1061": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1062": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1064": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_bool%0#0"
      ]
    },
    "1065": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1066": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1067": {
      "op": "bz valid_kyc_bool_false@3",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1070": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1072": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1073": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1074": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "1075": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1076": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1078": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "1079": {
      "op": "bz valid_kyc_bool_false@3",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1082": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "1083": {
      "block": "valid_kyc_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "and_result%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "and_result%0#0"
      ]
    },
    "1084": {
      "retsub": true,
      "op": "retsub"
    },
    "1085": {
      "block": "valid_kyc_bool_false@3",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "1086": {
      "op": "b valid_kyc_bool_merge@4"
    },
    "1089": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.create",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "bytec 4 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0x78676f765f6d616e61676572"
      ],
      "stack_out": [
        "0x78676f765f6d616e61676572"
      ]
    },
    "1091": {
      "op": "txn Sender",
      "defined_out": [
        "0x78676f765f6d616e61676572",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "0x78676f765f6d616e61676572",
        "new_state_value%0#0"
      ]
    },
    "1093": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1094": {
      "op": "bytec 51 // TMPL_entropy",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1096": {
      "op": "dup",
      "defined_out": [
        "TMPL_entropy",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "TMPL_entropy"
      ]
    },
    "1097": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1098": {
      "op": "assert",
      "stack_out": []
    },
    "1099": {
      "retsub": true,
      "op": "retsub"
    },
    "1100": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.pause_registry",
      "params": {},
      "block": "pause_registry",
      "stack_in": [],
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1103": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1104": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "1105": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x7061757365645f7265676973747279",
        "1"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "1"
      ]
    },
    "1106": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1107": {
      "retsub": true,
      "op": "retsub"
    },
    "1108": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.pause_proposals",
      "params": {},
      "block": "pause_proposals",
      "stack_in": [],
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1111": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1112": {
      "op": "bytec 9 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "1114": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73",
        "1"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "1"
      ]
    },
    "1115": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1116": {
      "retsub": true,
      "op": "retsub"
    },
    "1117": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.resume_registry",
      "params": {},
      "block": "resume_registry",
      "stack_in": [],
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1120": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1121": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "1122": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "0"
      ]
    },
    "1123": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1124": {
      "retsub": true,
      "op": "retsub"
    },
    "1125": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.resume_proposals",
      "params": {},
      "block": "resume_proposals",
      "stack_in": [],
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1128": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1129": {
      "op": "bytec 9 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "1131": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "0"
      ]
    },
    "1132": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1133": {
      "retsub": true,
      "op": "retsub"
    },
    "1134": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_manager",
      "params": {
        "manager#0": "bytes"
      },
      "block": "set_xgov_manager",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1137": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1140": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1141": {
      "op": "bytec 4 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0x78676f765f6d616e61676572"
      ],
      "stack_out": [
        "0x78676f765f6d616e61676572"
      ]
    },
    "1143": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f6d616e61676572",
        "manager#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f6d616e61676572",
        "manager#0 (copy)"
      ]
    },
    "1145": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1146": {
      "retsub": true,
      "op": "retsub"
    },
    "1147": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_payor",
      "params": {
        "payor#0": "bytes"
      },
      "block": "set_payor",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1150": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1153": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1154": {
      "op": "bytec 12 // 0x78676f765f7061796f72",
      "defined_out": [
        "0x78676f765f7061796f72"
      ],
      "stack_out": [
        "0x78676f765f7061796f72"
      ]
    },
    "1156": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f7061796f72",
        "payor#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f7061796f72",
        "payor#0 (copy)"
      ]
    },
    "1158": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1159": {
      "retsub": true,
      "op": "retsub"
    },
    "1160": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_council",
      "params": {
        "council#0": "bytes"
      },
      "block": "set_xgov_council",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1163": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1166": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1167": {
      "op": "bytec 22 // 0x78676f765f636f756e63696c",
      "defined_out": [
        "0x78676f765f636f756e63696c"
      ],
      "stack_out": [
        "0x78676f765f636f756e63696c"
      ]
    },
    "1169": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f636f756e63696c",
        "council#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f636f756e63696c",
        "council#0 (copy)"
      ]
    },
    "1171": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1172": {
      "retsub": true,
      "op": "retsub"
    },
    "1173": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_subscriber",
      "params": {
        "subscriber#0": "bytes"
      },
      "block": "set_xgov_subscriber",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1176": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1179": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1180": {
      "op": "bytec 11 // 0x78676f765f73756273637269626572",
      "defined_out": [
        "0x78676f765f73756273637269626572"
      ],
      "stack_out": [
        "0x78676f765f73756273637269626572"
      ]
    },
    "1182": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f73756273637269626572",
        "subscriber#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f73756273637269626572",
        "subscriber#0 (copy)"
      ]
    },
    "1184": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1185": {
      "retsub": true,
      "op": "retsub"
    },
    "1186": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_kyc_provider",
      "params": {
        "provider#0": "bytes"
      },
      "block": "set_kyc_provider",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1189": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1192": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1193": {
      "op": "bytec 13 // 0x6b79635f70726f7669646572",
      "defined_out": [
        "0x6b79635f70726f7669646572"
      ],
      "stack_out": [
        "0x6b79635f70726f7669646572"
      ]
    },
    "1195": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6b79635f70726f7669646572",
        "provider#0 (copy)"
      ],
      "stack_out": [
        "0x6b79635f70726f7669646572",
        "provider#0 (copy)"
      ]
    },
    "1197": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1198": {
      "retsub": true,
      "op": "retsub"
    },
    "1199": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_committee_manager",
      "params": {
        "manager#0": "bytes"
      },
      "block": "set_committee_manager",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1202": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1205": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1206": {
      "op": "bytec 14 // 0x636f6d6d69747465655f6d616e61676572",
      "defined_out": [
        "0x636f6d6d69747465655f6d616e61676572"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d616e61676572"
      ]
    },
    "1208": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x636f6d6d69747465655f6d616e61676572",
        "manager#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d616e61676572",
        "manager#0 (copy)"
      ]
    },
    "1210": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1211": {
      "retsub": true,
      "op": "retsub"
    },
    "1212": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_daemon",
      "params": {
        "xgov_daemon#0": "bytes"
      },
      "block": "set_xgov_daemon",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1215": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1218": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1219": {
      "op": "bytec 15 // 0x78676f765f6461656d6f6e",
      "defined_out": [
        "0x78676f765f6461656d6f6e"
      ],
      "stack_out": [
        "0x78676f765f6461656d6f6e"
      ]
    },
    "1221": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f6461656d6f6e",
        "xgov_daemon#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f6461656d6f6e",
        "xgov_daemon#0 (copy)"
      ]
    },
    "1223": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1224": {
      "retsub": true,
      "op": "retsub"
    },
    "1225": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.config_xgov_registry",
      "params": {
        "config#0": "bytes"
      },
      "block": "config_xgov_registry",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1228": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1231": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1232": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1233": {
      "op": "bytec_3 // 0x70656e64696e675f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ],
      "stack_out": [
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "1234": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1235": {
      "error": "check self.pending_proposals exists",
      "op": "assert // check self.pending_proposals exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1236": {
      "op": "!",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1237": {
      "error": "Cannot perform operation with pending proposals",
      "op": "assert // Cannot perform operation with pending proposals",
      "stack_out": []
    },
    "1238": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1240": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "16"
      ]
    },
    "1241": {
      "op": "extract_uint64",
      "defined_out": [
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0"
      ]
    },
    "1242": {
      "op": "frame_dig -1",
      "stack_out": [
        "open_proposal_fee#0",
        "config#0 (copy)"
      ]
    },
    "1244": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "config#0 (copy)",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "config#0 (copy)",
        "24"
      ]
    },
    "1246": {
      "op": "extract_uint64",
      "defined_out": [
        "daemon_ops_funding_bps#0",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0"
      ]
    },
    "1247": {
      "op": "dup2",
      "defined_out": [
        "daemon_ops_funding_bps#0",
        "daemon_ops_funding_bps#0 (copy)",
        "open_proposal_fee#0",
        "open_proposal_fee#0 (copy)"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "open_proposal_fee#0 (copy)",
        "daemon_ops_funding_bps#0 (copy)"
      ]
    },
    "1248": {
      "op": "*",
      "defined_out": [
        "daemon_ops_funding_bps#0",
        "open_proposal_fee#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "tmp%0#3"
      ]
    },
    "1249": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "daemon_ops_funding_bps#0",
        "open_proposal_fee#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "tmp%0#3",
        "10000"
      ]
    },
    "1252": {
      "op": "/",
      "defined_out": [
        "daemon_ops_funding#0",
        "daemon_ops_funding_bps#0",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "daemon_ops_funding#0"
      ]
    },
    "1253": {
      "op": "pushint 16835300 // 16835300",
      "defined_out": [
        "16835300",
        "daemon_ops_funding#0",
        "daemon_ops_funding_bps#0",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "daemon_ops_funding#0",
        "16835300"
      ]
    },
    "1258": {
      "op": "+",
      "defined_out": [
        "daemon_ops_funding_bps#0",
        "open_proposal_fee#0",
        "to_substract#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "to_substract#0"
      ]
    },
    "1259": {
      "op": "dig 2",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "to_substract#0",
        "open_proposal_fee#0 (copy)"
      ]
    },
    "1261": {
      "op": "dig 1",
      "defined_out": [
        "daemon_ops_funding_bps#0",
        "open_proposal_fee#0",
        "open_proposal_fee#0 (copy)",
        "to_substract#0",
        "to_substract#0 (copy)"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "to_substract#0",
        "open_proposal_fee#0 (copy)",
        "to_substract#0 (copy)"
      ]
    },
    "1263": {
      "op": ">",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "to_substract#0",
        "tmp%0#0"
      ]
    },
    "1264": {
      "error": "Invalid open proposal fee",
      "op": "assert // Invalid open proposal fee",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "to_substract#0"
      ]
    },
    "1265": {
      "op": "dig 2",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "to_substract#0",
        "open_proposal_fee#0 (copy)"
      ]
    },
    "1267": {
      "op": "swap",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "open_proposal_fee#0 (copy)",
        "to_substract#0"
      ]
    },
    "1268": {
      "op": "-",
      "defined_out": [
        "daemon_ops_funding_bps#0",
        "mbr_available_for_committee#0",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "mbr_available_for_committee#0"
      ]
    },
    "1269": {
      "op": "pushint 19300 // 19300",
      "defined_out": [
        "19300",
        "daemon_ops_funding_bps#0",
        "mbr_available_for_committee#0",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "mbr_available_for_committee#0",
        "19300"
      ]
    },
    "1273": {
      "op": "/",
      "defined_out": [
        "daemon_ops_funding_bps#0",
        "new_state_value%0#0",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "new_state_value%0#0"
      ]
    },
    "1274": {
      "op": "bytec 45 // 0x6d61785f636f6d6d69747465655f73697a65",
      "defined_out": [
        "0x6d61785f636f6d6d69747465655f73697a65",
        "daemon_ops_funding_bps#0",
        "new_state_value%0#0",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "new_state_value%0#0",
        "0x6d61785f636f6d6d69747465655f73697a65"
      ]
    },
    "1276": {
      "op": "swap",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "0x6d61785f636f6d6d69747465655f73697a65",
        "new_state_value%0#0"
      ]
    },
    "1277": {
      "op": "app_global_put",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0"
      ]
    },
    "1278": {
      "op": "frame_dig -1",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "config#0 (copy)"
      ]
    },
    "1280": {
      "op": "intc_0 // 0",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "config#0 (copy)",
        "0"
      ]
    },
    "1281": {
      "op": "extract_uint64",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "new_state_value%0#0"
      ]
    },
    "1282": {
      "op": "bytec 16 // 0x78676f765f666565",
      "defined_out": [
        "0x78676f765f666565",
        "daemon_ops_funding_bps#0",
        "new_state_value%0#0",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "new_state_value%0#0",
        "0x78676f765f666565"
      ]
    },
    "1284": {
      "op": "swap",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "0x78676f765f666565",
        "new_state_value%0#0"
      ]
    },
    "1285": {
      "op": "app_global_put",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0"
      ]
    },
    "1286": {
      "op": "frame_dig -1",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "config#0 (copy)"
      ]
    },
    "1288": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "config#0 (copy)",
        "daemon_ops_funding_bps#0",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "config#0 (copy)",
        "8"
      ]
    },
    "1290": {
      "op": "extract_uint64",
      "defined_out": [
        "daemon_ops_funding_bps#0",
        "new_state_value%1#0",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "new_state_value%1#0"
      ]
    },
    "1291": {
      "op": "bytec 17 // 0x70726f706f7365725f666565",
      "defined_out": [
        "0x70726f706f7365725f666565",
        "daemon_ops_funding_bps#0",
        "new_state_value%1#0",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "new_state_value%1#0",
        "0x70726f706f7365725f666565"
      ]
    },
    "1293": {
      "op": "swap",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "0x70726f706f7365725f666565",
        "new_state_value%1#0"
      ]
    },
    "1294": {
      "op": "app_global_put",
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0"
      ]
    },
    "1295": {
      "op": "bytec 10 // 0x6f70656e5f70726f706f73616c5f666565",
      "defined_out": [
        "0x6f70656e5f70726f706f73616c5f666565",
        "daemon_ops_funding_bps#0",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "daemon_ops_funding_bps#0",
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "1297": {
      "op": "uncover 2",
      "stack_out": [
        "daemon_ops_funding_bps#0",
        "0x6f70656e5f70726f706f73616c5f666565",
        "open_proposal_fee#0"
      ]
    },
    "1299": {
      "op": "app_global_put",
      "stack_out": [
        "daemon_ops_funding_bps#0"
      ]
    },
    "1300": {
      "op": "bytec 23 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
      "defined_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "daemon_ops_funding_bps#0"
      ],
      "stack_out": [
        "daemon_ops_funding_bps#0",
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ]
    },
    "1302": {
      "op": "swap",
      "stack_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "daemon_ops_funding_bps#0"
      ]
    },
    "1303": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1304": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1306": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "32"
      ]
    },
    "1308": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0"
      ]
    },
    "1309": {
      "op": "bytec 24 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0",
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ]
    },
    "1311": {
      "op": "swap",
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "new_state_value%4#0"
      ]
    },
    "1312": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1313": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1315": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "40"
      ]
    },
    "1317": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0"
      ]
    },
    "1318": {
      "op": "bytec 25 // 0x6d696e5f7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0",
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ]
    },
    "1320": {
      "op": "swap",
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "new_state_value%5#0"
      ]
    },
    "1321": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1322": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1324": {
      "error": "Index access is out of bounds",
      "op": "extract 48 24 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1327": {
      "op": "dup",
      "defined_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1328": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "0"
      ]
    },
    "1329": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%6#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "new_state_value%6#0"
      ]
    },
    "1330": {
      "op": "bytec 26 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "new_state_value%6#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "new_state_value%6#0",
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ]
    },
    "1332": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "new_state_value%6#0"
      ]
    },
    "1333": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1334": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1335": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "8"
      ]
    },
    "1337": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%7#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "new_state_value%7#0"
      ]
    },
    "1338": {
      "op": "bytec 27 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "new_state_value%7#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "new_state_value%7#0",
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ]
    },
    "1340": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "new_state_value%7#0"
      ]
    },
    "1341": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1342": {
      "op": "intc_3 // 16",
      "stack_out": [
        "tmp%12#0",
        "16"
      ]
    },
    "1343": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%8#0"
      ],
      "stack_out": [
        "new_state_value%8#0"
      ]
    },
    "1344": {
      "op": "bytec 28 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "new_state_value%8#0"
      ],
      "stack_out": [
        "new_state_value%8#0",
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ]
    },
    "1346": {
      "op": "swap",
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "new_state_value%8#0"
      ]
    },
    "1347": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1348": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1350": {
      "error": "Index access is out of bounds",
      "op": "extract 72 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1353": {
      "op": "dup",
      "defined_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "1354": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "0"
      ]
    },
    "1355": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%9#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "new_state_value%9#0"
      ]
    },
    "1356": {
      "op": "bytec 29 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "new_state_value%9#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "new_state_value%9#0",
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ]
    },
    "1358": {
      "op": "swap",
      "stack_out": [
        "tmp%18#0",
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "new_state_value%9#0"
      ]
    },
    "1359": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1360": {
      "op": "dup",
      "stack_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "1361": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "8"
      ]
    },
    "1363": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%10#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "new_state_value%10#0"
      ]
    },
    "1364": {
      "op": "bytec 30 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "new_state_value%10#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "new_state_value%10#0",
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ]
    },
    "1366": {
      "op": "swap",
      "stack_out": [
        "tmp%18#0",
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "new_state_value%10#0"
      ]
    },
    "1367": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1368": {
      "op": "dup",
      "stack_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "1369": {
      "op": "intc_3 // 16",
      "stack_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "16"
      ]
    },
    "1370": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%11#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "new_state_value%11#0"
      ]
    },
    "1371": {
      "op": "bytec 31 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "new_state_value%11#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "new_state_value%11#0",
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ]
    },
    "1373": {
      "op": "swap",
      "stack_out": [
        "tmp%18#0",
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "new_state_value%11#0"
      ]
    },
    "1374": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1375": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "tmp%18#0",
        "24"
      ]
    },
    "1377": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%12#0"
      ],
      "stack_out": [
        "new_state_value%12#0"
      ]
    },
    "1378": {
      "op": "bytec 32 // 0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
        "new_state_value%12#0"
      ],
      "stack_out": [
        "new_state_value%12#0",
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765"
      ]
    },
    "1380": {
      "op": "swap",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
        "new_state_value%12#0"
      ]
    },
    "1381": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1382": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1384": {
      "error": "Index access is out of bounds",
      "op": "extract 104 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1387": {
      "op": "dup",
      "defined_out": [
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ]
    },
    "1388": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%26#0",
        "tmp%26#0 (copy)",
        "0"
      ]
    },
    "1389": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%13#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "new_state_value%13#0"
      ]
    },
    "1390": {
      "op": "bytec 33 // 0x766f74696e675f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "new_state_value%13#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "new_state_value%13#0",
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ]
    },
    "1392": {
      "op": "swap",
      "stack_out": [
        "tmp%26#0",
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "new_state_value%13#0"
      ]
    },
    "1393": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1394": {
      "op": "dup",
      "stack_out": [
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ]
    },
    "1395": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "tmp%26#0",
        "tmp%26#0 (copy)",
        "8"
      ]
    },
    "1397": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%14#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "new_state_value%14#0"
      ]
    },
    "1398": {
      "op": "bytec 34 // 0x766f74696e675f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "new_state_value%14#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "new_state_value%14#0",
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ]
    },
    "1400": {
      "op": "swap",
      "stack_out": [
        "tmp%26#0",
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "new_state_value%14#0"
      ]
    },
    "1401": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1402": {
      "op": "dup",
      "stack_out": [
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ]
    },
    "1403": {
      "op": "intc_3 // 16",
      "stack_out": [
        "tmp%26#0",
        "tmp%26#0 (copy)",
        "16"
      ]
    },
    "1404": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%15#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "new_state_value%15#0"
      ]
    },
    "1405": {
      "op": "bytec 35 // 0x766f74696e675f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "new_state_value%15#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "new_state_value%15#0",
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ]
    },
    "1407": {
      "op": "swap",
      "stack_out": [
        "tmp%26#0",
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "new_state_value%15#0"
      ]
    },
    "1408": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1409": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "tmp%26#0",
        "24"
      ]
    },
    "1411": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%16#0"
      ],
      "stack_out": [
        "new_state_value%16#0"
      ]
    },
    "1412": {
      "op": "bytec 36 // 0x766f74696e675f6475726174696f6e5f786c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f786c61726765",
        "new_state_value%16#0"
      ],
      "stack_out": [
        "new_state_value%16#0",
        "0x766f74696e675f6475726174696f6e5f786c61726765"
      ]
    },
    "1414": {
      "op": "swap",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f786c61726765",
        "new_state_value%16#0"
      ]
    },
    "1415": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1416": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1418": {
      "error": "Index access is out of bounds",
      "op": "extract 136 24 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1421": {
      "op": "dup",
      "defined_out": [
        "tmp%34#0",
        "tmp%34#0 (copy)"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%34#0 (copy)"
      ]
    },
    "1422": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%34#0",
        "tmp%34#0 (copy)",
        "0"
      ]
    },
    "1423": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%17#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "new_state_value%17#0"
      ]
    },
    "1424": {
      "op": "bytec 37 // 0x71756f72756d5f736d616c6c",
      "defined_out": [
        "0x71756f72756d5f736d616c6c",
        "new_state_value%17#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "new_state_value%17#0",
        "0x71756f72756d5f736d616c6c"
      ]
    },
    "1426": {
      "op": "swap",
      "stack_out": [
        "tmp%34#0",
        "0x71756f72756d5f736d616c6c",
        "new_state_value%17#0"
      ]
    },
    "1427": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1428": {
      "op": "dup",
      "stack_out": [
        "tmp%34#0",
        "tmp%34#0 (copy)"
      ]
    },
    "1429": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "tmp%34#0",
        "tmp%34#0 (copy)",
        "8"
      ]
    },
    "1431": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%18#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "new_state_value%18#0"
      ]
    },
    "1432": {
      "op": "bytec 38 // 0x71756f72756d5f6d656469756d",
      "defined_out": [
        "0x71756f72756d5f6d656469756d",
        "new_state_value%18#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "new_state_value%18#0",
        "0x71756f72756d5f6d656469756d"
      ]
    },
    "1434": {
      "op": "swap",
      "stack_out": [
        "tmp%34#0",
        "0x71756f72756d5f6d656469756d",
        "new_state_value%18#0"
      ]
    },
    "1435": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1436": {
      "op": "intc_3 // 16",
      "stack_out": [
        "tmp%34#0",
        "16"
      ]
    },
    "1437": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%19#0"
      ],
      "stack_out": [
        "new_state_value%19#0"
      ]
    },
    "1438": {
      "op": "bytec 39 // 0x71756f72756d5f6c61726765",
      "defined_out": [
        "0x71756f72756d5f6c61726765",
        "new_state_value%19#0"
      ],
      "stack_out": [
        "new_state_value%19#0",
        "0x71756f72756d5f6c61726765"
      ]
    },
    "1440": {
      "op": "swap",
      "stack_out": [
        "0x71756f72756d5f6c61726765",
        "new_state_value%19#0"
      ]
    },
    "1441": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1442": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1444": {
      "error": "Index access is out of bounds",
      "op": "extract 160 24 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1447": {
      "op": "dup",
      "defined_out": [
        "tmp%40#0",
        "tmp%40#0 (copy)"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%40#0 (copy)"
      ]
    },
    "1448": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%40#0",
        "tmp%40#0 (copy)",
        "0"
      ]
    },
    "1449": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%20#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "new_state_value%20#0"
      ]
    },
    "1450": {
      "op": "bytec 40 // 0x77656967687465645f71756f72756d5f736d616c6c",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "new_state_value%20#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "new_state_value%20#0",
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ]
    },
    "1452": {
      "op": "swap",
      "stack_out": [
        "tmp%40#0",
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "new_state_value%20#0"
      ]
    },
    "1453": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1454": {
      "op": "dup",
      "stack_out": [
        "tmp%40#0",
        "tmp%40#0 (copy)"
      ]
    },
    "1455": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "tmp%40#0",
        "tmp%40#0 (copy)",
        "8"
      ]
    },
    "1457": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%21#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "new_state_value%21#0"
      ]
    },
    "1458": {
      "op": "bytec 41 // 0x77656967687465645f71756f72756d5f6d656469756d",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "new_state_value%21#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "new_state_value%21#0",
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ]
    },
    "1460": {
      "op": "swap",
      "stack_out": [
        "tmp%40#0",
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "new_state_value%21#0"
      ]
    },
    "1461": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1462": {
      "op": "intc_3 // 16",
      "stack_out": [
        "tmp%40#0",
        "16"
      ]
    },
    "1463": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%22#0"
      ],
      "stack_out": [
        "new_state_value%22#0"
      ]
    },
    "1464": {
      "op": "bytec 42 // 0x77656967687465645f71756f72756d5f6c61726765",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "new_state_value%22#0"
      ],
      "stack_out": [
        "new_state_value%22#0",
        "0x77656967687465645f71756f72756d5f6c61726765"
      ]
    },
    "1466": {
      "op": "swap",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "new_state_value%22#0"
      ]
    },
    "1467": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1468": {
      "retsub": true,
      "op": "retsub"
    },
    "1469": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.update_xgov_registry",
      "params": {},
      "block": "update_xgov_registry",
      "stack_in": [],
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1472": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1473": {
      "retsub": true,
      "op": "retsub"
    },
    "1474": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_xgov",
      "params": {
        "voting_address#0": "bytes",
        "payment#0": "uint64"
      },
      "block": "subscribe_xgov",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1477": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1478": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1479": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1480": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1481": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1482": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1483": {
      "op": "bytec 6 // 0x78",
      "defined_out": [
        "0x78"
      ],
      "stack_out": [
        "0x78"
      ]
    },
    "1485": {
      "op": "txn Sender",
      "defined_out": [
        "0x78",
        "tmp%1#0"
      ],
      "stack_out": [
        "0x78",
        "tmp%1#0"
      ]
    },
    "1487": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1488": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1489": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "1491": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1492": {
      "error": "Already an xGov",
      "op": "assert // Already an xGov",
      "stack_out": []
    },
    "1493": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1495": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_xgov_payment",
      "op": "callsub valid_xgov_payment",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1498": {
      "error": "Invalid payment",
      "op": "assert // Invalid payment",
      "stack_out": []
    },
    "1499": {
      "op": "frame_dig -2",
      "defined_out": [
        "voting_address#0 (copy)"
      ],
      "stack_out": [
        "voting_address#0 (copy)"
      ]
    },
    "1501": {
      "op": "bytec 19 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "voting_address#0 (copy)"
      ],
      "stack_out": [
        "voting_address#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "1503": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1504": {
      "op": "bytec 19 // 0x0000000000000000",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "1506": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1507": {
      "op": "bytec 6 // 0x78",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x78"
      ]
    },
    "1509": {
      "op": "txn Sender",
      "defined_out": [
        "0x78",
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x78",
        "tmp%5#0"
      ]
    },
    "1511": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%6#0"
      ]
    },
    "1512": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1513": {
      "op": "box_put",
      "stack_out": []
    },
    "1514": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1515": {
      "op": "bytec 5 // 0x78676f7673",
      "defined_out": [
        "0",
        "0x78676f7673"
      ],
      "stack_out": [
        "0",
        "0x78676f7673"
      ]
    },
    "1517": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1518": {
      "error": "check self.xgovs exists",
      "op": "assert // check self.xgovs exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1519": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "1520": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1521": {
      "op": "bytec 5 // 0x78676f7673",
      "stack_out": [
        "new_state_value%0#0",
        "0x78676f7673"
      ]
    },
    "1523": {
      "op": "swap",
      "stack_out": [
        "0x78676f7673",
        "new_state_value%0#0"
      ]
    },
    "1524": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1525": {
      "retsub": true,
      "op": "retsub"
    },
    "1526": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.unsubscribe_xgov",
      "params": {
        "xgov_address#0": "bytes"
      },
      "block": "unsubscribe_xgov",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1529": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1530": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1531": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1532": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1533": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1534": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1535": {
      "op": "bytec 6 // 0x78",
      "defined_out": [
        "0x78"
      ],
      "stack_out": [
        "0x78"
      ]
    },
    "1537": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "0x78",
        "xgov_address#0 (copy)"
      ]
    },
    "1539": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1540": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1542": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1543": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1545": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1546": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1547": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "1548": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0"
      ]
    },
    "1551": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "xgov_address#0 (copy)"
      ]
    },
    "1553": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "voting_address#0",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "xgov_address#0 (copy)",
        "tmp%3#0"
      ]
    },
    "1555": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "tmp%4#0"
      ]
    },
    "1556": {
      "op": "bnz unsubscribe_xgov_bool_true@2",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0"
      ]
    },
    "1559": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "voting_address#0"
      ]
    },
    "1561": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%5#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "voting_address#0",
        "tmp%5#0"
      ]
    },
    "1563": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%6#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "tmp%6#0"
      ]
    },
    "1564": {
      "op": "bz unsubscribe_xgov_bool_false@3",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0"
      ]
    },
    "1567": {
      "block": "unsubscribe_xgov_bool_true@2",
      "stack_in": [
        "tmp%1#0",
        "voting_address#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "or_result%0#0"
      ]
    },
    "1568": {
      "block": "unsubscribe_xgov_bool_merge@4",
      "stack_in": [
        "tmp%1#0",
        "voting_address#0",
        "or_result%0#0"
      ],
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "defined_out": [],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0"
      ]
    },
    "1569": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "tmp%1#0"
      ]
    },
    "1571": {
      "op": "box_del",
      "defined_out": [
        "tmp%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "{box_del}"
      ]
    },
    "1572": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0"
      ]
    },
    "1573": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "0"
      ]
    },
    "1574": {
      "op": "bytec 5 // 0x78676f7673",
      "defined_out": [
        "0",
        "0x78676f7673",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "0",
        "0x78676f7673"
      ]
    },
    "1576": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1577": {
      "error": "check self.xgovs exists",
      "op": "assert // check self.xgovs exists",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "maybe_value%3#0"
      ]
    },
    "1578": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "1579": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "new_state_value%0#0"
      ]
    },
    "1580": {
      "op": "bytec 5 // 0x78676f7673",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "new_state_value%0#0",
        "0x78676f7673"
      ]
    },
    "1582": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "0x78676f7673",
        "new_state_value%0#0"
      ]
    },
    "1583": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0"
      ]
    },
    "1584": {
      "retsub": true,
      "op": "retsub"
    },
    "1585": {
      "block": "unsubscribe_xgov_bool_false@3",
      "stack_in": [
        "tmp%1#0",
        "voting_address#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "or_result%0#0"
      ]
    },
    "1586": {
      "op": "b unsubscribe_xgov_bool_merge@4"
    },
    "1589": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.request_subscribe_xgov",
      "params": {
        "xgov_address#0": "bytes",
        "owner_address#0": "bytes",
        "relation_type#0": "bytes",
        "payment#0": "uint64"
      },
      "block": "request_subscribe_xgov",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1592": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1593": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1594": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1595": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1596": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1597": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1598": {
      "op": "bytec 6 // 0x78",
      "defined_out": [
        "0x78"
      ],
      "stack_out": [
        "0x78"
      ]
    },
    "1600": {
      "op": "frame_dig -4",
      "defined_out": [
        "0x78",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "0x78",
        "xgov_address#0 (copy)"
      ]
    },
    "1602": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1603": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1604": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "1606": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1607": {
      "error": "Already an xGov",
      "op": "assert // Already an xGov",
      "stack_out": []
    },
    "1608": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1610": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_xgov_payment",
      "op": "callsub valid_xgov_payment",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1613": {
      "error": "Invalid payment",
      "op": "assert // Invalid payment",
      "stack_out": []
    },
    "1614": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1615": {
      "op": "bytec 18 // 0x726571756573745f6964",
      "defined_out": [
        "0",
        "0x726571756573745f6964"
      ],
      "stack_out": [
        "0",
        "0x726571756573745f6964"
      ]
    },
    "1617": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "rid#0"
      ],
      "stack_out": [
        "rid#0",
        "maybe_exists%2#0"
      ]
    },
    "1618": {
      "error": "check self.request_id exists",
      "op": "assert // check self.request_id exists",
      "stack_out": [
        "rid#0"
      ]
    },
    "1619": {
      "op": "frame_dig -4",
      "stack_out": [
        "rid#0",
        "xgov_address#0 (copy)"
      ]
    },
    "1621": {
      "op": "frame_dig -3",
      "defined_out": [
        "owner_address#0 (copy)",
        "rid#0",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "rid#0",
        "xgov_address#0 (copy)",
        "owner_address#0 (copy)"
      ]
    },
    "1623": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "rid#0"
      ],
      "stack_out": [
        "rid#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1624": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "relation_type#0 (copy)",
        "rid#0"
      ],
      "stack_out": [
        "rid#0",
        "encoded_tuple_buffer%2#0",
        "relation_type#0 (copy)"
      ]
    },
    "1626": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "rid#0"
      ],
      "stack_out": [
        "rid#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1627": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "rid#0"
      ]
    },
    "1628": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%4#0"
      ]
    },
    "1629": {
      "op": "bytec 46 // 0x72",
      "defined_out": [
        "0x72",
        "encoded_tuple_buffer%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%4#0",
        "0x72"
      ]
    },
    "1631": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x72",
        "tmp%4#0"
      ]
    },
    "1632": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ]
    },
    "1633": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1634": {
      "op": "box_put",
      "stack_out": []
    },
    "1635": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1636": {
      "op": "bytec 18 // 0x726571756573745f6964",
      "stack_out": [
        "0",
        "0x726571756573745f6964"
      ]
    },
    "1638": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1639": {
      "error": "check self.request_id exists",
      "op": "assert // check self.request_id exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1640": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "1641": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1642": {
      "op": "bytec 18 // 0x726571756573745f6964",
      "stack_out": [
        "new_state_value%0#0",
        "0x726571756573745f6964"
      ]
    },
    "1644": {
      "op": "swap",
      "stack_out": [
        "0x726571756573745f6964",
        "new_state_value%0#0"
      ]
    },
    "1645": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1646": {
      "retsub": true,
      "op": "retsub"
    },
    "1647": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.approve_subscribe_xgov",
      "params": {
        "request_id#0": "bytes"
      },
      "block": "approve_subscribe_xgov",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1650": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_subscriber",
      "op": "callsub is_xgov_subscriber",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1653": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1654": {
      "op": "frame_dig -1",
      "defined_out": [
        "request_id#0 (copy)"
      ],
      "stack_out": [
        "request_id#0 (copy)"
      ]
    },
    "1656": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1657": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1658": {
      "op": "bytec 46 // 0x72",
      "defined_out": [
        "0x72",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x72"
      ]
    },
    "1660": {
      "op": "swap",
      "stack_out": [
        "0x72",
        "tmp%2#0"
      ]
    },
    "1661": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1662": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1663": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "request#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "maybe_exists%0#0"
      ]
    },
    "1664": {
      "error": "check self.request_box entry exists",
      "op": "assert // check self.request_box entry exists",
      "stack_out": [
        "tmp%3#0",
        "request#0"
      ]
    },
    "1665": {
      "op": "dup",
      "defined_out": [
        "request#0",
        "request#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "request#0 (copy)"
      ]
    },
    "1666": {
      "error": "Index access is out of bounds",
      "op": "extract 32 32 // on error: Index access is out of bounds",
      "defined_out": [
        "request#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "tmp%4#0"
      ]
    },
    "1669": {
      "op": "bytec 19 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "request#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "tmp%4#0",
        "0x0000000000000000"
      ]
    },
    "1671": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "request#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1672": {
      "op": "bytec 19 // 0x0000000000000000",
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "1674": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "request#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1675": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%3#0",
        "request#0"
      ]
    },
    "1676": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%3#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1679": {
      "op": "bytec 6 // 0x78",
      "defined_out": [
        "0x78",
        "encoded_tuple_buffer%3#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%3#0",
        "reinterpret_bytes[32]%0#0",
        "0x78"
      ]
    },
    "1681": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%3#0",
        "0x78",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1682": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ]
    },
    "1683": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1684": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1685": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "1686": {
      "op": "bytec 5 // 0x78676f7673",
      "defined_out": [
        "0",
        "0x78676f7673",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "0x78676f7673"
      ]
    },
    "1688": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1689": {
      "error": "check self.xgovs exists",
      "op": "assert // check self.xgovs exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "1690": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "1691": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_state_value%0#0"
      ]
    },
    "1692": {
      "op": "bytec 5 // 0x78676f7673",
      "stack_out": [
        "tmp%3#0",
        "new_state_value%0#0",
        "0x78676f7673"
      ]
    },
    "1694": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "0x78676f7673",
        "new_state_value%0#0"
      ]
    },
    "1695": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1696": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1697": {
      "op": "pop",
      "stack_out": []
    },
    "1698": {
      "retsub": true,
      "op": "retsub"
    },
    "1699": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.reject_subscribe_xgov",
      "params": {
        "request_id#0": "bytes"
      },
      "block": "reject_subscribe_xgov",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1702": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_subscriber",
      "op": "callsub is_xgov_subscriber",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1705": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1706": {
      "op": "frame_dig -1",
      "defined_out": [
        "request_id#0 (copy)"
      ],
      "stack_out": [
        "request_id#0 (copy)"
      ]
    },
    "1708": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1709": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1710": {
      "op": "bytec 46 // 0x72",
      "defined_out": [
        "0x72",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x72"
      ]
    },
    "1712": {
      "op": "swap",
      "stack_out": [
        "0x72",
        "tmp%2#0"
      ]
    },
    "1713": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1714": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1715": {
      "op": "pop",
      "stack_out": []
    },
    "1716": {
      "retsub": true,
      "op": "retsub"
    },
    "1717": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_voting_account",
      "params": {
        "xgov_address#0": "bytes",
        "voting_address#0": "bytes"
      },
      "block": "set_voting_account",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1720": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1721": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1722": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1723": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1724": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1725": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1726": {
      "op": "bytec 6 // 0x78",
      "defined_out": [
        "0x78"
      ],
      "stack_out": [
        "0x78"
      ]
    },
    "1728": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x78",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "0x78",
        "xgov_address#0 (copy)"
      ]
    },
    "1730": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1731": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1733": {
      "op": "box_len",
      "defined_out": [
        "exists#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "exists#0"
      ]
    },
    "1734": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "exists#0"
      ]
    },
    "1736": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1737": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "tmp%1#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "xgov_box#0",
        "maybe_exists%2#0"
      ]
    },
    "1738": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%1#0",
        "xgov_box#0"
      ]
    },
    "1739": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "xgov_box#0",
        "tmp%3#0"
      ]
    },
    "1741": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "xgov_box#0"
      ]
    },
    "1742": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1745": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "1746": {
      "op": "bnz set_voting_account_bool_true@2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1749": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "xgov_address#0 (copy)"
      ]
    },
    "1751": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%5#0",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "xgov_address#0 (copy)",
        "tmp%5#0"
      ]
    },
    "1753": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1754": {
      "op": "bz set_voting_account_bool_false@3",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1757": {
      "block": "set_voting_account_bool_true@2",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "or_result%0#0"
      ]
    },
    "1758": {
      "block": "set_voting_account_bool_merge@4",
      "stack_in": [
        "tmp%1#0",
        "or_result%0#0"
      ],
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "defined_out": [],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1759": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1761": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1762": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1763": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%3#0"
      ]
    },
    "1764": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%1#0",
        "voting_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%3#0",
        "voting_address#0 (copy)"
      ]
    },
    "1766": {
      "op": "replace2 0",
      "defined_out": [
        "tmp%1#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "updated_data%0#0"
      ]
    },
    "1768": {
      "op": "box_put",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1769": {
      "retsub": true,
      "op": "retsub"
    },
    "1770": {
      "block": "set_voting_account_bool_false@3",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "or_result%0#0"
      ]
    },
    "1771": {
      "op": "b set_voting_account_bool_merge@4"
    },
    "1774": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_proposer",
      "params": {
        "payment#0": "uint64"
      },
      "block": "subscribe_proposer",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1777": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1778": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1779": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1780": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1781": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1782": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1783": {
      "op": "bytec_2 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "1784": {
      "op": "txn Sender",
      "defined_out": [
        "0x70",
        "tmp%1#0"
      ],
      "stack_out": [
        "0x70",
        "tmp%1#0"
      ]
    },
    "1786": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1787": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1788": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "1790": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1791": {
      "error": "Already a proposer",
      "op": "assert // Already a proposer",
      "stack_out": []
    },
    "1792": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1794": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1796": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1798": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1799": {
      "error": "Wrong Receiver",
      "op": "assert // Wrong Receiver",
      "stack_out": []
    },
    "1800": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1802": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1804": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "1805": {
      "op": "bytec 17 // 0x70726f706f7365725f666565",
      "defined_out": [
        "0",
        "0x70726f706f7365725f666565",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "0x70726f706f7365725f666565"
      ]
    },
    "1807": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1808": {
      "error": "check self.proposer_fee exists",
      "op": "assert // check self.proposer_fee exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%2#0"
      ]
    },
    "1809": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1810": {
      "error": "Wrong payment amount",
      "op": "assert // Wrong payment amount",
      "stack_out": []
    },
    "1811": {
      "op": "bytec_2 // 0x70",
      "stack_out": [
        "0x70"
      ]
    },
    "1812": {
      "op": "txn Sender",
      "defined_out": [
        "0x70",
        "tmp%9#0"
      ],
      "stack_out": [
        "0x70",
        "tmp%9#0"
      ]
    },
    "1814": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1815": {
      "op": "pushbytes 0x000000000000000000",
      "defined_out": [
        "0x000000000000000000",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x000000000000000000"
      ]
    },
    "1826": {
      "op": "box_put",
      "stack_out": []
    },
    "1827": {
      "retsub": true,
      "op": "retsub"
    },
    "1828": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_proposer_kyc",
      "params": {
        "proposer#0": "bytes",
        "kyc_status#0": "bytes",
        "kyc_expiring#0": "bytes"
      },
      "block": "set_proposer_kyc",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1831": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1833": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1834": {
      "op": "bytec 13 // 0x6b79635f70726f7669646572",
      "defined_out": [
        "0",
        "0x6b79635f70726f7669646572",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x6b79635f70726f7669646572"
      ]
    },
    "1836": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1837": {
      "error": "check self.kyc_provider exists",
      "op": "assert // check self.kyc_provider exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1838": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1839": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1840": {
      "op": "bytec_2 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "1841": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x70",
        "proposer#0 (copy)"
      ],
      "stack_out": [
        "0x70",
        "proposer#0 (copy)"
      ]
    },
    "1843": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1844": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1845": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1846": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%1#0"
      ]
    },
    "1848": {
      "error": "Proposer does not exist",
      "op": "assert // Proposer does not exist",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1849": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1850": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1851": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0"
      ]
    },
    "1852": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "1853": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "is_true%0#0"
      ]
    },
    "1854": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1856": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1857": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1859": {
      "op": "setbit",
      "defined_out": [
        "active_proposal#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "active_proposal#0"
      ]
    },
    "1860": {
      "op": "frame_dig -2",
      "defined_out": [
        "active_proposal#0",
        "kyc_status#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "active_proposal#0",
        "kyc_status#0 (copy)"
      ]
    },
    "1862": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "active_proposal#0",
        "kyc_status#0 (copy)",
        "0"
      ]
    },
    "1863": {
      "op": "getbit",
      "defined_out": [
        "active_proposal#0",
        "is_true%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "active_proposal#0",
        "is_true%1#0"
      ]
    },
    "1864": {
      "op": "intc_1 // 1"
    },
    "1865": {
      "op": "swap",
      "defined_out": [
        "1",
        "active_proposal#0",
        "is_true%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "active_proposal#0",
        "1",
        "is_true%1#0"
      ]
    },
    "1866": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1867": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "kyc_expiring#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%2#0",
        "kyc_expiring#0 (copy)"
      ]
    },
    "1869": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1870": {
      "op": "box_put",
      "stack_out": []
    },
    "1871": {
      "retsub": true,
      "op": "retsub"
    },
    "1872": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.declare_committee",
      "params": {
        "committee_id#0": "bytes",
        "size#0": "bytes",
        "votes#0": "bytes"
      },
      "block": "declare_committee",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1875": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1877": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "1878": {
      "op": "bytec 14 // 0x636f6d6d69747465655f6d616e61676572",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6d616e61676572",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0",
        "0x636f6d6d69747465655f6d616e61676572"
      ]
    },
    "1880": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1881": {
      "error": "check self.committee_manager exists",
      "op": "assert // check self.committee_manager exists",
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#1"
      ]
    },
    "1882": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "1883": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1884": {
      "op": "frame_dig -2",
      "defined_out": [
        "size#0 (copy)"
      ],
      "stack_out": [
        "size#0 (copy)"
      ]
    },
    "1886": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1887": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1888": {
      "op": "bytec 45 // 0x6d61785f636f6d6d69747465655f73697a65",
      "defined_out": [
        "0",
        "0x6d61785f636f6d6d69747465655f73697a65",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "0x6d61785f636f6d6d69747465655f73697a65"
      ]
    },
    "1890": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1891": {
      "error": "check self.max_committee_size exists",
      "op": "assert // check self.max_committee_size exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "1892": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1894": {
      "op": ">=",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1895": {
      "error": "Committee size is too large",
      "op": "assert // Committee size is too large",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1896": {
      "op": "bytec 48 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x636f6d6d69747465655f6964"
      ]
    },
    "1898": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x636f6d6d69747465655f6964",
        "committee_id#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x636f6d6d69747465655f6964",
        "committee_id#0 (copy)"
      ]
    },
    "1900": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1901": {
      "op": "bytec 43 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "1903": {
      "op": "swap",
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "tmp%2#0"
      ]
    },
    "1904": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1905": {
      "op": "frame_dig -1",
      "defined_out": [
        "votes#0 (copy)"
      ],
      "stack_out": [
        "votes#0 (copy)"
      ]
    },
    "1907": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "1908": {
      "op": "bytec 44 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "1910": {
      "op": "swap",
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "new_state_value%1#0"
      ]
    },
    "1911": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1912": {
      "retsub": true,
      "op": "retsub"
    },
    "1913": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.open_proposal",
      "params": {
        "payment#0": "uint64"
      },
      "block": "open_proposal",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1916": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1917": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1918": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1919": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1920": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1921": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1922": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1923": {
      "op": "bytec 9 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "1925": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1926": {
      "error": "check self.paused_proposals exists",
      "op": "assert // check self.paused_proposals exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1927": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1928": {
      "error": "Creation of proposals is paused",
      "op": "assert // Creation of proposals is paused",
      "stack_out": []
    },
    "1929": {
      "op": "bytec_2 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "1930": {
      "op": "txn Sender",
      "defined_out": [
        "0x70",
        "tmp%2#0"
      ],
      "stack_out": [
        "0x70",
        "tmp%2#0"
      ]
    },
    "1932": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1933": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1934": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "1936": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1937": {
      "op": "bytec_2 // 0x70",
      "stack_out": [
        "0x70"
      ]
    },
    "1938": {
      "op": "txn Sender",
      "defined_out": [
        "0x70",
        "tmp%4#0"
      ],
      "stack_out": [
        "0x70",
        "tmp%4#0"
      ]
    },
    "1940": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1941": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1942": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1943": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "1944": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0"
      ],
      "stack_out": [
        "is_true%0#0"
      ]
    },
    "1945": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0"
      ],
      "stack_out": [
        "is_true%0#0",
        "0x00"
      ]
    },
    "1947": {
      "op": "intc_0 // 0",
      "stack_out": [
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1948": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1950": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "1951": {
      "op": "bytec 8 // 0x00",
      "stack_out": [
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "1953": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1954": {
      "error": "Proposer already has an active proposal",
      "op": "assert // Proposer already has an active proposal",
      "stack_out": []
    },
    "1955": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1957": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_kyc",
      "op": "callsub valid_kyc",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1960": {
      "error": "Invalid KYC",
      "op": "assert // Invalid KYC",
      "stack_out": []
    },
    "1961": {
      "op": "txn Fee",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1963": {
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1965": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "3"
      ]
    },
    "1967": {
      "op": "*",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "1968": {
      "op": ">=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1969": {
      "error": "Insufficient fee",
      "op": "assert // Insufficient fee",
      "stack_out": []
    },
    "1970": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1972": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1974": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1976": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1977": {
      "error": "Wrong Receiver",
      "op": "assert // Wrong Receiver",
      "stack_out": []
    },
    "1978": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1980": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1982": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%16#0",
        "0"
      ]
    },
    "1983": {
      "op": "bytec 10 // 0x6f70656e5f70726f706f73616c5f666565",
      "defined_out": [
        "0",
        "0x6f70656e5f70726f706f73616c5f666565",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0",
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "1985": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1986": {
      "error": "check self.open_proposal_fee exists",
      "op": "assert // check self.open_proposal_fee exists",
      "stack_out": [
        "tmp%16#0",
        "maybe_value%4#0"
      ]
    },
    "1987": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1988": {
      "error": "Wrong payment amount",
      "op": "assert // Wrong payment amount",
      "stack_out": []
    },
    "1989": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1991": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "check%0#0"
      ]
    },
    "1993": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "1994": {
      "op": "itxn_begin"
    },
    "1995": {
      "op": "txn Sender",
      "defined_out": [
        "mbr_before#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0"
      ]
    },
    "1997": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "mbr_before#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0",
        "18"
      ]
    },
    "1999": {
      "op": "itxn_field GlobalNumUint",
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0"
      ]
    },
    "2001": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0",
        "3"
      ]
    },
    "2003": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0"
      ]
    },
    "2005": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "mbr_before#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0",
        "1"
      ]
    },
    "2006": {
      "op": "itxn_field ExtraProgramPages",
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0"
      ]
    },
    "2008": {
      "op": "pushbytes base64(CoEBQw==)",
      "defined_out": [
        "CoEBQw==",
        "mbr_before#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0",
        "CoEBQw=="
      ]
    },
    "2014": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0"
      ]
    },
    "2016": {
      "op": "pushbytes base64(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)",
      "defined_out": [
        "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",
        "mbr_before#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0",
        "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"
      ]
    },
    "5522": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0"
      ]
    },
    "5524": {
      "op": "pushbytes 0xcc694eaa // method \"create(address)void\"",
      "defined_out": [
        "Method(create(address)void)",
        "mbr_before#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0",
        "Method(create(address)void)"
      ]
    },
    "5530": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "mbr_before#0",
        "tmp%19#0"
      ]
    },
    "5532": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5534": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "appl"
      ]
    },
    "5536": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5538": {
      "op": "intc_0 // 0",
      "stack_out": [
        "mbr_before#0",
        "0"
      ]
    },
    "5539": {
      "op": "itxn_field Fee",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5541": {
      "op": "itxn_submit"
    },
    "5542": {
      "op": "itxn CreatedApplicationID",
      "defined_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0"
      ]
    },
    "5544": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%20#0"
      ]
    },
    "5546": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%1#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "check%1#0"
      ]
    },
    "5548": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0"
      ]
    },
    "5549": {
      "op": "bytec_2 // 0x70",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "0x70"
      ]
    },
    "5550": {
      "op": "txn Sender",
      "defined_out": [
        "0x70",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "0x70",
        "tmp%21#0"
      ]
    },
    "5552": {
      "op": "concat",
      "defined_out": [
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "tmp%22#0"
      ]
    },
    "5553": {
      "op": "dup",
      "defined_out": [
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ]
    },
    "5554": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "tmp%22#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5555": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "tmp%22#0",
        "maybe_value%5#0"
      ]
    },
    "5556": {
      "op": "intc_0 // 0",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "tmp%22#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "5557": {
      "op": "intc_1 // 1",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "tmp%22#0",
        "maybe_value%5#0",
        "0",
        "1"
      ]
    },
    "5558": {
      "op": "setbit",
      "defined_out": [
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%22#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "tmp%22#0",
        "updated_data%0#0"
      ]
    },
    "5559": {
      "op": "box_put",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0"
      ]
    },
    "5560": {
      "op": "itxn_begin"
    },
    "5561": {
      "op": "dig 1",
      "defined_out": [
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "res.CreatedApplicationID#0 (copy)"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "res.CreatedApplicationID#0 (copy)"
      ]
    },
    "5563": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%2#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "5565": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0"
      ]
    },
    "5566": {
      "op": "intc_0 // 0",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "0"
      ]
    },
    "5567": {
      "op": "bytec 10 // 0x6f70656e5f70726f706f73616c5f666565",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "0",
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "5569": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "5570": {
      "error": "check self.open_proposal_fee exists",
      "op": "assert // check self.open_proposal_fee exists",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "maybe_value%6#0"
      ]
    },
    "5571": {
      "op": "uncover 2",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0",
        "maybe_value%6#0",
        "mbr_after#0"
      ]
    },
    "5573": {
      "op": "uncover 4",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0",
        "maybe_value%6#0",
        "mbr_after#0",
        "mbr_before#0"
      ]
    },
    "5575": {
      "op": "-",
      "defined_out": [
        "maybe_value%6#0",
        "res.CreatedApplicationID#0",
        "tmp%23#0",
        "value%2#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0",
        "maybe_value%6#0",
        "tmp%23#0"
      ]
    },
    "5576": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%1%%param_Amount_idx_0#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0",
        "inner_txn_params%1%%param_Amount_idx_0#0"
      ]
    },
    "5577": {
      "op": "itxn_field Amount",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0"
      ]
    },
    "5579": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5581": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "pay"
      ]
    },
    "5582": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5584": {
      "op": "intc_0 // 0",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0"
      ]
    },
    "5585": {
      "op": "itxn_field Fee",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5587": {
      "op": "itxn_submit"
    },
    "5588": {
      "op": "intc_0 // 0",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0"
      ]
    },
    "5589": {
      "op": "bytec_3 // 0x70656e64696e675f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x70656e64696e675f70726f706f73616c73",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "5590": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "5591": {
      "error": "check self.pending_proposals exists",
      "op": "assert // check self.pending_proposals exists",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "maybe_value%7#0"
      ]
    },
    "5592": {
      "op": "intc_1 // 1",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "maybe_value%7#0",
        "1"
      ]
    },
    "5593": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "new_state_value%0#0"
      ]
    },
    "5594": {
      "op": "bytec_3 // 0x70656e64696e675f70726f706f73616c73",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "new_state_value%0#0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "5595": {
      "op": "swap",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0x70656e64696e675f70726f706f73616c73",
        "new_state_value%0#0"
      ]
    },
    "5596": {
      "op": "app_global_put",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5597": {
      "retsub": true,
      "op": "retsub"
    },
    "5598": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.vote_proposal",
      "params": {
        "proposal_id#0": "bytes",
        "xgov_address#0": "bytes",
        "approval_votes#0": "bytes",
        "rejection_votes#0": "bytes"
      },
      "block": "vote_proposal",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "5601": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5602": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "5603": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5604": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "5605": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5606": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "5607": {
      "op": "frame_dig -4",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "5609": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal",
      "op": "callsub _is_proposal",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "5612": {
      "error": "Invalid proposal",
      "op": "assert // Invalid proposal",
      "stack_out": []
    },
    "5613": {
      "op": "frame_dig -4",
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "5615": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "5616": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "5617": {
      "op": "bytec 49 // 0x737461747573",
      "defined_out": [
        "0x737461747573",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0x737461747573"
      ]
    },
    "5619": {
      "op": "app_global_get_ex",
      "defined_out": [
        "status#0",
        "status_exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "status#0",
        "status_exists#0"
      ]
    },
    "5620": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0",
        "status#0"
      ]
    },
    "5621": {
      "op": "pushint 25 // 25",
      "defined_out": [
        "25",
        "status#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "status#0",
        "25"
      ]
    },
    "5623": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "5624": {
      "error": "Proposal is not in voting phase",
      "op": "assert // Proposal is not in voting phase",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "5625": {
      "op": "bytec 6 // 0x78",
      "defined_out": [
        "0x78",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x78"
      ]
    },
    "5627": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x78",
        "tmp%2#0",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x78",
        "xgov_address#0 (copy)"
      ]
    },
    "5629": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "5630": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5631": {
      "op": "box_len",
      "defined_out": [
        "exists#0",
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "maybe_value%1#0",
        "exists#0"
      ]
    },
    "5632": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "exists#0"
      ]
    },
    "5634": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "5635": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5636": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "maybe_exists%2#0"
      ]
    },
    "5637": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0"
      ]
    },
    "5638": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "xgov_box#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "xgov_box#0 (copy)"
      ]
    },
    "5639": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "xgov_box#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "xgov_box#0 (copy)",
        "32"
      ]
    },
    "5641": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "tmp%7#0"
      ]
    },
    "5642": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "tmp%7#0",
        "1"
      ]
    },
    "5643": {
      "op": "+",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "to_encode%0#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "to_encode%0#0"
      ]
    },
    "5644": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%0#0"
      ]
    },
    "5645": {
      "op": "dig 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%0#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5647": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%2#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5648": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%0#0",
        "maybe_value%3#0"
      ]
    },
    "5649": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "5650": {
      "op": "replace2 32",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "updated_data%0#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "updated_data%0#0"
      ]
    },
    "5652": {
      "op": "dig 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "updated_data%0#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5654": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "tmp%4#0 (copy)",
        "updated_data%0#0"
      ]
    },
    "5655": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0"
      ]
    },
    "5656": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "to_encode%1#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "to_encode%1#0"
      ]
    },
    "5658": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "val_as_bytes%1#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%1#0"
      ]
    },
    "5659": {
      "op": "dig 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%1#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5661": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%2#0",
        "tmp%4#0",
        "val_as_bytes%1#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%1#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "5662": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%1#0",
        "maybe_value%4#0"
      ]
    },
    "5663": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0"
      ]
    },
    "5664": {
      "op": "replace2 40",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "updated_data%1#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "updated_data%1#0"
      ]
    },
    "5666": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "xgov_box#0",
        "updated_data%1#0",
        "tmp%4#0"
      ]
    },
    "5668": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "xgov_box#0",
        "tmp%4#0",
        "updated_data%1#0"
      ]
    },
    "5669": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "xgov_box#0"
      ]
    },
    "5670": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0",
        "tmp%2#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "xgov_box#0",
        "tmp%10#0"
      ]
    },
    "5672": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%10#0",
        "xgov_box#0"
      ]
    },
    "5673": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%10#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%10#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "5676": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0"
      ]
    },
    "5677": {
      "error": "Must be voting address",
      "op": "assert // Must be voting address",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "5678": {
      "op": "itxn_begin"
    },
    "5679": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "5681": {
      "op": "pushbytes 0x1841a0d2 // method \"vote(address,uint64,uint64)string\"",
      "defined_out": [
        "Method(vote(address,uint64,uint64)string)"
      ],
      "stack_out": [
        "Method(vote(address,uint64,uint64)string)"
      ]
    },
    "5687": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5689": {
      "op": "frame_dig -3",
      "stack_out": [
        "xgov_address#0 (copy)"
      ]
    },
    "5691": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5693": {
      "op": "frame_dig -2",
      "defined_out": [
        "approval_votes#0 (copy)"
      ],
      "stack_out": [
        "approval_votes#0 (copy)"
      ]
    },
    "5695": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5697": {
      "op": "frame_dig -1",
      "defined_out": [
        "rejection_votes#0 (copy)"
      ],
      "stack_out": [
        "rejection_votes#0 (copy)"
      ]
    },
    "5699": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5701": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5703": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5705": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5706": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5708": {
      "op": "itxn_submit"
    },
    "5709": {
      "op": "itxn LastLog"
    },
    "5711": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5713": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%13#0"
      ]
    },
    "5716": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%13#0",
        "0x151f7c75"
      ]
    },
    "5718": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%14#0"
      ]
    },
    "5719": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5720": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5723": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "5724": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ]
    },
    "5725": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0"
      ]
    },
    "5726": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "4"
      ]
    },
    "5727": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "5728": {
      "op": "bz vote_proposal_ternary_false@3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ]
    },
    "5731": {
      "op": "intc_0 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "ternary_result%0#0"
      ]
    },
    "5732": {
      "block": "vote_proposal_ternary_merge@4",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "ternary_result%0#0"
      ],
      "op": "bz vote_proposal_after_if_else@13",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ]
    },
    "5735": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "4"
      ]
    },
    "5736": {
      "op": "frame_dig 2",
      "defined_out": [
        "4",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "4",
        "tmp%16#0"
      ]
    },
    "5738": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "4",
        "tmp%16#0 (copy)",
        "tmp%16#0 (copy)"
      ]
    },
    "5739": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "4",
        "tmp%16#0 (copy)"
      ]
    },
    "5741": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "5742": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "5743": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%16#0 (copy)"
      ]
    },
    "5745": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "4",
        "tmp%16#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "5747": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "bounded_index%0#0"
      ]
    },
    "5748": {
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5750": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "5751": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%16#0"
      ]
    },
    "5753": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "error_without_prefix#0"
      ]
    },
    "5754": {
      "op": "bytec 20 // \"Wrong Proposal Status\"",
      "defined_out": [
        "\"Wrong Proposal Status\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status\""
      ]
    },
    "5756": {
      "op": "bytec 50 // \"Missing Config\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"Wrong Proposal Status\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status\"",
        "\"Missing Config\""
      ]
    },
    "5758": {
      "op": "pushbytess \"Voter not found\" \"Voter already voted\" \"Votes exceeded\" \"Voting Period Expired\" // \"Voter not found\", \"Voter already voted\", \"Votes exceeded\", \"Voting Period Expired\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"Voter already voted\"",
        "\"Voter not found\"",
        "\"Votes exceeded\"",
        "\"Voting Period Expired\"",
        "\"Wrong Proposal Status\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status\"",
        "\"Missing Config\"",
        "\"Voter not found\"",
        "\"Voter already voted\"",
        "\"Votes exceeded\"",
        "\"Voting Period Expired\""
      ]
    },
    "5833": {
      "op": "uncover 6",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "\"Wrong Proposal Status\"",
        "\"Missing Config\"",
        "\"Voter not found\"",
        "\"Voter already voted\"",
        "\"Votes exceeded\"",
        "\"Voting Period Expired\"",
        "error_without_prefix#0"
      ]
    },
    "5835": {
      "op": "match vote_proposal_switch_case_0@6 vote_proposal_switch_case_1@7 vote_proposal_switch_case_2@8 vote_proposal_switch_case_3@9 vote_proposal_switch_case_4@10 vote_proposal_switch_case_5@11",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ]
    },
    "5849": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "5850": {
      "block": "vote_proposal_switch_case_5@11",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "error": "Voting Period Expired",
      "op": "err // Voting Period Expired"
    },
    "5851": {
      "block": "vote_proposal_switch_case_4@10",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "error": "Votes exceeded",
      "op": "err // Votes exceeded"
    },
    "5852": {
      "block": "vote_proposal_switch_case_3@9",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "error": "Voter already voted",
      "op": "err // Voter already voted"
    },
    "5853": {
      "block": "vote_proposal_switch_case_2@8",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "error": "Voter not found",
      "op": "err // Voter not found"
    },
    "5854": {
      "block": "vote_proposal_switch_case_1@7",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "error": "Missing Config",
      "op": "err // Missing Config"
    },
    "5855": {
      "block": "vote_proposal_switch_case_0@6",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "error": "Wrong Proposal Status",
      "op": "err // Wrong Proposal Status"
    },
    "5856": {
      "block": "vote_proposal_after_if_else@13",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "5857": {
      "block": "vote_proposal_ternary_false@3",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "awst_tmp%0#0"
      ]
    },
    "5859": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "5862": {
      "op": "bytec 21 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%18#0",
        "\"ERR:\""
      ]
    },
    "5864": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "ternary_result%0#0"
      ]
    },
    "5865": {
      "op": "b vote_proposal_ternary_merge@4"
    },
    "5868": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.pay_grant_proposal",
      "params": {
        "proposal_id#0": "bytes"
      },
      "block": "pay_grant_proposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5871": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5873": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "5874": {
      "op": "bytec 12 // 0x78676f765f7061796f72",
      "defined_out": [
        "0",
        "0x78676f765f7061796f72",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x78676f765f7061796f72"
      ]
    },
    "5876": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5877": {
      "error": "check self.xgov_payor exists",
      "op": "assert // check self.xgov_payor exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "5878": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "5879": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "5880": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "5882": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal",
      "op": "callsub _is_proposal",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "5885": {
      "error": "Invalid proposal",
      "op": "assert // Invalid proposal",
      "stack_out": []
    },
    "5886": {
      "op": "frame_dig -1",
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "5888": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "5889": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5890": {
      "op": "bytec 49 // 0x737461747573",
      "defined_out": [
        "0x737461747573",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "0x737461747573"
      ]
    },
    "5892": {
      "op": "app_global_get_ex",
      "defined_out": [
        "status#0",
        "status_exists#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "status#0",
        "status_exists#0"
      ]
    },
    "5893": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0",
        "status#0"
      ]
    },
    "5894": {
      "op": "swap",
      "stack_out": [
        "status#0",
        "tmp%3#0"
      ]
    },
    "5895": {
      "op": "dup",
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5896": {
      "op": "bytec 47 // 0x70726f706f736572",
      "defined_out": [
        "0x70726f706f736572",
        "status#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "0x70726f706f736572"
      ]
    },
    "5898": {
      "op": "app_global_get_ex",
      "defined_out": [
        "proposer_bytes#0",
        "proposer_exists#0",
        "status#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "proposer_exists#0"
      ]
    },
    "5899": {
      "op": "pop",
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5900": {
      "op": "dup",
      "defined_out": [
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)",
        "status#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)"
      ]
    },
    "5901": {
      "op": "len",
      "defined_out": [
        "proposer_bytes#0",
        "status#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%5#0"
      ]
    },
    "5902": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "proposer_bytes#0",
        "status#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%5#0",
        "32"
      ]
    },
    "5904": {
      "op": "==",
      "defined_out": [
        "proposer_bytes#0",
        "status#0",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%6#0"
      ]
    },
    "5905": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5906": {
      "op": "dig 1",
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5908": {
      "op": "pushbytes 0x7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x7265717565737465645f616d6f756e74",
        "proposer_bytes#0",
        "status#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%3#0 (copy)",
        "0x7265717565737465645f616d6f756e74"
      ]
    },
    "5926": {
      "op": "app_global_get_ex",
      "defined_out": [
        "proposer_bytes#0",
        "requested_amount#0",
        "requested_amount_exists#0",
        "status#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "requested_amount#0",
        "requested_amount_exists#0"
      ]
    },
    "5927": {
      "op": "pop",
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "requested_amount#0"
      ]
    },
    "5928": {
      "op": "cover 2",
      "stack_out": [
        "status#0",
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5930": {
      "op": "uncover 3",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "status#0"
      ]
    },
    "5932": {
      "op": "pushint 45 // 45",
      "defined_out": [
        "45",
        "proposer_bytes#0",
        "requested_amount#0",
        "status#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "status#0",
        "45"
      ]
    },
    "5934": {
      "op": "==",
      "defined_out": [
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%8#0"
      ]
    },
    "5935": {
      "error": "Proposal was not reviewed",
      "op": "assert // Proposal was not reviewed",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5936": {
      "op": "bytec_2 // 0x70",
      "defined_out": [
        "0x70",
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "0x70"
      ]
    },
    "5937": {
      "op": "dig 1",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "0x70",
        "proposer_bytes#0 (copy)"
      ]
    },
    "5939": {
      "op": "concat",
      "defined_out": [
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%9#0"
      ]
    },
    "5940": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5941": {
      "op": "bury 1",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "maybe_exists%1#0"
      ]
    },
    "5943": {
      "error": "Wrong proposer",
      "op": "assert // Wrong proposer",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5944": {
      "op": "dup",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)"
      ]
    },
    "5945": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_kyc",
      "op": "callsub valid_kyc",
      "defined_out": [
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%10#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%10#0"
      ]
    },
    "5948": {
      "error": "Invalid KYC",
      "op": "assert // Invalid KYC",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5949": {
      "op": "intc_0 // 0",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "0"
      ]
    },
    "5950": {
      "op": "bytec_1 // 0x6f75747374616e64696e675f66756e6473",
      "defined_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473",
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "5951": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5952": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "maybe_value%2#0"
      ]
    },
    "5953": {
      "op": "dig 3",
      "defined_out": [
        "maybe_value%2#0",
        "proposer_bytes#0",
        "requested_amount#0",
        "requested_amount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "maybe_value%2#0",
        "requested_amount#0 (copy)"
      ]
    },
    "5955": {
      "op": ">=",
      "defined_out": [
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%11#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%11#0"
      ]
    },
    "5956": {
      "error": "Insufficient treasury funds",
      "op": "assert // Insufficient treasury funds",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5957": {
      "op": "itxn_begin"
    },
    "5958": {
      "op": "dig 2",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "requested_amount#0 (copy)"
      ]
    },
    "5960": {
      "op": "itxn_field Amount",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5962": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0"
      ]
    },
    "5964": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay",
        "requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "pay"
      ]
    },
    "5965": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0"
      ]
    },
    "5967": {
      "op": "intc_0 // 0",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "0"
      ]
    },
    "5968": {
      "op": "itxn_field Fee",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0"
      ]
    },
    "5970": {
      "op": "itxn_submit"
    },
    "5971": {
      "op": "intc_0 // 0",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "0"
      ]
    },
    "5972": {
      "op": "bytec_1 // 0x6f75747374616e64696e675f66756e6473",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "5973": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "5974": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "maybe_value%0#1"
      ]
    },
    "5975": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#1",
        "requested_amount#0"
      ]
    },
    "5977": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_state_value%0#0"
      ]
    },
    "5978": {
      "op": "bytec_1 // 0x6f75747374616e64696e675f66756e6473",
      "stack_out": [
        "tmp%3#0",
        "new_state_value%0#0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "5979": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "0x6f75747374616e64696e675f66756e6473",
        "new_state_value%0#0"
      ]
    },
    "5980": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "5981": {
      "op": "itxn_begin"
    },
    "5982": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "5984": {
      "op": "pushbytes 0x8a5e4c80 // method \"fund()string\"",
      "defined_out": [
        "Method(fund()string)"
      ],
      "stack_out": [
        "Method(fund()string)"
      ]
    },
    "5990": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5992": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5994": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5996": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5997": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5999": {
      "op": "itxn_submit"
    },
    "6000": {
      "op": "itxn LastLog"
    },
    "6002": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6004": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%13#0"
      ]
    },
    "6007": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%13#0",
        "0x151f7c75"
      ]
    },
    "6009": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%14#0"
      ]
    },
    "6010": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "6011": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6014": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "6015": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ]
    },
    "6016": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0"
      ]
    },
    "6017": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "4"
      ]
    },
    "6018": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "6019": {
      "op": "bz pay_grant_proposal_ternary_false@3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ]
    },
    "6022": {
      "op": "intc_0 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "ternary_result%0#0"
      ]
    },
    "6023": {
      "block": "pay_grant_proposal_ternary_merge@4",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "ternary_result%0#0"
      ],
      "op": "bz pay_grant_proposal_after_if_else@8",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ]
    },
    "6026": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "4"
      ]
    },
    "6027": {
      "op": "frame_dig 2",
      "defined_out": [
        "4",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "4",
        "tmp%16#0"
      ]
    },
    "6029": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "4",
        "tmp%16#0 (copy)",
        "tmp%16#0 (copy)"
      ]
    },
    "6030": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "4",
        "tmp%16#0 (copy)"
      ]
    },
    "6032": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "6033": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "6034": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%16#0 (copy)"
      ]
    },
    "6036": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "4",
        "tmp%16#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "6038": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "bounded_index%0#0"
      ]
    },
    "6039": {
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6041": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "6042": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%16#0"
      ]
    },
    "6044": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "error_without_prefix#0"
      ]
    },
    "6045": {
      "op": "bytec 20 // \"Wrong Proposal Status\"",
      "defined_out": [
        "\"Wrong Proposal Status\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status\""
      ]
    },
    "6047": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "\"Wrong Proposal Status\"",
        "error_without_prefix#0"
      ]
    },
    "6048": {
      "op": "match pay_grant_proposal_switch_case_0@6",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ]
    },
    "6052": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "6053": {
      "block": "pay_grant_proposal_switch_case_0@6",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "error": "Wrong Proposal Status",
      "op": "err // Wrong Proposal Status"
    },
    "6054": {
      "block": "pay_grant_proposal_after_if_else@8",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "6055": {
      "block": "pay_grant_proposal_ternary_false@3",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "awst_tmp%0#0"
      ]
    },
    "6057": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "6060": {
      "op": "bytec 21 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%18#0",
        "\"ERR:\""
      ]
    },
    "6062": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "ternary_result%0#0"
      ]
    },
    "6063": {
      "op": "b pay_grant_proposal_ternary_merge@4"
    },
    "6066": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.decommission_proposal",
      "params": {
        "proposal_id#0": "bytes"
      },
      "block": "decommission_proposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6069": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6071": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "6072": {
      "op": "bytec 15 // 0x78676f765f6461656d6f6e",
      "defined_out": [
        "0",
        "0x78676f765f6461656d6f6e",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x78676f765f6461656d6f6e"
      ]
    },
    "6074": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6075": {
      "error": "check self.xgov_daemon exists",
      "op": "assert // check self.xgov_daemon exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "6076": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "6077": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "6078": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "6080": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal",
      "op": "callsub _is_proposal",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "6083": {
      "error": "Invalid proposal",
      "op": "assert // Invalid proposal",
      "stack_out": []
    },
    "6084": {
      "op": "itxn_begin"
    },
    "6085": {
      "op": "frame_dig -1",
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "6087": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6088": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6089": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6091": {
      "op": "pushbytes 0x69ecf4a2 // method \"decommission()string\"",
      "defined_out": [
        "Method(decommission()string)",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "Method(decommission()string)"
      ]
    },
    "6097": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6099": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "appl"
      ]
    },
    "6101": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6103": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "0"
      ]
    },
    "6104": {
      "op": "itxn_field Fee",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6106": {
      "op": "itxn_submit"
    },
    "6107": {
      "op": "itxn LastLog"
    },
    "6109": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6111": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "6114": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "6116": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "6117": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "6118": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6121": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "6122": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "6123": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "6124": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "4"
      ]
    },
    "6125": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "6126": {
      "op": "bz decommission_proposal_ternary_false@3",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "6129": {
      "op": "intc_0 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "ternary_result%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "ternary_result%0#0"
      ]
    },
    "6130": {
      "block": "decommission_proposal_ternary_merge@4",
      "stack_in": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "ternary_result%0#0"
      ],
      "op": "bz decommission_proposal_after_if_else@10",
      "defined_out": [],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "6133": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "4"
      ]
    },
    "6134": {
      "op": "frame_dig 3",
      "defined_out": [
        "4",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "4",
        "tmp%7#0"
      ]
    },
    "6136": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "4",
        "tmp%7#0 (copy)",
        "tmp%7#0 (copy)"
      ]
    },
    "6137": {
      "op": "cover 2",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "4",
        "tmp%7#0 (copy)"
      ]
    },
    "6139": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "6140": {
      "op": "intc_2 // 4",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "6141": {
      "op": "dig 2",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%7#0 (copy)"
      ]
    },
    "6143": {
      "op": "uncover 2",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "4",
        "tmp%7#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "6145": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "bounded_index%0#0"
      ]
    },
    "6146": {
      "op": "frame_dig 2",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6148": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "6149": {
      "op": "uncover 2",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%7#0"
      ]
    },
    "6151": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "error_without_prefix#0"
      ]
    },
    "6152": {
      "op": "bytec 20 // \"Wrong Proposal Status\"",
      "defined_out": [
        "\"Wrong Proposal Status\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status\""
      ]
    },
    "6154": {
      "op": "bytec 50 // \"Missing Config\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"Wrong Proposal Status\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status\"",
        "\"Missing Config\""
      ]
    },
    "6156": {
      "op": "pushbytes \"There are voters assigned to this proposal\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"There are voters assigned to this proposal\"",
        "\"Wrong Proposal Status\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status\"",
        "\"Missing Config\"",
        "\"There are voters assigned to this proposal\""
      ]
    },
    "6200": {
      "op": "uncover 3",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "\"Wrong Proposal Status\"",
        "\"Missing Config\"",
        "\"There are voters assigned to this proposal\"",
        "error_without_prefix#0"
      ]
    },
    "6202": {
      "op": "match decommission_proposal_switch_case_0@6 decommission_proposal_switch_case_1@7 decommission_proposal_switch_case_2@8",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "6210": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "6211": {
      "block": "decommission_proposal_switch_case_2@8",
      "stack_in": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "error": "There are voters assigned to this proposal",
      "op": "err // There are voters assigned to this proposal"
    },
    "6212": {
      "block": "decommission_proposal_switch_case_1@7",
      "stack_in": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "error": "Missing Config",
      "op": "err // Missing Config"
    },
    "6213": {
      "block": "decommission_proposal_switch_case_0@6",
      "stack_in": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "error": "Wrong Proposal Status",
      "op": "err // Wrong Proposal Status"
    },
    "6214": {
      "block": "decommission_proposal_after_if_else@10",
      "stack_in": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "0"
      ]
    },
    "6215": {
      "op": "bytec_3 // 0x70656e64696e675f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "6216": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6217": {
      "error": "check self.pending_proposals exists",
      "op": "assert // check self.pending_proposals exists",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "6218": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "6219": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "new_state_value%0#0"
      ]
    },
    "6220": {
      "op": "bytec_3 // 0x70656e64696e675f70726f706f73616c73",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "new_state_value%0#0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "6221": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "0x70656e64696e675f70726f706f73616c73",
        "new_state_value%0#0"
      ]
    },
    "6222": {
      "op": "app_global_put",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "6223": {
      "op": "frame_dig 0",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6225": {
      "op": "bytec 47 // 0x70726f706f736572",
      "defined_out": [
        "0x70726f706f736572",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "0x70726f706f736572"
      ]
    },
    "6227": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "proposer_bytes#0",
        "proposer_exists#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0",
        "proposer_exists#0"
      ]
    },
    "6228": {
      "op": "pop",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0"
      ]
    },
    "6229": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)"
      ]
    },
    "6230": {
      "op": "len",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "proposer_bytes#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0",
        "tmp%12#0"
      ]
    },
    "6231": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "proposer_bytes#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0",
        "tmp%12#0",
        "32"
      ]
    },
    "6233": {
      "op": "==",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "proposer_bytes#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0",
        "tmp%13#0"
      ]
    },
    "6234": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0"
      ]
    },
    "6235": {
      "op": "bytec_2 // 0x70",
      "defined_out": [
        "0x70",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0",
        "0x70"
      ]
    },
    "6236": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "0x70",
        "proposer_bytes#0"
      ]
    },
    "6237": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0"
      ]
    },
    "6238": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "6239": {
      "op": "box_get",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6240": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0",
        "maybe_value%2#0"
      ]
    },
    "6241": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "6242": {
      "op": "dup",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0",
        "maybe_value%2#0",
        "0",
        "0"
      ]
    },
    "6243": {
      "op": "setbit",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%14#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0",
        "updated_data%0#0"
      ]
    },
    "6244": {
      "op": "box_put",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "6245": {
      "retsub": true,
      "op": "retsub"
    },
    "6246": {
      "block": "decommission_proposal_ternary_false@3",
      "stack_in": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "awst_tmp%0#0"
      ]
    },
    "6248": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "6251": {
      "op": "bytec 21 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%9#0",
        "\"ERR:\""
      ]
    },
    "6253": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "ternary_result%0#0"
      ]
    },
    "6254": {
      "op": "b decommission_proposal_ternary_merge@4"
    },
    "6257": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.drop_proposal",
      "params": {
        "proposal_id#0": "bytes"
      },
      "block": "drop_proposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6260": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6261": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "6262": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6263": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "6264": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6265": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "6266": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "6268": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal",
      "op": "callsub _is_proposal",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "6271": {
      "error": "Invalid proposal",
      "op": "assert // Invalid proposal",
      "stack_out": []
    },
    "6272": {
      "op": "frame_dig -1",
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "6274": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "6275": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "6276": {
      "op": "bytec 47 // 0x70726f706f736572",
      "defined_out": [
        "0x70726f706f736572",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0x70726f706f736572"
      ]
    },
    "6278": {
      "op": "app_global_get_ex",
      "defined_out": [
        "proposer_bytes#0",
        "proposer_exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "proposer_bytes#0",
        "proposer_exists#0"
      ]
    },
    "6279": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0",
        "proposer_bytes#0"
      ]
    },
    "6280": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "proposer_bytes#0",
        "proposer_bytes#0"
      ]
    },
    "6281": {
      "op": "cover 2",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0"
      ]
    },
    "6283": {
      "op": "dup",
      "defined_out": [
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)"
      ]
    },
    "6284": {
      "op": "len",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0",
        "tmp%3#0"
      ]
    },
    "6285": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "proposer_bytes#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0",
        "tmp%3#0",
        "32"
      ]
    },
    "6287": {
      "op": "==",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0",
        "tmp%4#0"
      ]
    },
    "6288": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0"
      ]
    },
    "6289": {
      "op": "txn Sender",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0",
        "tmp%5#0"
      ]
    },
    "6291": {
      "op": "==",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "tmp%6#0"
      ]
    },
    "6292": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0"
      ]
    },
    "6293": {
      "op": "itxn_begin"
    },
    "6294": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "proposer_bytes#0"
      ]
    },
    "6296": {
      "op": "pushbytes 0x7371321a // method \"drop()string\"",
      "defined_out": [
        "Method(drop()string)",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "Method(drop()string)"
      ]
    },
    "6302": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "proposer_bytes#0"
      ]
    },
    "6304": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "appl"
      ]
    },
    "6306": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "proposer_bytes#0"
      ]
    },
    "6308": {
      "op": "intc_0 // 0",
      "stack_out": [
        "proposer_bytes#0",
        "0"
      ]
    },
    "6309": {
      "op": "itxn_field Fee",
      "stack_out": [
        "proposer_bytes#0"
      ]
    },
    "6311": {
      "op": "itxn_submit"
    },
    "6312": {
      "op": "itxn LastLog"
    },
    "6314": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6316": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "proposer_bytes#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%8#0"
      ]
    },
    "6319": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "proposer_bytes#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "6321": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "proposer_bytes#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "6322": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "6323": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6326": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "6327": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "proposer_bytes#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "6328": {
      "op": "dup",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "6329": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "proposer_bytes#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "4"
      ]
    },
    "6330": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "proposer_bytes#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "6331": {
      "op": "bz drop_proposal_ternary_false@3",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "6334": {
      "op": "intc_0 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "proposer_bytes#0",
        "ternary_result%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "ternary_result%0#0"
      ]
    },
    "6335": {
      "block": "drop_proposal_ternary_merge@4",
      "stack_in": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "ternary_result%0#0"
      ],
      "op": "bz drop_proposal_after_if_else@8",
      "defined_out": [],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "6338": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "4"
      ]
    },
    "6339": {
      "op": "frame_dig 3",
      "defined_out": [
        "4",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "4",
        "tmp%11#0"
      ]
    },
    "6341": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "4",
        "tmp%11#0 (copy)",
        "tmp%11#0 (copy)"
      ]
    },
    "6342": {
      "op": "cover 2",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "4",
        "tmp%11#0 (copy)"
      ]
    },
    "6344": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "6345": {
      "op": "intc_2 // 4",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "6346": {
      "op": "dig 2",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%11#0 (copy)"
      ]
    },
    "6348": {
      "op": "uncover 2",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "4",
        "tmp%11#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "6350": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "bounded_index%0#0"
      ]
    },
    "6351": {
      "op": "frame_dig 2",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6353": {
      "op": "swap",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "6354": {
      "op": "uncover 2",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%11#0"
      ]
    },
    "6356": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "error_without_prefix#0"
      ]
    },
    "6357": {
      "op": "bytec 20 // \"Wrong Proposal Status\"",
      "defined_out": [
        "\"Wrong Proposal Status\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status\""
      ]
    },
    "6359": {
      "op": "swap",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "\"Wrong Proposal Status\"",
        "error_without_prefix#0"
      ]
    },
    "6360": {
      "op": "match drop_proposal_switch_case_0@6",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "6364": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "6365": {
      "block": "drop_proposal_switch_case_0@6",
      "stack_in": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ],
      "error": "Wrong Proposal Status",
      "op": "err // Wrong Proposal Status"
    },
    "6366": {
      "block": "drop_proposal_after_if_else@8",
      "stack_in": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "0"
      ]
    },
    "6367": {
      "op": "bytec_3 // 0x70656e64696e675f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "6368": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6369": {
      "error": "check self.pending_proposals exists",
      "op": "assert // check self.pending_proposals exists",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "maybe_value%1#0"
      ]
    },
    "6370": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "6371": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "new_state_value%0#0"
      ]
    },
    "6372": {
      "op": "bytec_3 // 0x70656e64696e675f70726f706f73616c73",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "new_state_value%0#0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "6373": {
      "op": "swap",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "0x70656e64696e675f70726f706f73616c73",
        "new_state_value%0#0"
      ]
    },
    "6374": {
      "op": "app_global_put",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "6375": {
      "op": "bytec_2 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "0x70"
      ]
    },
    "6376": {
      "op": "frame_dig 0",
      "defined_out": [
        "0x70",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "0x70",
        "proposer_bytes#0"
      ]
    },
    "6378": {
      "op": "concat",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0"
      ]
    },
    "6379": {
      "op": "dup",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ]
    },
    "6380": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "proposer_bytes#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6381": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "maybe_value%2#0"
      ]
    },
    "6382": {
      "op": "intc_0 // 0",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "6383": {
      "op": "dup",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "maybe_value%2#0",
        "0",
        "0"
      ]
    },
    "6384": {
      "op": "setbit",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%15#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "updated_data%0#0"
      ]
    },
    "6385": {
      "op": "box_put",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "6386": {
      "retsub": true,
      "op": "retsub"
    },
    "6387": {
      "block": "drop_proposal_ternary_false@3",
      "stack_in": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "awst_tmp%0#0"
      ]
    },
    "6389": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "6392": {
      "op": "bytec 21 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "\"ERR:\""
      ]
    },
    "6394": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "ternary_result%0#0"
      ]
    },
    "6395": {
      "op": "b drop_proposal_ternary_merge@4"
    },
    "6398": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.deposit_funds",
      "params": {
        "payment#0": "uint64"
      },
      "block": "deposit_funds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6401": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "6403": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6405": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "6407": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "6408": {
      "error": "Wrong Receiver",
      "op": "assert // Wrong Receiver",
      "stack_out": []
    },
    "6409": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6410": {
      "op": "bytec_1 // 0x6f75747374616e64696e675f66756e6473",
      "defined_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ],
      "stack_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6411": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6412": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "6413": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%0#0",
        "payment#0 (copy)"
      ]
    },
    "6415": {
      "op": "gtxns Amount",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ]
    },
    "6417": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "6418": {
      "op": "bytec_1 // 0x6f75747374616e64696e675f66756e6473",
      "stack_out": [
        "new_state_value%0#0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6419": {
      "op": "swap",
      "stack_out": [
        "0x6f75747374616e64696e675f66756e6473",
        "new_state_value%0#0"
      ]
    },
    "6420": {
      "op": "app_global_put",
      "stack_out": []
    },
    "6421": {
      "retsub": true,
      "op": "retsub"
    },
    "6422": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_funds",
      "params": {
        "amount#0": "uint64"
      },
      "block": "withdraw_funds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6425": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6428": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "6429": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6430": {
      "op": "bytec_1 // 0x6f75747374616e64696e675f66756e6473",
      "defined_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ],
      "stack_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6431": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6432": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "6433": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "6435": {
      "op": ">=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "6436": {
      "error": "Insufficient funds",
      "op": "assert // Insufficient funds",
      "stack_out": []
    },
    "6437": {
      "op": "txn Fee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "6439": {
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "6441": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "2"
      ]
    },
    "6443": {
      "op": "*",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "6444": {
      "op": ">=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "6445": {
      "error": "Insufficient fee",
      "op": "assert // Insufficient fee",
      "stack_out": []
    },
    "6446": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "6447": {
      "op": "bytec_1 // 0x6f75747374616e64696e675f66756e6473",
      "stack_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6448": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6449": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "6450": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "6452": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "6453": {
      "op": "bytec_1 // 0x6f75747374616e64696e675f66756e6473",
      "stack_out": [
        "new_state_value%0#0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6454": {
      "op": "swap",
      "stack_out": [
        "0x6f75747374616e64696e675f66756e6473",
        "new_state_value%0#0"
      ]
    },
    "6455": {
      "op": "app_global_put",
      "stack_out": []
    },
    "6456": {
      "op": "itxn_begin"
    },
    "6457": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "6458": {
      "op": "bytec 4 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0",
        "0x78676f765f6d616e61676572"
      ],
      "stack_out": [
        "0",
        "0x78676f765f6d616e61676572"
      ]
    },
    "6460": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6461": {
      "error": "check self.xgov_manager exists",
      "op": "assert // check self.xgov_manager exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "6462": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "6464": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "6466": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "6468": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "6469": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6471": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "6472": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6474": {
      "op": "itxn_submit"
    },
    "6475": {
      "retsub": true,
      "op": "retsub"
    },
    "6476": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_balance",
      "params": {},
      "block": "withdraw_balance",
      "stack_in": [],
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6479": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "6480": {
      "op": "txn Fee",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "6482": {
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "6484": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "2"
      ]
    },
    "6486": {
      "op": "*",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "6487": {
      "op": ">=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "6488": {
      "error": "Insufficient fee",
      "op": "assert // Insufficient fee",
      "stack_out": []
    },
    "6489": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "6491": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "6493": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "6494": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%6#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%6#0"
      ]
    },
    "6496": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%1#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "6498": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0",
        "value%1#0"
      ]
    },
    "6499": {
      "op": "-",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "6500": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "6501": {
      "op": "bytec_1 // 0x6f75747374616e64696e675f66756e6473",
      "defined_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6502": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6503": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%0#0"
      ]
    },
    "6504": {
      "op": "-",
      "defined_out": [
        "amount#0"
      ],
      "stack_out": [
        "amount#0"
      ]
    },
    "6505": {
      "op": "dup",
      "defined_out": [
        "amount#0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0",
        "amount#0 (copy)"
      ]
    },
    "6506": {
      "error": "Insufficient funds",
      "op": "assert // Insufficient funds",
      "stack_out": [
        "amount#0"
      ]
    },
    "6507": {
      "op": "itxn_begin"
    },
    "6508": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amount#0",
        "0"
      ]
    },
    "6509": {
      "op": "bytec 4 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0",
        "0x78676f765f6d616e61676572",
        "amount#0"
      ],
      "stack_out": [
        "amount#0",
        "0",
        "0x78676f765f6d616e61676572"
      ]
    },
    "6511": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6512": {
      "error": "check self.xgov_manager exists",
      "op": "assert // check self.xgov_manager exists",
      "stack_out": [
        "amount#0",
        "maybe_value%1#0"
      ]
    },
    "6513": {
      "op": "itxn_field Receiver"
    },
    "6515": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "6517": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "6518": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6520": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "6521": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6523": {
      "op": "itxn_submit"
    },
    "6524": {
      "retsub": true,
      "op": "retsub"
    },
    "6525": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.get_state",
      "params": {},
      "block": "get_state",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6526": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "6527": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6528": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "6529": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "6531": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0x00",
        "0"
      ]
    },
    "6532": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_value%0#0"
      ]
    },
    "6534": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "6535": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "0"
      ]
    },
    "6536": {
      "op": "bytec 9 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x7061757365645f70726f706f73616c73",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0",
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "6538": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6539": {
      "error": "check self.paused_proposals exists",
      "op": "assert // check self.paused_proposals exists",
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%1#0"
      ]
    },
    "6540": {
      "op": "bytec 8 // 0x00",
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%1#0",
        "0x00"
      ]
    },
    "6542": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%1#0",
        "0x00",
        "0"
      ]
    },
    "6543": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%0#0",
        "0x00",
        "0",
        "maybe_value%1#0"
      ]
    },
    "6545": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "6546": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "6547": {
      "op": "bytec 4 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0",
        "0x78676f765f6d616e61676572",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0",
        "0x78676f765f6d616e61676572"
      ]
    },
    "6549": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6550": {
      "error": "check self.xgov_manager exists",
      "op": "assert // check self.xgov_manager exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0"
      ]
    },
    "6551": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "6552": {
      "op": "bytec 12 // 0x78676f765f7061796f72",
      "defined_out": [
        "0",
        "0x78676f765f7061796f72",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "0",
        "0x78676f765f7061796f72"
      ]
    },
    "6554": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "6555": {
      "error": "check self.xgov_payor exists",
      "op": "assert // check self.xgov_payor exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "6556": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "6557": {
      "op": "bytec 22 // 0x78676f765f636f756e63696c",
      "defined_out": [
        "0",
        "0x78676f765f636f756e63696c",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "0x78676f765f636f756e63696c"
      ]
    },
    "6559": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%4#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "6560": {
      "error": "check self.xgov_council exists",
      "op": "assert // check self.xgov_council exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "6561": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "6562": {
      "op": "bytec 11 // 0x78676f765f73756273637269626572",
      "defined_out": [
        "0",
        "0x78676f765f73756273637269626572",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "0x78676f765f73756273637269626572"
      ]
    },
    "6564": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%5#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "6565": {
      "error": "check self.xgov_subscriber exists",
      "op": "assert // check self.xgov_subscriber exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "6566": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "6567": {
      "op": "bytec 13 // 0x6b79635f70726f7669646572",
      "defined_out": [
        "0",
        "0x6b79635f70726f7669646572",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0",
        "0x6b79635f70726f7669646572"
      ]
    },
    "6569": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%6#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "6570": {
      "error": "check self.kyc_provider exists",
      "op": "assert // check self.kyc_provider exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "6571": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "0"
      ]
    },
    "6572": {
      "op": "bytec 14 // 0x636f6d6d69747465655f6d616e61676572",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6d616e61676572",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "0",
        "0x636f6d6d69747465655f6d616e61676572"
      ]
    },
    "6574": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%7#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "6575": {
      "error": "check self.committee_manager exists",
      "op": "assert // check self.committee_manager exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ]
    },
    "6576": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "0"
      ]
    },
    "6577": {
      "op": "bytec 15 // 0x78676f765f6461656d6f6e",
      "defined_out": [
        "0",
        "0x78676f765f6461656d6f6e",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "0",
        "0x78676f765f6461656d6f6e"
      ]
    },
    "6579": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%8#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "6580": {
      "error": "check self.xgov_daemon exists",
      "op": "assert // check self.xgov_daemon exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "6581": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "0"
      ]
    },
    "6582": {
      "op": "bytec 16 // 0x78676f765f666565",
      "defined_out": [
        "0",
        "0x78676f765f666565",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "0",
        "0x78676f765f666565"
      ]
    },
    "6584": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%9#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "6585": {
      "error": "check self.xgov_fee exists",
      "op": "assert // check self.xgov_fee exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ]
    },
    "6586": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0"
      ]
    },
    "6587": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "6588": {
      "op": "bytec 17 // 0x70726f706f7365725f666565",
      "defined_out": [
        "0",
        "0x70726f706f7365725f666565",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "0",
        "0x70726f706f7365725f666565"
      ]
    },
    "6590": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "6591": {
      "error": "check self.proposer_fee exists",
      "op": "assert // check self.proposer_fee exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "maybe_value%10#0"
      ]
    },
    "6592": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "6593": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "6594": {
      "op": "bytec 10 // 0x6f70656e5f70726f706f73616c5f666565",
      "defined_out": [
        "0",
        "0x6f70656e5f70726f706f73616c5f666565",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "6596": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%11#0",
        "maybe_value%11#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "6597": {
      "error": "check self.open_proposal_fee exists",
      "op": "assert // check self.open_proposal_fee exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%11#0"
      ]
    },
    "6598": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "6599": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "6600": {
      "op": "bytec 23 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
      "defined_out": [
        "0",
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ]
    },
    "6602": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%12#0",
        "maybe_value%12#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "6603": {
      "error": "check self.daemon_ops_funding_bps exists",
      "op": "assert // check self.daemon_ops_funding_bps exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%12#0"
      ]
    },
    "6604": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "6605": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "6606": {
      "op": "bytec 24 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073",
      "defined_out": [
        "0",
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0",
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ]
    },
    "6608": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%13#0",
        "maybe_value%13#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "6609": {
      "error": "check self.proposal_commitment_bps exists",
      "op": "assert // check self.proposal_commitment_bps exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%13#0"
      ]
    },
    "6610": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "6611": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0"
      ]
    },
    "6612": {
      "op": "bytec 25 // 0x6d696e5f7265717565737465645f616d6f756e74",
      "defined_out": [
        "0",
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0",
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ]
    },
    "6614": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%14#0",
        "maybe_value%14#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%14#0",
        "maybe_exists%14#0"
      ]
    },
    "6615": {
      "error": "check self.min_requested_amount exists",
      "op": "assert // check self.min_requested_amount exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%14#0"
      ]
    },
    "6616": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "6617": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0"
      ]
    },
    "6618": {
      "op": "bytec 26 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
      "defined_out": [
        "0",
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0",
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ]
    },
    "6620": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%15#0",
        "maybe_value%15#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%15#0",
        "maybe_exists%15#0"
      ]
    },
    "6621": {
      "error": "check self.max_requested_amount_small exists",
      "op": "assert // check self.max_requested_amount_small exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%15#0"
      ]
    },
    "6622": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "6623": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0"
      ]
    },
    "6624": {
      "op": "bytec 27 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
      "defined_out": [
        "0",
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0",
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ]
    },
    "6626": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%16#0",
        "maybe_value%16#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%16#0",
        "maybe_exists%16#0"
      ]
    },
    "6627": {
      "error": "check self.max_requested_amount_medium exists",
      "op": "assert // check self.max_requested_amount_medium exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%16#0"
      ]
    },
    "6628": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "6629": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0"
      ]
    },
    "6630": {
      "op": "bytec 28 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
      "defined_out": [
        "0",
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0",
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ]
    },
    "6632": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%17#0",
        "maybe_value%17#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%17#0",
        "maybe_exists%17#0"
      ]
    },
    "6633": {
      "error": "check self.max_requested_amount_large exists",
      "op": "assert // check self.max_requested_amount_large exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%17#0"
      ]
    },
    "6634": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "6635": {
      "op": "cover 2",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%8#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "6637": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%8#0",
        "result%1#0"
      ]
    },
    "6638": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%1#0",
        "val_as_bytes%8#0"
      ]
    },
    "6639": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0"
      ]
    },
    "6640": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "0"
      ]
    },
    "6641": {
      "op": "bytec 29 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ]
    },
    "6643": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%18#0",
        "maybe_value%18#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "maybe_value%18#0",
        "maybe_exists%18#0"
      ]
    },
    "6644": {
      "error": "check self.discussion_duration_small exists",
      "op": "assert // check self.discussion_duration_small exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "maybe_value%18#0"
      ]
    },
    "6645": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0"
      ]
    },
    "6646": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "0"
      ]
    },
    "6647": {
      "op": "bytec 30 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ]
    },
    "6649": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%19#0",
        "maybe_value%19#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "maybe_value%19#0",
        "maybe_exists%19#0"
      ]
    },
    "6650": {
      "error": "check self.discussion_duration_medium exists",
      "op": "assert // check self.discussion_duration_medium exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "maybe_value%19#0"
      ]
    },
    "6651": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "6652": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0"
      ]
    },
    "6653": {
      "op": "bytec 31 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ]
    },
    "6655": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%20#0",
        "maybe_value%2#0",
        "maybe_value%20#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%20#0",
        "maybe_exists%20#0"
      ]
    },
    "6656": {
      "error": "check self.discussion_duration_large exists",
      "op": "assert // check self.discussion_duration_large exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%20#0"
      ]
    },
    "6657": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "6658": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0"
      ]
    },
    "6659": {
      "op": "bytec 32 // 0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
      "defined_out": [
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765"
      ]
    },
    "6661": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%21#0",
        "maybe_value%2#0",
        "maybe_value%21#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%21#0",
        "maybe_exists%21#0"
      ]
    },
    "6662": {
      "error": "check self.discussion_duration_xlarge exists",
      "op": "assert // check self.discussion_duration_xlarge exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%21#0"
      ]
    },
    "6663": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ]
    },
    "6664": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%9#0"
      ]
    },
    "6666": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "6668": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "result%4#0"
      ]
    },
    "6669": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%12#0",
        "result%4#0",
        "val_as_bytes%11#0"
      ]
    },
    "6671": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%12#0",
        "result%5#0"
      ]
    },
    "6672": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%5#0",
        "val_as_bytes%12#0"
      ]
    },
    "6673": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0"
      ]
    },
    "6674": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "0"
      ]
    },
    "6675": {
      "op": "bytec 33 // 0x766f74696e675f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0",
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "0",
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ]
    },
    "6677": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%22#0",
        "maybe_value%2#0",
        "maybe_value%22#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "maybe_value%22#0",
        "maybe_exists%22#0"
      ]
    },
    "6678": {
      "error": "check self.voting_duration_small exists",
      "op": "assert // check self.voting_duration_small exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "maybe_value%22#0"
      ]
    },
    "6679": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0"
      ]
    },
    "6680": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "0"
      ]
    },
    "6681": {
      "op": "bytec 34 // 0x766f74696e675f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0",
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "0",
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ]
    },
    "6683": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%23#0",
        "maybe_value%2#0",
        "maybe_value%23#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "maybe_value%23#0",
        "maybe_exists%23#0"
      ]
    },
    "6684": {
      "error": "check self.voting_duration_medium exists",
      "op": "assert // check self.voting_duration_medium exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "maybe_value%23#0"
      ]
    },
    "6685": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ]
    },
    "6686": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0"
      ]
    },
    "6687": {
      "op": "bytec 35 // 0x766f74696e675f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0",
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0",
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ]
    },
    "6689": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%24#0",
        "maybe_value%2#0",
        "maybe_value%24#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%24#0",
        "maybe_exists%24#0"
      ]
    },
    "6690": {
      "error": "check self.voting_duration_large exists",
      "op": "assert // check self.voting_duration_large exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%24#0"
      ]
    },
    "6691": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ]
    },
    "6692": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "0"
      ]
    },
    "6693": {
      "op": "bytec 36 // 0x766f74696e675f6475726174696f6e5f786c61726765",
      "defined_out": [
        "0",
        "0x766f74696e675f6475726174696f6e5f786c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "0",
        "0x766f74696e675f6475726174696f6e5f786c61726765"
      ]
    },
    "6695": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%25#0",
        "maybe_value%2#0",
        "maybe_value%25#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "maybe_value%25#0",
        "maybe_exists%25#0"
      ]
    },
    "6696": {
      "error": "check self.voting_duration_xlarge exists",
      "op": "assert // check self.voting_duration_xlarge exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "maybe_value%25#0"
      ]
    },
    "6697": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0"
      ]
    },
    "6698": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%13#0"
      ]
    },
    "6700": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ]
    },
    "6702": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "result%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "result%8#0"
      ]
    },
    "6703": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%16#0",
        "result%8#0",
        "val_as_bytes%15#0"
      ]
    },
    "6705": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "result%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%16#0",
        "result%9#0"
      ]
    },
    "6706": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%9#0",
        "val_as_bytes%16#0"
      ]
    },
    "6707": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0"
      ]
    },
    "6708": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "0"
      ]
    },
    "6709": {
      "op": "bytec 37 // 0x71756f72756d5f736d616c6c",
      "defined_out": [
        "0",
        "0x71756f72756d5f736d616c6c",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "0",
        "0x71756f72756d5f736d616c6c"
      ]
    },
    "6711": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%26#0",
        "maybe_value%2#0",
        "maybe_value%26#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "maybe_value%26#0",
        "maybe_exists%26#0"
      ]
    },
    "6712": {
      "error": "check self.quorum_small exists",
      "op": "assert // check self.quorum_small exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "maybe_value%26#0"
      ]
    },
    "6713": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0"
      ]
    },
    "6714": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "0"
      ]
    },
    "6715": {
      "op": "bytec 38 // 0x71756f72756d5f6d656469756d",
      "defined_out": [
        "0",
        "0x71756f72756d5f6d656469756d",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "0",
        "0x71756f72756d5f6d656469756d"
      ]
    },
    "6717": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%27#0",
        "maybe_value%2#0",
        "maybe_value%27#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "maybe_value%27#0",
        "maybe_exists%27#0"
      ]
    },
    "6718": {
      "error": "check self.quorum_medium exists",
      "op": "assert // check self.quorum_medium exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "maybe_value%27#0"
      ]
    },
    "6719": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0"
      ]
    },
    "6720": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "0"
      ]
    },
    "6721": {
      "op": "bytec 39 // 0x71756f72756d5f6c61726765",
      "defined_out": [
        "0",
        "0x71756f72756d5f6c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "0",
        "0x71756f72756d5f6c61726765"
      ]
    },
    "6723": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%28#0",
        "maybe_value%2#0",
        "maybe_value%28#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "maybe_value%28#0",
        "maybe_exists%28#0"
      ]
    },
    "6724": {
      "error": "check self.quorum_large exists",
      "op": "assert // check self.quorum_large exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "maybe_value%28#0"
      ]
    },
    "6725": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0"
      ]
    },
    "6726": {
      "op": "cover 2",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%19#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0"
      ]
    },
    "6728": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%12#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%19#0",
        "result%12#0"
      ]
    },
    "6729": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%12#0",
        "val_as_bytes%19#0"
      ]
    },
    "6730": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0"
      ]
    },
    "6731": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "0"
      ]
    },
    "6732": {
      "op": "bytec 40 // 0x77656967687465645f71756f72756d5f736d616c6c",
      "defined_out": [
        "0",
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "0",
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ]
    },
    "6734": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%29#0",
        "maybe_value%2#0",
        "maybe_value%29#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "maybe_value%29#0",
        "maybe_exists%29#0"
      ]
    },
    "6735": {
      "error": "check self.weighted_quorum_small exists",
      "op": "assert // check self.weighted_quorum_small exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "maybe_value%29#0"
      ]
    },
    "6736": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0"
      ]
    },
    "6737": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "0"
      ]
    },
    "6738": {
      "op": "bytec 41 // 0x77656967687465645f71756f72756d5f6d656469756d",
      "defined_out": [
        "0",
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "0",
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ]
    },
    "6740": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%30#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%30#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "maybe_value%30#0",
        "maybe_exists%30#0"
      ]
    },
    "6741": {
      "error": "check self.weighted_quorum_medium exists",
      "op": "assert // check self.weighted_quorum_medium exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "maybe_value%30#0"
      ]
    },
    "6742": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0"
      ]
    },
    "6743": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "0"
      ]
    },
    "6744": {
      "op": "bytec 42 // 0x77656967687465645f71756f72756d5f6c61726765",
      "defined_out": [
        "0",
        "0x77656967687465645f71756f72756d5f6c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "0",
        "0x77656967687465645f71756f72756d5f6c61726765"
      ]
    },
    "6746": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%31#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%31#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "maybe_value%31#0",
        "maybe_exists%31#0"
      ]
    },
    "6747": {
      "error": "check self.weighted_quorum_large exists",
      "op": "assert // check self.weighted_quorum_large exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "maybe_value%31#0"
      ]
    },
    "6748": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "val_as_bytes%22#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "val_as_bytes%22#0"
      ]
    },
    "6749": {
      "op": "cover 2",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%22#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0"
      ]
    },
    "6751": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%15#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%22#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%22#0",
        "result%15#0"
      ]
    },
    "6752": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%15#0",
        "val_as_bytes%22#0"
      ]
    },
    "6753": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0"
      ]
    },
    "6754": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "0"
      ]
    },
    "6755": {
      "op": "bytec_1 // 0x6f75747374616e64696e675f66756e6473",
      "defined_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6756": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%32#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%32#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "maybe_value%32#0",
        "maybe_exists%32#0"
      ]
    },
    "6757": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "maybe_value%32#0"
      ]
    },
    "6758": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0"
      ]
    },
    "6759": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "0"
      ]
    },
    "6760": {
      "op": "bytec_3 // 0x70656e64696e675f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x70656e64696e675f70726f706f73616c73",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "6761": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%33#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%33#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "maybe_value%33#0",
        "maybe_exists%33#0"
      ]
    },
    "6762": {
      "error": "check self.pending_proposals exists",
      "op": "assert // check self.pending_proposals exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "maybe_value%33#0"
      ]
    },
    "6763": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0"
      ]
    },
    "6764": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "0"
      ]
    },
    "6765": {
      "op": "bytec 48 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6964",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "0",
        "0x636f6d6d69747465655f6964"
      ]
    },
    "6767": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%34#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "maybe_exists%34#0"
      ]
    },
    "6768": {
      "error": "check self.committee_id exists",
      "op": "assert // check self.committee_id exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0"
      ]
    },
    "6769": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "0"
      ]
    },
    "6770": {
      "op": "bytec 43 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6d656d62657273",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "0",
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "6772": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%35#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%35#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "maybe_value%35#0",
        "maybe_exists%35#0"
      ]
    },
    "6773": {
      "error": "check self.committee_members exists",
      "op": "assert // check self.committee_members exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "maybe_value%35#0"
      ]
    },
    "6774": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0"
      ]
    },
    "6775": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "0"
      ]
    },
    "6776": {
      "op": "bytec 44 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f766f746573",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "0",
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "6778": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%36#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%36#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "maybe_value%36#0",
        "maybe_exists%36#0"
      ]
    },
    "6779": {
      "error": "check self.committee_votes exists",
      "op": "assert // check self.committee_votes exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "maybe_value%36#0"
      ]
    },
    "6780": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ]
    },
    "6781": {
      "op": "uncover 23",
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_bool%1#0"
      ]
    },
    "6783": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "6784": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%0#0",
        "is_true%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "is_true%0#0"
      ]
    },
    "6785": {
      "op": "uncover 24",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "is_true%0#0",
        "encoded_bool%0#0"
      ]
    },
    "6787": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "encoded_bool%0#0",
        "is_true%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "is_true%0#0",
        "encoded_bool%0#0",
        "1"
      ]
    },
    "6788": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_bool%0#0",
        "1",
        "is_true%0#0"
      ]
    },
    "6790": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "6791": {
      "op": "uncover 23",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%2#0",
        "maybe_value%2#0"
      ]
    },
    "6793": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "6794": {
      "op": "uncover 22",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0"
      ]
    },
    "6796": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "6797": {
      "op": "uncover 21",
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%4#0",
        "maybe_value%4#0"
      ]
    },
    "6799": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "maybe_value%34#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "6800": {
      "op": "uncover 20",
      "stack_out": [
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%5#0",
        "maybe_value%5#0"
      ]
    },
    "6802": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "maybe_value%34#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "6803": {
      "op": "uncover 19",
      "stack_out": [
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%6#0"
      ]
    },
    "6805": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "maybe_value%34#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "6806": {
      "op": "uncover 18",
      "stack_out": [
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%7#0"
      ]
    },
    "6808": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%34#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "6809": {
      "op": "uncover 17",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%8#0"
      ]
    },
    "6811": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "6812": {
      "op": "uncover 16",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%0#0"
      ]
    },
    "6814": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "6815": {
      "op": "uncover 15",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%1#0"
      ]
    },
    "6817": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "6818": {
      "op": "uncover 14",
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%2#0"
      ]
    },
    "6820": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "6821": {
      "op": "uncover 13",
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%3#0"
      ]
    },
    "6823": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "6824": {
      "op": "uncover 12",
      "stack_out": [
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%4#0"
      ]
    },
    "6826": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "6827": {
      "op": "uncover 11",
      "stack_out": [
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%5#0"
      ]
    },
    "6829": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "6830": {
      "op": "uncover 10",
      "stack_out": [
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%15#0",
        "result%2#0"
      ]
    },
    "6832": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%6#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "6833": {
      "op": "uncover 9",
      "stack_out": [
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%16#0",
        "result%6#0"
      ]
    },
    "6835": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%17#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "6836": {
      "op": "uncover 8",
      "stack_out": [
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%17#0",
        "result%10#0"
      ]
    },
    "6838": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%18#0",
        "maybe_value%34#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "6839": {
      "op": "uncover 7",
      "stack_out": [
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%18#0",
        "result%13#0"
      ]
    },
    "6841": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "maybe_value%34#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "6842": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%19#0",
        "result%16#0"
      ]
    },
    "6844": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%20#0",
        "maybe_value%34#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "6845": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%20#0",
        "val_as_bytes%23#0"
      ]
    },
    "6847": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%21#0",
        "maybe_value%34#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "6848": {
      "op": "uncover 4",
      "stack_out": [
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%21#0",
        "val_as_bytes%24#0"
      ]
    },
    "6850": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%22#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%22#0"
      ]
    },
    "6851": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%22#0",
        "maybe_value%34#0"
      ]
    },
    "6853": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%23#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%23#0"
      ]
    },
    "6854": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%23#0",
        "val_as_bytes%25#0"
      ]
    },
    "6856": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%24#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%24#0"
      ]
    },
    "6857": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%24#0",
        "val_as_bytes%26#0"
      ]
    },
    "6858": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%25#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%25#0"
      ]
    },
    "6859": {
      "retsub": true,
      "op": "retsub"
    },
    "6860": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.is_proposal",
      "params": {
        "proposal_id#0": "bytes"
      },
      "block": "is_proposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6863": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "6865": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal",
      "op": "callsub _is_proposal",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6868": {
      "error": "Invalid proposal",
      "op": "assert // Invalid proposal",
      "stack_out": []
    },
    "6869": {
      "retsub": true,
      "op": "retsub"
    }
  }
}