#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 8 0 6
    // smart_contracts/xgov_subscriber_app_mock/contract.py:15
    // class XGovSubscriberAppMock(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@9
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x42317b4f 0x5a2a3f16 // method "subscribe_xgov(uint64,address)void", method "unsubscribe_xgov(uint64)void"
    txna ApplicationArgs 0
    match subscribe_xgov unsubscribe_xgov
    err

main___algopy_default_create@9:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_0 // 1
    return


// smart_contracts.xgov_subscriber_app_mock.contract.XGovSubscriberAppMock.subscribe_xgov[routing]() -> void:
subscribe_xgov:
    // smart_contracts/xgov_subscriber_app_mock/contract.py:16
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 2
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    // smart_contracts/xgov_subscriber_app_mock/contract.py:19-21
    // xgov_fee, _xgov_min_balance_exists = op.AppGlobal.get_ex_uint64(
    //     app_id, rcfg.GS_KEY_XGOV_FEE
    // )
    dig 1
    // smart_contracts/xgov_subscriber_app_mock/contract.py:20
    // app_id, rcfg.GS_KEY_XGOV_FEE
    pushbytes 0x78676f765f666565
    // smart_contracts/xgov_subscriber_app_mock/contract.py:19-21
    // xgov_fee, _xgov_min_balance_exists = op.AppGlobal.get_ex_uint64(
    //     app_id, rcfg.GS_KEY_XGOV_FEE
    // )
    app_global_get_ex
    pop
    swap
    // smart_contracts/xgov_subscriber_app_mock/contract.py:24
    // receiver=Application(app_id).address,
    dig 2
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/xgov_subscriber_app_mock/contract.py:28-33
    // arc4.abi_call(
    //     registry_contract.XGovRegistry.subscribe_xgov,
    //     voting_address,
    //     payment,
    //     app_id=app_id,
    // )
    itxn_begin
    uncover 2
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_subscriber_app_mock/contract.py:23
    // payment = itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    intc_2 // 0
    itxn_field Fee
    // smart_contracts/xgov_subscriber_app_mock/contract.py:28-33
    // arc4.abi_call(
    //     registry_contract.XGovRegistry.subscribe_xgov,
    //     voting_address,
    //     payment,
    //     app_id=app_id,
    // )
    itxn_next
    swap
    itxn_field ApplicationID
    pushbytes 0xa082cef8 // method "subscribe_xgov(address,pay)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    intc_2 // 0
    itxn_field Fee
    itxn_submit
    // smart_contracts/xgov_subscriber_app_mock/contract.py:16
    // @arc4.abimethod()
    intc_0 // 1
    return


// smart_contracts.xgov_subscriber_app_mock.contract.XGovSubscriberAppMock.unsubscribe_xgov[routing]() -> void:
unsubscribe_xgov:
    // smart_contracts/xgov_subscriber_app_mock/contract.py:35
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // smart_contracts/xgov_subscriber_app_mock/contract.py:37-41
    // arc4.abi_call(
    //     registry_contract.XGovRegistry.unsubscribe_xgov,
    //     app_id=app_id,
    //     fee=(Global.min_txn_fee * 2),
    // )
    itxn_begin
    // smart_contracts/xgov_subscriber_app_mock/contract.py:40
    // fee=(Global.min_txn_fee * 2),
    global MinTxnFee
    pushint 2 // 2
    *
    swap
    itxn_field ApplicationID
    // smart_contracts/xgov_subscriber_app_mock/contract.py:37-41
    // arc4.abi_call(
    //     registry_contract.XGovRegistry.unsubscribe_xgov,
    //     app_id=app_id,
    //     fee=(Global.min_txn_fee * 2),
    // )
    pushbytes 0xdf39fdb9 // method "unsubscribe_xgov()void"
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    itxn_field Fee
    itxn_submit
    // smart_contracts/xgov_subscriber_app_mock/contract.py:35
    // @arc4.abimethod()
    intc_0 // 1
    return
